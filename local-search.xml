<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>《消费信用模型：定价、利润与组合》 - 读书笔记</title>
    <link href="/2022/05/30/2022-05-30-%E3%80%8A%E6%B6%88%E8%B4%B9%E4%BF%A1%E7%94%A8%E6%A8%A1%E5%9E%8B%EF%BC%9A%E5%AE%9A%E4%BB%B7%E3%80%81%E5%88%A9%E6%B6%A6%E4%B8%8E%E7%BB%84%E5%90%88%E3%80%8B/"/>
    <url>/2022/05/30/2022-05-30-%E3%80%8A%E6%B6%88%E8%B4%B9%E4%BF%A1%E7%94%A8%E6%A8%A1%E5%9E%8B%EF%BC%9A%E5%AE%9A%E4%BB%B7%E3%80%81%E5%88%A9%E6%B6%A6%E4%B8%8E%E7%BB%84%E5%90%88%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本书集合了当前信用研究和应用面临的主要问题，从三大挑战——定价（ pricing ）、利润（ profit ）与组合（ portfolio ）出发，进行了详细的探讨和论述。</p><p>这些贷款机构在零售贷款中遇到的新问题三个主要的变化趋势是：</p><ul><li><p>贷款机构如何根据违约风险差异化定价。</p></li><li><p>贷款机构如何把违约评分变成利润评分。</p></li><li><p>如何不仅对单个贷款风险进行评估，还对贷款组合的风险进行评估。</p></li></ul><h1 id="1-消费信用和信用评分简介"><a href="#1-消费信用和信用评分简介" class="headerlink" title="1 消费信用和信用评分简介"></a>1 消费信用和信用评分简介</h1><h2 id="1-1-引言：消费信用的重要性和影响力"><a href="#1-1-引言：消费信用的重要性和影响力" class="headerlink" title="1.1 引言：消费信用的重要性和影响力"></a>1.1 引言：消费信用的重要性和影响力</h2><p>讲述信用的起源，给出消费信用贷款增长数据证明消费信用的重要性和影响力。</p><h2 id="1-2-违约信用评分的历史背景"><a href="#1-2-违约信用评分的历史背景" class="headerlink" title="1.2 违约信用评分的历史背景"></a>1.2 违约信用评分的历史背景</h2><ul><li><p>申请评分 - A卡</p><p>信用评分技术诞生于 20 世纪 50 年代，当时的学者认识到用来分类的<strong>统计学方法</strong>可以用来区分贷款的好坏。最初的信用评分应用于是否给新的申请者发放贷款（贷前评分 - 申请评分）。做法是贷款机构从以往的申请者（已知好坏）那里获取数据，建立模型，把新的申请者按违约风险高低排序。</p><p>这里也提到了最常见的风险是申请者在获得贷款后12个月内出现90天及以上的逾期，<strong>这个只是坏客户定义的一种</strong>。</p><p>根据这样的坏客户定义得到的模型分数，讲究<strong>排序正确</strong>。并提到接受申请者的合格分数（准入分数）是较为主观的选择，要权衡各项业务指标如期望利润、期望损失和市场份额等。</p></li><li><p>行为评分 - B卡</p><p>行为评分技术诞生于20世纪80年代早期，是申请评分的延伸（因为它发生于一笔贷款确定放贷开始之后，行为评分 - 贷中评分）。着眼于申请者的动态表现，而不单单是申请时的静态特征。</p></li></ul><h2 id="1-3-贷款机构的目标"><a href="#1-3-贷款机构的目标" class="headerlink" title="1.3 贷款机构的目标"></a>1.3 贷款机构的目标</h2><ul><li><p>银行的目标</p><p>主要目标之一是让贷款带来最多的利润，也就是需要利润率最优。<br>$$<br>profit% = \frac{profit}{principal}<br>$$<br>另一个目标是将贷款组合（可以理解为多笔贷款的总额）的风险回报控制在可接受的范围内。</p><p>第三个目标是扩大贷款组合的规模。</p></li><li><p>贷款过程</p><ul><li><p>获得资金</p><p>通过多种途径获得资金：投资人、股东；向其他金融机构借；向储户借；用活期存款支付给储户合适的利率获得资金使用权。</p></li><li><p>建立消费贷款组合</p><p>找到借款人，管理这个贷款组合，让它产生合理的利润，使得扣除资金融资成本和其他开支后还有回报。</p></li></ul><blockquote><p>这里提到了风险定价的概念，风险定价是指利用风险信息给贷款定价（贷款利率），以增加利润。<strong>这里定价指的是定利率而不是额度。</strong></p><p>这里也提到了利润评分重点在于<strong>估计从借款人（ borrower ）那里可能获得的现金流</strong>，进而估计借款人的期望价值，找到可以预测借款人利润率的因素，以及提高这一利润率的决策方式。</p></blockquote></li></ul><h2 id="1-4-贷款决策的建模工具"><a href="#1-4-贷款决策的建模工具" class="headerlink" title="1.4 贷款决策的建模工具"></a>1.4 贷款决策的建模工具</h2><p>银行借钱给客户，无论是给新申请者的信用卡、按揭贷款、个人消费贷款，还是在现有基础上提高信用额度，<strong>本质上都是决策问题</strong>。这里主要介绍了<strong>影响图（ influence diagram ）</strong>和<strong>决策树（ decision tree ）</strong>两种工具。</p><ul><li><p>影响图</p><blockquote><p><a href="https://en.wikipedia.org/wiki/Influence_diagram">Influence diagram - Wikipedia</a></p></blockquote><p>一张影响图由三类节点（ node ）组成，之间由线（ arc ）连接。三类节点是：</p><ul><li>决策（ 用矩形表示 ）</li><li>随机事件（ 用圆圈表示 ）</li><li>结果（ 用菱形表示 ）</li></ul><p>如果某个决策或随机事件 X 对另一个决策、随机事件或结果 Y 会产生影响，就画一条 X 指向 Y 的弧线箭头，表示 X 影响 Y 。当 Y 的节点不同时，具有以下三种不同的含义。</p><ul><li> Y 是一个决策，那么 X 中所包含的信息可能会改变这个决策。</li><li> Y 是一个随机事件，那么条件概率 $P(Y|X)$ 和非条件概率 $P(Y)$ 并不相同。</li><li> Y 是一个结果，那么说明该结果受到了 X 的影响。</li></ul></li><li><p>消费信贷中的申请决策影响图</p><p><img src="https://s2.loli.net/2022/05/31/kNCxmvM7UHplGaT.png" alt="标准消费信贷的影响图"></p></li><li><p>决策树</p><blockquote><p><a href="https://en.wikipedia.org/wiki/Decision_tree">Decision tree - Wikipedia</a></p></blockquote><p>决策树中同样有三种类型的节点：</p><ul><li>决策（用矩形表示）</li><li>随机事件（用圆圈表示）</li><li>回报（ pay off ，用每条路径末端的数值表示）</li></ul><p><strong>值得注意的是，在决策树中左边的决策或事件比右边的决策或事件先发生。正是有了这种先后关系，才不需要箭头了。</strong></p></li><li><p>消费信贷中的申请决策树</p><p><img src="https://s2.loli.net/2022/05/31/YuiINgPbfxL3jH4.png" alt="标准消费信贷的决策树"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>risk control</category>
      
      <category>book</category>
      
    </categories>
    
    
    <tags>
      
      <tag>credit</tag>
      
      <tag>decision</tag>
      
      <tag>economics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 228 231</title>
    <link href="/2022/05/29/2022-05-29-Solution/"/>
    <url>/2022/05/29/2022-05-29-Solution/</url>
    
    <content type="html"><![CDATA[<h1 id="228-汇总区间"><a href="#228-汇总区间" class="headerlink" title="228. 汇总区间"></a>228. 汇总区间</h1><p>双指针 <code>start</code> 和 <code>end</code> ，开始遍历数组，每次循环找到一组可以被添加的值，注意下里循环条件就好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">summaryRanges</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        res = []</span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        length = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">while</span> start &lt; length:</span><br><span class="line">            end = start</span><br><span class="line">            <span class="keyword">while</span> end &lt; length-<span class="number">1</span> <span class="keyword">and</span> (nums[end+<span class="number">1</span>]-nums[end])==<span class="number">1</span>:</span><br><span class="line">                end += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> start == end:</span><br><span class="line">                res.append(<span class="built_in">str</span>(nums[start]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(<span class="built_in">str</span>(nums[start])+<span class="string">&#x27;-&gt;&#x27;</span>+<span class="built_in">str</span>(nums[end]))</span><br><span class="line">            start = end+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="231-2-的幂"><a href="#231-2-的幂" class="headerlink" title="231. 2 的幂"></a>231. 2 的幂</h1><p>先来个 c 的幂的万能解法，就是在定义域（但是必须是正整数）内 c 的幂的最大值设为 $x$ ，必有 $x%c=0$ ，其实就是判断是不是最大值的约数。比如说这道题 2 的定义域内的最大值是  <code>2&lt;&lt;30</code> ，就可以写成如下代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isPowerOfTwo</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">2</span>&lt;&lt;<span class="number">30</span>)%n == <span class="number">0</span> <span class="keyword">if</span> n &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p> 当然正规军的做法是位运算。首先 2 的幂的二进制表示有个规律就是所有位只有一个 1 ，所以可以通过查找次数是否二进制只有一个 1 来确定它是不是 2 的幂。这里有个小技巧<a href="https://movisli.github.io/posts/2022/05/19/Solution.html">LeetCode 191</a> ，<code>n &amp; (n - 1) </code> 可以将最后一个 1 去掉，既然只有一个 1 所以去掉之后就没有了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isPowerOfTwo</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">0</span> <span class="keyword">and</span> n &amp; (n - <span class="number">1</span>) == <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>point</tag>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 217 219</title>
    <link href="/2022/05/27/2022-05-27-Solution/"/>
    <url>/2022/05/27/2022-05-27-Solution/</url>
    
    <content type="html"><![CDATA[<h1 id="217-存在重复元素"><a href="#217-存在重复元素" class="headerlink" title="217. 存在重复元素"></a>217. 存在重复元素</h1><p>简单<code>hash</code>，建立一个<code>set</code>，遍历数组，如果元素不在里面就添加，如果在里面就返回<code>True</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">containsDuplicate</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        hashset = <span class="built_in">set</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> hashset:</span><br><span class="line">                hashset.add(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h1 id="219-存在重复元素-II"><a href="#219-存在重复元素-II" class="headerlink" title="219. 存在重复元素 II"></a>219. 存在重复元素 II</h1><p>这次涉及到元素还有它的下标，也是简单<code>hash</code>，不过要建立的是<code>dict</code>，<code>dict</code>的<code>key</code>是元素值，<code>dict</code>的<code>value</code>是元素下标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">containsNearbyDuplicate</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        hashmap = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> n,v <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> hashmap:</span><br><span class="line">                hashmap[v] = n</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> n-hashmap[v] &lt;= k:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    hashmap[v] = n</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 206</title>
    <link href="/2022/05/26/2022-05-26-Solution/"/>
    <url>/2022/05/26/2022-05-26-Solution/</url>
    
    <content type="html"><![CDATA[<h1 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a>206. 反转链表</h1><p>常见的用栈反转。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseList</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span><br><span class="line">        stack = []</span><br><span class="line">        node = head</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            stack.append(node.val)</span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line">        res = ListNode()</span><br><span class="line">        node = res</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node.<span class="built_in">next</span> = ListNode(stack.pop())</span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> res.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 203 205</title>
    <link href="/2022/05/25/2022-05-25-Solution/"/>
    <url>/2022/05/25/2022-05-25-Solution/</url>
    
    <content type="html"><![CDATA[<h1 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a>203. 移除链表元素</h1><p>一道基础删链表节点的问题，需要注意的是头节点如果不做特殊处理就得在前面再加个新的头节点，方便头节点重复时删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElements</span>(<span class="params">self, head: ListNode, val: <span class="built_in">int</span></span>) -&gt; ListNode:</span><br><span class="line">        res = ListNode()</span><br><span class="line">        res.<span class="built_in">next</span> = head</span><br><span class="line">        node = res</span><br><span class="line">        <span class="keyword">while</span> node.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">if</span> node.<span class="built_in">next</span>.val == val:</span><br><span class="line">                node.<span class="built_in">next</span> = node.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = node.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> res.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><p>也可以先对头节点进行处理，先保证头节点不是要删除的节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElements</span>(<span class="params">self, head: ListNode, val: <span class="built_in">int</span></span>) -&gt; ListNode:</span><br><span class="line">        <span class="keyword">while</span> head <span class="keyword">and</span> head.val == val:</span><br><span class="line">            head = head.<span class="built_in">next</span></span><br><span class="line">        node = head</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> node.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">if</span> node.<span class="built_in">next</span>.val == val:</span><br><span class="line">                node.<span class="built_in">next</span> = node.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = node.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><h1 id="205-同构字符串"><a href="#205-同构字符串" class="headerlink" title="205. 同构字符串"></a>205. 同构字符串</h1><p>分别建立正向映射关系<code>dict_forward</code>和逆向映射关系<code>dict_backward</code>，值得一提的是最好想象成正向映射是从字符串正向去建立映射关系，而逆向映射是从字符串逆向建立映射关系。否则，过不了这样的测试用例：</p><blockquote><p>“bbbaaaba” </p><p>“aaabbbba”</p></blockquote><p>这里有个技巧就是正向映射一旦建立就不可被覆盖，而逆向一直可以被覆盖。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isIsomorphic</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        dict_forward = &#123;&#125;</span><br><span class="line">        dict_backward = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] <span class="keyword">not</span> <span class="keyword">in</span> dict_forward:</span><br><span class="line">                dict_forward[s[i]] = t[i]</span><br><span class="line">            dict_backward[t[i]] = s[i]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(dict_forward) != <span class="built_in">len</span>(dict_backward):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> dict_forward.items():</span><br><span class="line">            <span class="keyword">if</span> dict_backward[v] != k:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
      <tag>linked_list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《信用评分工具：自动化信用管理的理论与实践》 - 读书笔记</title>
    <link href="/2022/05/24/2022-05-24-%E3%80%8A%E4%BF%A1%E7%94%A8%E8%AF%84%E5%88%86%E5%B7%A5%E5%85%B7%EF%BC%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E4%BF%A1%E7%94%A8%E7%AE%A1%E7%90%86%E7%9A%84%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B/"/>
    <url>/2022/05/24/2022-05-24-%E3%80%8A%E4%BF%A1%E7%94%A8%E8%AF%84%E5%88%86%E5%B7%A5%E5%85%B7%EF%BC%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E4%BF%A1%E7%94%A8%E7%AE%A1%E7%90%86%E7%9A%84%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><p>全书共 8 个部分，分别为：</p><ul><li><p>背景设定 - 讲述信用评分的定义及业务、历史背景、原理。明确提到了申请贷款会有一个回复“通过”或“拒绝”，如果“通过”，会进一步知道“贷款额度”与“还款条件”。这体现了一笔 loan 做成必经准入或是拦截的过程，在准入之后，还有一个差异化定价的过程。</p><blockquote><ol><li>信用评分及其业务 - 什么是信用评分、它适用于哪些经济和业务领域、它如何影响我们。</li><li>信用微历史 - 关于信用供给、信用评分、征信机构和评级机构的简要历史。</li><li>信用评分原理 - 如何进行信用评分、怎样建立评分卡。</li></ol></blockquote></li><li><p>风险业务 - 针对不同业务的风险管理有不同的决策评估方法，要建立风险管理框架，对企业和个体也要做不同的风险评估。</p><blockquote><ol start="4"><li>风险理论 - 管理层要考虑的风险管理框架，信用风险只是其中之一。</li><li>决策科学 - 信用评分是对个体风险的评估，但使用科学的方法能挖掘出更大的价值。</li><li>企业风险评估 - 对不同规模的企业贷款的评估，既有传统的理论方法，也有近期的发展。</li></ol></blockquote></li><li><p>数学和统计 - 介绍传统统计方法，包括一些机器学习的模型、算法的原理和适用范围。</p><blockquote><ol start="7"><li>预测统计 - 因为成本高或者代价大，对未来事件或结果的未知答案的估计方法很难确定。</li><li>区分度的测量 - 用于对预测变量和预测能力的稳定性以及预测的准确性进行判定。</li><li>零碎内容 - 描述性分析、预测工具、一些统计概念以及基本的评分卡开发报告。</li><li>头脑与机器 - 所需的人员（开发人员、项目组、委员会）和软件（评分卡开发、决策引擎）。</li></ol></blockquote></li><li><p>数据 - 讲述数据本身的重要性以及如何提高数据的数量与质量。</p><blockquote><ol start="11"><li>数据考虑 - 建立评分卡之前要考虑的一些必要因素，主要涉及特征变量。</li><li>数据来源 - 讨论从客户、内部系统和征信机构获取信息。</li><li>评分结构 - 关注评分卡的定制和架设、数据整合和不同来源数据的匹配。</li><li>信息共享 - 征信机构的类型、存在的原因、如何运作以及如何鼓励或约束贷款机构。</li><li>数据准备 - 开发评分卡流程的第一阶段，包括数据整合、好坏定义、采样窗口以及样本选择。</li></ol></blockquote></li><li><p>评分卡开发 - 这里提到了分离开发时去理解业务与开发过程这个概念，也讲述到了应把<strong>简单、可解释性强的模型</strong>作为评分卡开发时的选择这个倾向。</p><blockquote><p>Falkenstein E G , Boral A , Ca Rty L V . RiskCalc for Private Companies: Moody’s Default Model[J]. SSRN Electronic Journal, 2000.</p></blockquote><p>作者认为理解业务应当在开发时那个节点，在这一步需要与业务人员，决策者进行互动，所谓“谋定而后动”，这点与软件工程中的<code>可行性分析-&gt;需求分析-&gt;总体设计-&gt;详细设计</code>有着异曲同工之妙。作者把开发前大体的步骤划分为如下：</p><ul><li>项目启动 - 最开始的会议决定责任、项目内容、数据来源和潜在问题。</li><li>数据收集 - 从数据来源提取大小合适的样本。</li><li>好坏定义 - 不仅要区别好坏、不确定样本，还要剔除任何不该用来建模的样本（灰样本）。</li><li>样本分层 - 决定是否要细分样本并分别对待，要参考之前的分层方法和业务信息。（也可以用决策树辅助。）</li><li>确定模型 - 开发完毕，交付结果，包括每个特征的权重，还有评分卡的验证结果。</li><li>决策策略 - 不同情境下的决策，分数本身也是策略的一部分。分数可以被简单设置成一个临界分数（准入与拦截），但也可能会更复杂。</li></ul><p>开发的完整流程如下：</p><blockquote><ol start="16"><li>变量转换 - 分析可得数据并将其转换为可用数据，传统上包括细分类、粗分类、转换。</li><li>特征选取 - 确定哪些特征作为备选变量，它们最好是有预测能力、符合逻辑、稳定可得、合规、与客户有关并且相互独立的。</li><li>样本分层 - 是否细分样本并分别建立评分卡取决于市场、客户、数据、过程、建模等因素。</li><li>拒绝推断 - 开发申请评分卡时对被拒绝的申请者的表现进行推断。</li><li>模型校准 - 用分数分段或缩放来确保分数在不同评分卡中有相同的含义，反映相应的违约概率。</li><li>检验交付 - 用保留样本和近期样本检验模型是否过度拟合或不稳定，然后准备投入使用。</li><li>开发管理 - 评分卡开发的流程管理和安排。</li></ol></blockquote></li><li><p>实施和使用 - 遵循<strong>Wiklund提供的框架</strong>，介绍模型部署与模型监控相关内容。</p><blockquote><p>在信用评分中有三个重要的程序系统：（1）评分卡安装；（2）与信用信息的连接；（3）安装完成后的监控。</p><p>Handbook of credit scoring[M]. Global Professional Publishi, 2001.</p></blockquote><blockquote><ol start="23"><li>实施安装 - 绿地开发（ Greenfield Software Development, 指为全新环境开发系统）相关问题，以及棕地开发（ Brownfield Software Development, 指在现有或遗留软件系统存在的情况下开发和部署新的软件系统）涉及的数据、资源和转换问题。</li><li>管理控制 - 验证审查，保证分数合理有效。</li><li>跟踪监控 - 记录事件的报告，有前端报告和后端报告之分。</li><li>金融财务 - 损失准备金、风险定价和利润率等问题。</li></ol></blockquote></li><li><p>信用风险管理周期 - 这里提到风险管理周期可以分为五个阶段，<code>市场营销-&gt;申请审批-&gt;账户管理-&gt;催收-&gt;回收</code>。其中市场营销可以细分为分层（为了精准营销）和吸引客户。回收可以细分为追踪和回收（观察和表现）。</p><ul><li>分层（ segmentation ） - 确定目标客户、客户需求和适合的产品。</li><li>吸引（ solicitation ） - 设计和实施营销活动，吸引潜在客户办理业务。</li><li>获取（ acquisition ） - 获取并处理新业务申请，如果审批通过则交付产品，否则还要与客户沟通并处理疑问。</li><li>管理（ management ） - 对一般账户进行日常管理，主要是额度管理，但也包括还款、账单、咨询等。</li><li>催收（ collections ） - 重点关注早期的违约和维持客户关系。</li><li>追踪（ tracing ） - 尝试联系并找到一些因没有更新住址或联系方式而失联的客户。</li><li>回收（ rehabilitation ） - 处理后期的违约，尽可能地收回资金，其中可能采取法律手段并破坏客户关系。</li></ul><p>除此之外，还有一个欺诈风险。作者认为欺诈属于操作风险中的一种，并不属于信用风险的范畴，但必须在信用管理周期中考虑。</p><blockquote><ol start="27"><li>市场营销 - 广告媒体、质量与数量、初步筛选和使用的数据。</li><li>申请审批 - 选择客户的操作。</li><li>账户管理 - 询问贷款的人、获得贷款的人、接受贷款的人、重复贷款的人和关闭账户的人。</li><li>催收回收 - 违约原因和催收流程、催收时机和催收策略。</li><li>欺诈防范 - 趋势、类型和工具。</li></ol></blockquote></li><li><p>监管环境 - 介绍一些对金融机构的监管内容。</p><blockquote><ol start="32"><li>监管概念 - 最佳实践、善良治理、商业道德、社会责任、合规等级、判例制度、行业规范、政策程序，以及不成文规定。</li><li>隐私保护 - 贷款机构之间的数据共享、上传征信机构的内容、必须告知客户的信息等。</li><li>禁止歧视 - 涉及借贷决策中可能会使用的信息，禁止使用带有歧视的信息（种族、宗教等），或者与潜在客户不同群体的信息。</li><li>公平信贷 - 确保贷款机构采取足够措施，保证借款人能负担贷款，以及贷款条款的公平。</li><li>资本要求 - 主要针对银行的巴塞尔协议，它允许使用内部评级法计算资本金要求。</li><li>了解客户 - 提高身份识别要求，主要用于防止洗钱和犯罪活动，还有阻止恐怖活动。</li><li>国家差异 - 对一些英语国家的法律作出概述，包括美国、英国、澳大利亚、加拿大和南非。</li></ol></blockquote></li></ul><h1 id="第一部分-背景设定"><a href="#第一部分-背景设定" class="headerlink" title="第一部分 - 背景设定"></a>第一部分 - 背景设定</h1><h2 id="第-1-章-信用评分及其业务"><a href="#第-1-章-信用评分及其业务" class="headerlink" title="第 1 章 - 信用评分及其业务"></a>第 1 章 - 信用评分及其业务</h2>]]></content>
    
    
    <categories>
      
      <category>risk control</category>
      
      <category>book</category>
      
    </categories>
    
    
    <tags>
      
      <tag>credit</tag>
      
      <tag>scorecard</tag>
      
      <tag>risk control</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 202</title>
    <link href="/2022/05/24/2022-05-24-Solution/"/>
    <url>/2022/05/24/2022-05-24-Solution/</url>
    
    <content type="html"><![CDATA[<h1 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a>202. 快乐数</h1><p>首先简单找了下10以内的，满足快乐数定义的只有1和7。然后直接采取暴力解法，循环查找，如果当某次结果跳到10以内却不等于1或7时，就是<code>False</code>，否则就是<code>True</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isHappy</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        res = n</span><br><span class="line">        <span class="keyword">while</span> res&gt;=<span class="number">10</span>:</span><br><span class="line">            temp = <span class="built_in">str</span>(res)</span><br><span class="line">            res = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> temp:</span><br><span class="line">                res += <span class="built_in">int</span>(i)**<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> res == <span class="number">1</span> <span class="keyword">or</span> res == <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>也可以从题目中所说的无限循环入手，那么什么时候知道这个无限循环已经开始了呢，这就用到了<code>hashset</code>，当这次运算结果出现在<code>set</code>里时，说明循环已经开始了，否则我们把这次结果加入<code>set</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isHappy</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        hashset = &#123;n&#125;</span><br><span class="line">        <span class="keyword">while</span> n!=<span class="number">1</span>:</span><br><span class="line">            temp = <span class="built_in">str</span>(n)</span><br><span class="line">            n = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> temp:</span><br><span class="line">                n += <span class="built_in">int</span>(i)**<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> n <span class="keyword">in</span> hashset:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hashset.add(n)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 191</title>
    <link href="/2022/05/19/2022-05-19-Solution/"/>
    <url>/2022/05/19/2022-05-19-Solution/</url>
    
    <content type="html"><![CDATA[<h1 id="191-位1的个数"><a href="#191-位1的个数" class="headerlink" title="191. 位1的个数"></a>191. 位1的个数</h1><p>首先来个循环检查每一位是否为1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hammingWeight</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        bin_str = <span class="built_in">bin</span>(n)[<span class="number">2</span>:]</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> bin_str:</span><br><span class="line">            <span class="keyword">if</span> i == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>当然显然这道题考察的是位运算，所以我们可以用位运算检查循环，逐位右移，判断最低位是不是1， python 的右移运算符<code>&gt;&gt;</code>就是高位补0，低位舍去。所以移动32次，就可以得到结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hammingWeight</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">            n &gt;&gt;= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>但是在位运算里，还有个神奇的做法，可以通过<code>n&amp;(n-1)</code>把二进制中最后一个1改写成0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hammingWeight</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">            n &amp;= n-<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>参考<a href="https://leetcode.cn/problems/number-of-1-bits/solution/fu-xue-ming-zhu-xiang-jie-wei-yun-suan-f-ci7i/">【负雪明烛】详解位运算，附本题躲坑指南 - 位1的个数 - 力扣（LeetCode）</a></p>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 190</title>
    <link href="/2022/05/18/2022-05-18-Solution/"/>
    <url>/2022/05/18/2022-05-18-Solution/</url>
    
    <content type="html"><![CDATA[<h1 id="190-颠倒二进制位"><a href="#190-颠倒二进制位" class="headerlink" title="190. 颠倒二进制位"></a>190. 颠倒二进制位</h1><p>注意下题目中的32位无符号整数。暴力解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseBits</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">str</span>(<span class="string">&#x27;0&#x27;</span>*(<span class="number">32</span>-<span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">bin</span>(n))[<span class="number">2</span>:]))+<span class="built_in">str</span>(<span class="built_in">bin</span>(n))[<span class="number">2</span>:])[::-<span class="number">1</span>], <span class="number">2</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 168 171 175 181 182 183</title>
    <link href="/2022/05/16/2022-05-16-Solution/"/>
    <url>/2022/05/16/2022-05-16-Solution/</url>
    
    <content type="html"><![CDATA[<h1 id="168-Excel表列名称"><a href="#168-Excel表列名称" class="headerlink" title="168. Excel表列名称"></a>168. Excel表列名称</h1><p>此题有点类似进制转换，从A到Z有26个字母也就是26进制，需要注意的是，A对应1而不是0，Z对应26而不是25，所以在做进制转换的时候，要先减1再取余再加1。即下面<code>temp = (columnNumber-1)%26+1</code>这行代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">convertToTitle</span>(<span class="params">self, columnNumber: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> columnNumber != <span class="number">0</span>:</span><br><span class="line">            temp = (columnNumber-<span class="number">1</span>)%<span class="number">26</span>+<span class="number">1</span></span><br><span class="line">            res += <span class="built_in">chr</span>(temp+<span class="number">64</span>)</span><br><span class="line">            columnNumber = (columnNumber-temp)//<span class="number">26</span></span><br><span class="line">        <span class="keyword">return</span> res[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h1 id="171-Excel-表列序号"><a href="#171-Excel-表列序号" class="headerlink" title="171. Excel 表列序号"></a>171. Excel 表列序号</h1><p>与上题差不多，上题的逆向。本质上还是个进制转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">titleToNumber</span>(<span class="params">self, columnTitle: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        n = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> columnTitle[::-<span class="number">1</span>]:</span><br><span class="line">            res += (<span class="built_in">ord</span>(i)-<span class="number">64</span>)*n</span><br><span class="line">            n *= <span class="number">26</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="175-组合两个表"><a href="#175-组合两个表" class="headerlink" title="175. 组合两个表"></a>175. 组合两个表</h1><p>依题意做一个简单左链接就行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">t1.firstName,</span><br><span class="line">t1.lastName,</span><br><span class="line">t2.city,</span><br><span class="line">t2.state </span><br><span class="line">FROM</span><br><span class="line">Person t1</span><br><span class="line">LEFT JOIN Address t2 ON t1.personId = t2.personId</span><br></pre></td></tr></table></figure><h1 id="181-超过经理收入的员工"><a href="#181-超过经理收入的员工" class="headerlink" title="181. 超过经理收入的员工"></a>181. 超过经理收入的员工</h1><p>表自链接就行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">l.NAME AS Employee </span><br><span class="line">FROM</span><br><span class="line">Employee l</span><br><span class="line">INNER JOIN Employee r ON l.managerId = r.id </span><br><span class="line">WHERE</span><br><span class="line">l.salary &gt; r.salary</span><br></pre></td></tr></table></figure><h1 id="182-查找重复的电子邮箱"><a href="#182-查找重复的电子邮箱" class="headerlink" title="182. 查找重复的电子邮箱"></a>182. 查找重复的电子邮箱</h1><p>自链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT</span><br><span class="line">t1.Email </span><br><span class="line">FROM</span><br><span class="line">Person t1</span><br><span class="line">JOIN Person t2 ON t1.Email = t2.Email </span><br><span class="line">AND t1.Id != t2.Id</span><br></pre></td></tr></table></figure><p>子表查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">Email </span><br><span class="line">FROM</span><br><span class="line">( SELECT Email, count( 1 ) AS ec FROM Person GROUP BY Email ) tec </span><br><span class="line">WHERE</span><br><span class="line">tec.ec &gt; 1</span><br></pre></td></tr></table></figure><h1 id="183-从不订购的客户"><a href="#183-从不订购的客户" class="headerlink" title="183. 从不订购的客户"></a>183. 从不订购的客户</h1><p>子表查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">n.NAME AS Customers </span><br><span class="line">FROM</span><br><span class="line">( SELECT t1.NAME, t2.Id FROM Customers t1 LEFT JOIN Orders t2 ON t1.Id = t2.CustomerId ) n </span><br><span class="line">WHERE</span><br><span class="line">n.id IS NULL</span><br></pre></td></tr></table></figure><p>子表查询和<code>NOT IN</code>语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">Customers.Name AS Customers </span><br><span class="line">FROM</span><br><span class="line">Customers </span><br><span class="line">WHERE</span><br><span class="line">Customers.Id NOT IN ( SELECT CustomerId FROM Orders )</span><br></pre></td></tr></table></figure><p>右链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">a.NAME AS Customers </span><br><span class="line">FROM</span><br><span class="line">Customers a</span><br><span class="line">LEFT JOIN Orders b ON a.Id = b.CustomerId </span><br><span class="line">WHERE</span><br><span class="line">b.CustomerId IS NULL</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>sql</tag>
      
      <tag>ascii</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 121 125 136 169</title>
    <link href="/2022/05/15/2022-05-15-Solution/"/>
    <url>/2022/05/15/2022-05-15-Solution/</url>
    
    <content type="html"><![CDATA[<h1 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a>121. 买卖股票的最佳时机</h1><p>遍历一次数组，更新数组的最小值<code>min_pcp</code>与当前值与数组最小值差的最大值<code>max_pft</code>。遍历完成后，当前值与数组最小值差的最大值就是交易的最大利润。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    max_pft = <span class="number">0</span></span><br><span class="line">    min_pcp = prices[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> prices:</span><br><span class="line">      <span class="keyword">if</span> i &lt; min_pcp:</span><br><span class="line">        min_pcp = i</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">if</span> (i-min_pcp)&gt;max_pft:</span><br><span class="line">        max_pft = i-min_pcp</span><br><span class="line">    <span class="keyword">return</span> max_pft</span><br></pre></td></tr></table></figure><h1 id="125-验证回文串"><a href="#125-验证回文串" class="headerlink" title="125. 验证回文串"></a>125. 验证回文串</h1><p>先进行数据清洗再比较。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">isPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    washed = <span class="string">&#x27;&#x27;</span>.join(ch.lower() <span class="keyword">for</span> ch <span class="keyword">in</span> s <span class="keyword">if</span> ch.isalnum())</span><br><span class="line">    <span class="keyword">return</span> washed == washed[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h1 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136. 只出现一次的数字"></a>136. 只出现一次的数字</h1><p>蠢蠢hashset。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">singleNumber</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        hashset = <span class="built_in">set</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> hashset:</span><br><span class="line">                res.append(i)</span><br><span class="line">                hashset.add(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.remove(i)</span><br><span class="line">        <span class="keyword">return</span> res[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>题中讲到了只有一个元素出现了一次，其它元素都出现了两次。两个相同的数进行异或的结果为0，所以可以对所有元素都进行异或运算，最终得到的结果就是出现一次的元素。只能说有点想不到。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">singleNumber</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x^y, nums)</span><br></pre></td></tr></table></figure><h1 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169. 多数元素"></a>169. 多数元素</h1><p>简单粗暴，直接用字典记录每个元素出现次数，然后遍历字典，找到那个多数元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">majorityElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        hashmap = &#123;&#125;</span><br><span class="line">        feq = <span class="built_in">len</span>(nums)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> hashmap:</span><br><span class="line">                hashmap[i] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hashmap[i] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> hashmap.items():</span><br><span class="line">            <span class="keyword">if</span> v &gt; feq:</span><br><span class="line">                <span class="keyword">return</span> k</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
      <tag>string</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 83 88 94 118 119</title>
    <link href="/2022/05/13/2022-05-13-Solution/"/>
    <url>/2022/05/13/2022-05-13-Solution/</url>
    
    <content type="html"><![CDATA[<h1 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="83. 删除排序链表中的重复元素"></a>83. 删除排序链表中的重复元素</h1><p>基本链表操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteDuplicates</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        node = head</span><br><span class="line">        <span class="keyword">while</span> node.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">if</span> node.val == node.<span class="built_in">next</span>.val:</span><br><span class="line">                node.<span class="built_in">next</span> = node.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = node.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><h1 id="88-合并两个有序数组"><a href="#88-合并两个有序数组" class="headerlink" title="88. 合并两个有序数组"></a>88. 合并两个有序数组</h1><p>本题要求<code>inplace</code>，但是我们仍然可以用<code>不inplace</code>的思想做<code>inplace</code>的事情。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], m: <span class="built_in">int</span>, nums2: <span class="type">List</span>[<span class="built_in">int</span>], n: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="number">0</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> (left+right)&lt;(m+n):</span><br><span class="line">            <span class="keyword">if</span> left&gt;=m:</span><br><span class="line">                res.append(nums2[right])</span><br><span class="line">                right += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> right&gt;=n:</span><br><span class="line">                res.append(nums1[left])</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> nums1[left] &lt;= nums2[right]:</span><br><span class="line">                res.append(nums1[left])</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(nums2[right])</span><br><span class="line">                right += <span class="number">1</span></span><br><span class="line">        nums1[:]=res</span><br></pre></td></tr></table></figure><p>当然我们也可以逆向开始放数，空间复杂度会更低。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], m: <span class="built_in">int</span>, nums2: <span class="type">List</span>[<span class="built_in">int</span>], n: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        tail = m+n-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> m&gt;=<span class="number">1</span> <span class="keyword">or</span> n&gt;=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> m&lt;<span class="number">1</span>:</span><br><span class="line">                nums1[tail] = nums2[n-<span class="number">1</span>]</span><br><span class="line">                tail -= <span class="number">1</span></span><br><span class="line">                n -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> n&lt;<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> nums1[m-<span class="number">1</span>] &gt;= nums2[n-<span class="number">1</span>]:</span><br><span class="line">                nums1[tail] = nums1[m-<span class="number">1</span>]</span><br><span class="line">                m -= <span class="number">1</span></span><br><span class="line">                tail -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums1[tail] = nums2[n-<span class="number">1</span>]</span><br><span class="line">                n -= <span class="number">1</span></span><br><span class="line">                tail -= <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94. 二叉树的中序遍历"></a>94. 二叉树的中序遍历</h1><p>递归：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inorderTraversal</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            res.extend(self.inorderTraversal(root.left))</span><br><span class="line">            res.append(root.val)</span><br><span class="line">            res.extend(self.inorderTraversal(root.right))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>非递归：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inorderTraversal</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        node = root</span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">while</span> node <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                stack.append(node)</span><br><span class="line">                node = node.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = stack.pop()</span><br><span class="line">                res.append(node.val)</span><br><span class="line">                node = node.right</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="118-杨辉三角"><a href="#118-杨辉三角" class="headerlink" title="118. 杨辉三角"></a>118. 杨辉三角</h1><p>就按照杨辉三角的样子，从第三行开始，除了左右两个1，其他数等于上一行的邻近两个数的和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">self, numRows: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="keyword">if</span> numRows == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> [[<span class="number">1</span>]]</span><br><span class="line">        res = [[<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">        curRow = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> curRow&lt;numRows:</span><br><span class="line">            temp = [<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res[curRow-<span class="number">1</span>])-<span class="number">1</span>):</span><br><span class="line">                temp.append(res[curRow-<span class="number">1</span>][i]+res[curRow-<span class="number">1</span>][i+<span class="number">1</span>])</span><br><span class="line">            temp.append(<span class="number">1</span>)</span><br><span class="line">            res.append(temp)</span><br><span class="line">            curRow += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="119-杨辉三角-II"><a href="#119-杨辉三角-II" class="headerlink" title="119. 杨辉三角 II"></a>119. 杨辉三角 II</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getRow</span>(<span class="params">self, rowIndex: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        res = [<span class="number">1</span>]</span><br><span class="line">        cal_num = (rowIndex)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, cal_num+<span class="number">1</span>, <span class="number">1</span>):</span><br><span class="line">            res.append(<span class="built_in">int</span>(res[i-<span class="number">1</span>]*(rowIndex-i+<span class="number">1</span>)/i))</span><br><span class="line">        <span class="keyword">if</span> rowIndex%<span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cal_num,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">                res.append(res[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cal_num-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">                res.append(res[i])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>linked_list</tag>
      
      <tag>array</tag>
      
      <tag>binary tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 70</title>
    <link href="/2022/05/11/2022-05-11-Solution/"/>
    <url>/2022/05/11/2022-05-11-Solution/</url>
    
    <content type="html"><![CDATA[<h1 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a>70. 爬楼梯</h1><p>斐波那契数列，一个数等于他上一个数和上上的数的和。分为递归解和非递归解，如果有空间限制可以把列表看作一个栈。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climbStairs</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        lst = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n-<span class="number">1</span>):</span><br><span class="line">            lst.append(lst[i]+lst[i+<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> lst[n]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>stack</tag>
      
      <tag>recurse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 66 67 69</title>
    <link href="/2022/05/10/2022-05-10-Solution/"/>
    <url>/2022/05/10/2022-05-10-Solution/</url>
    
    <content type="html"><![CDATA[<h1 id="66-加一"><a href="#66-加一" class="headerlink" title="66. 加一"></a>66. 加一</h1><p>从后往前加就行了，需要用一个<code>carry flag</code>控制是否进位，加一对末位来说就是进位的，所以当<code>carry flag</code>变为<code>False</code>时，跳出循环。如果循环走完还需进位，则需要在<code>list</code>第0个位置增添个元素1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">plusOne</span>(<span class="params">self, digits: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        carry = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(digits)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> carry:</span><br><span class="line">                digits[i] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> digits[i] &gt;= <span class="number">10</span>:</span><br><span class="line">                    digits[i] %= <span class="number">10</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    carry = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> carry:</span><br><span class="line">            digits.insert(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> digits</span><br></pre></td></tr></table></figure><h1 id="67-二进制求和"><a href="#67-二进制求和" class="headerlink" title="67.二进制求和"></a>67.二进制求和</h1><p>直接用内置函数就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addBinary</span>(<span class="params">self, a: <span class="built_in">str</span>, b: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>(a,<span class="number">2</span>)+<span class="built_in">int</span>(b,<span class="number">2</span>)))[<span class="number">2</span>:]</span><br></pre></td></tr></table></figure><h1 id="69-x-的平方根"><a href="#69-x-的平方根" class="headerlink" title="69. x 的平方根"></a>69. x 的平方根</h1><p>牛顿迭代法：</p><p>为了方便区别问题写为求n的平方根，即<br>$$<br>x^2=n\<br>f(x)=x^2-n<br>$$<br>相当于求函数<code>f(x)</code>的根，关于牛顿迭代的原理参照</p><blockquote><p><a href="https://www.zhihu.com/question/20690553/answer/146104283">如何通俗易懂地讲解牛顿迭代法求开方（数值分析）？</a></p></blockquote><p>对$x_0$点的切线为：<br>$$<br>y = f(x_0)-2x_0(x-x0)<br>$$<br>令$y=0$，迭代后的$x_1$点值可算得：<br>$$<br>x_1=x_0-\frac{x_0}{2}+\frac{n}{2x_0}<br>$$<br>每次迭代的误差为：<br>$$<br>\varepsilon = |x0-x1|<br>$$<br>当误差小于0.1时跳出就行了。</p><p><strong>初值不能为0。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mySqrt</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            last = res</span><br><span class="line">            res = res - res/<span class="number">2</span> + x/<span class="number">2</span>/res</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(last-res) &lt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(res)</span><br></pre></td></tr></table></figure><p>二分查找：</p><p>$x$的平方根整数部分是满足$k^2\leq x$的最大$k$值，所以只要保证这个条件可以进行赋值。经典二分查找代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mySqrt</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left, right, res = <span class="number">0</span>, x, -<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = (left+right)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> mid*mid &lt;= x:</span><br><span class="line">                res = mid</span><br><span class="line">                left = mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>binary search</tag>
      
      <tag>loop</tag>
      
      <tag>Newton&#39;s method</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 58</title>
    <link href="/2022/05/09/2022-05-09-Solution/"/>
    <url>/2022/05/09/2022-05-09-Solution/</url>
    
    <content type="html"><![CDATA[<h1 id="58-最后一个单词的长度"><a href="#58-最后一个单词的长度" class="headerlink" title="58. 最后一个单词的长度"></a>58. 最后一个单词的长度</h1><p>反向遍历，用一个<code>flag</code>稍微控制下流程就行了，注意几个<code>if</code>的顺序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lengthOfLastWord</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        start = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> s[i] != <span class="string">&#x27; &#x27;</span> <span class="keyword">and</span> <span class="keyword">not</span> start:</span><br><span class="line">                start = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> s[i] == <span class="string">&#x27; &#x27;</span> <span class="keyword">and</span> start:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> start:</span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 27 28 35 53</title>
    <link href="/2022/05/07/2022-05-07-Solution/"/>
    <url>/2022/05/07/2022-05-07-Solution/</url>
    
    <content type="html"><![CDATA[<h1 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h1><p>双指针，一个指针<code>index</code>控制循环遍历，另一个指针<code>k</code>控制将正确的数填到正确的位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        length = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">while</span> index&lt;length:</span><br><span class="line">            <span class="keyword">if</span> nums[index] != val:</span><br><span class="line">                nums[k] = nums[index]</span><br><span class="line">                k+=<span class="number">1</span></span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> k</span><br></pre></td></tr></table></figure><h1 id="28-实现strStr"><a href="#28-实现strStr" class="headerlink" title="28. 实现strStr()"></a>28. 实现strStr()</h1><p>只是用的话，调用python字符串的find函数就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">strStr</span>(<span class="params">self, haystack: <span class="built_in">str</span>, needle: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> haystack.find(needle)</span><br></pre></td></tr></table></figure><p>思路就是逐位比较。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">strStr</span>(<span class="params">self, haystack: <span class="built_in">str</span>, needle: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        length = <span class="built_in">len</span>(needle)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(haystack)-length+<span class="number">1</span>):</span><br><span class="line">            j = i</span><br><span class="line">            k = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> k&lt;length <span class="keyword">and</span> haystack[j] == needle[k]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j-i == length:</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35. 搜索插入位置"></a>35. 搜索插入位置</h1><p>时间复杂度<code>O(log n)</code>，经典二分查找。但是这题如果没找到要返回插入的位置，当 $left&lt;x&lt;right$ 时，很明显该插入的位置是<code>right_index</code>，然后看一下经典二分查找代码，因为没找到的话<code>left</code>还是会加1，所以其实没找到的话<code>left</code>就是<code>right_index</code>，所以没找到返回<code>left</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchInsert</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left&lt;=right:</span><br><span class="line">            mid = (right+left)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; target:</span><br><span class="line">                left = mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &gt; target:</span><br><span class="line">                right = mid-<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure><h1 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53. 最大子数组和"></a>53. 最大子数组和</h1><p>动态规划，首先数组里至少有一个数，那么最大子数组和肯定大于等于<code>nums[0]</code>，然后从左往右遍历，创建一个变量<code>temp_sum</code>用于记录遍历过程中某一段的最大和，如果此值大于0那么往后的数还可以在此值上加，如果小于等于0那对某一段的下一段来讲算最大和时就不太需要这个<code>temp_sum</code>了。每找出一段<code>temp_sum</code>都与<code>result</code>比较取大的作为新的<code>result</code>。遍历完成后，就可以得到最大的<code>result</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxSubArray</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res = nums[<span class="number">0</span>]</span><br><span class="line">        temp_sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            temp_sum += i</span><br><span class="line">            <span class="keyword">if</span> temp_sum &gt; res:</span><br><span class="line">                res = temp_sum</span><br><span class="line">            <span class="keyword">if</span> temp_sum &lt; <span class="number">0</span>:</span><br><span class="line">                temp_sum = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度 O(n)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>point</tag>
      
      <tag>binary search</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 26</title>
    <link href="/2022/05/06/2022-05-06-Solution/"/>
    <url>/2022/05/06/2022-05-06-Solution/</url>
    
    <content type="html"><![CDATA[<h1 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a>26. 删除有序数组中的重复项</h1><p>暴力解法，创建<code>set</code>用于记录出现过的唯一元素，创建<code>drop_lst</code>用于记录要删的位置，删元素的时候注意下<code>python</code>的<code>del</code>会更改后续元素的下标，所以建立一个<code>k</code>辅助找到真正的下标再删。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeDuplicates</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        hashset = <span class="built_in">set</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        drop_lst = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] <span class="keyword">not</span> <span class="keyword">in</span> hashset:</span><br><span class="line">                hashset.add(nums[i])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                drop_lst.append(i)</span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> drop_lst:</span><br><span class="line">            <span class="keyword">del</span> nums[i-k]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(hashset)</span><br></pre></td></tr></table></figure><blockquote><p>1068 ms</p></blockquote><p>核心在于前探指针，每次循环时生成一个前探指针<code>next_index</code>找寻下一个不重复的元素的<code>index</code>，用指针<code>k</code>代表下一个不重复元素（假如有）正确的位置，所以在找到正确的<code>next_index</code>后，将其赋值给<code>k</code>就行了，同时将<code>index</code>变为<code>next_index</code>，最后返回<code>k-1</code>因为多算了一次<code>k</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeDuplicates</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        length = <span class="built_in">len</span>(nums)</span><br><span class="line">        k = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> index &lt; length:</span><br><span class="line">            next_index = index+<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> next_index&lt;length:</span><br><span class="line">                <span class="keyword">if</span> nums[next_index] != nums[index]:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                next_index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> next_index != length:</span><br><span class="line">                nums[k] = nums[next_index]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            index = next_index</span><br><span class="line">        <span class="keyword">return</span> k-<span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>28 ms</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>point</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 13</title>
    <link href="/2022/05/05/2022-05-05-Solution/"/>
    <url>/2022/05/05/2022-05-05-Solution/</url>
    
    <content type="html"><![CDATA[<h1 id="13-罗马数字转整数"><a href="#13-罗马数字转整数" class="headerlink" title="13. 罗马数字转整数"></a>13. 罗马数字转整数</h1><p>比较直接的解法，一个指针指当前位，另一个指针指下一位。如果当前位和下一位凑成了4、9等数，就在结果中加上，然后当前指针指向下下位。如果当前位和下一位没有凑成特殊情况，就在结果中加上当前位的数，并把当前位指针指向下一位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">romanToInt</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        s_len = <span class="built_in">len</span>(s)</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> index&lt;s_len:</span><br><span class="line">            <span class="keyword">if</span> s[index] == <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">                next_index = index+<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> next_index &lt; s_len:</span><br><span class="line">                    <span class="keyword">if</span> s[next_index] == <span class="string">&#x27;V&#x27;</span>:</span><br><span class="line">                        res += <span class="number">4</span></span><br><span class="line">                        index += <span class="number">2</span></span><br><span class="line">                    <span class="keyword">elif</span> s[next_index] == <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">                        res += <span class="number">9</span></span><br><span class="line">                        index += <span class="number">2</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        res += <span class="number">1</span></span><br><span class="line">                        index += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res += <span class="number">1</span></span><br><span class="line">                    index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> s[index] == <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">                next_index = index+<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> next_index &lt; s_len:</span><br><span class="line">                    <span class="keyword">if</span> s[next_index] == <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">                        res += <span class="number">40</span></span><br><span class="line">                        index += <span class="number">2</span></span><br><span class="line">                    <span class="keyword">elif</span> s[next_index] == <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                        res += <span class="number">90</span></span><br><span class="line">                        index += <span class="number">2</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        res += <span class="number">10</span></span><br><span class="line">                        index += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res += <span class="number">10</span></span><br><span class="line">                    index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> s[index] == <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                next_index = index+<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> next_index &lt; s_len:</span><br><span class="line">                    <span class="keyword">if</span> s[next_index] == <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">                        res += <span class="number">400</span></span><br><span class="line">                        index += <span class="number">2</span></span><br><span class="line">                    <span class="keyword">elif</span> s[next_index] == <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">                        res += <span class="number">900</span></span><br><span class="line">                        index += <span class="number">2</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        res += <span class="number">100</span></span><br><span class="line">                        index += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res += <span class="number">100</span></span><br><span class="line">                    index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> s[index] == <span class="string">&#x27;V&#x27;</span>:</span><br><span class="line">                res += <span class="number">5</span></span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> s[index] == <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">                res += <span class="number">50</span></span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> s[index] == <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">                res += <span class="number">500</span></span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> s[index] == <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">                res += <span class="number">1000</span></span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>point</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 14 20 21</title>
    <link href="/2022/05/04/2022-05-04-Solution/"/>
    <url>/2022/05/04/2022-05-04-Solution/</url>
    
    <content type="html"><![CDATA[<h1 id="14-最长公共前缀"><a href="#14-最长公共前缀" class="headerlink" title="14. 最长公共前缀"></a>14. 最长公共前缀</h1><p>首先最长公共前缀肯定小于等于最短字符串长度，所以先找出最短字符串长度，然后双循环比较字符串每个位置的值，都相等就记录，不相等直接返回当前记录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestCommonPrefix</span>(<span class="params">self, strs: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        res = <span class="string">&quot;&quot;</span></span><br><span class="line">        min_len = <span class="number">1</span>&lt;&lt;<span class="number">31</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> strs:</span><br><span class="line">            min_len = <span class="built_in">min</span>(min_len, <span class="built_in">len</span>(i))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_len):</span><br><span class="line">            tmp_target = strs[<span class="number">0</span>][i]</span><br><span class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">                <span class="keyword">if</span> s[i] != tmp_target:</span><br><span class="line">                    <span class="keyword">return</span> res</span><br><span class="line">            res += tmp_target</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a>20. 有效的括号</h1><p>有点类似栈的思想，遍历字符串，遇到前括号进栈，遇到后括号时判断因素2个，一是栈是否为空，后括号遇到空栈说明不匹配直接返回<code>False</code>，二是后括号是否对应出栈的前括号，不对应也返回<code>False</code>。遍历完后如果栈非空说明前括号没找到对应的后括号，也返回<code>False</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValid</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> i == <span class="string">&#x27;(&#x27;</span> <span class="keyword">or</span> i == <span class="string">&#x27;&#123;&#x27;</span> <span class="keyword">or</span> i == <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">                stack.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">if</span> i == <span class="string">&#x27;)&#x27;</span> <span class="keyword">and</span> stack.pop() != <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">elif</span> i == <span class="string">&#x27;&#125;&#x27;</span> <span class="keyword">and</span> stack.pop() != <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">elif</span> i == <span class="string">&#x27;]&#x27;</span> <span class="keyword">and</span> stack.pop() != <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> stack:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h1 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21. 合并两个有序链表"></a>21. 合并两个有序链表</h1><p>迭代，主要考察对链表的理解，要创建节点方便返回，然后在两个链表都有元素时，一次添加小的元素并移动对应链表的指针，直到两个链表的有一个的指针已经指向空了。最后看看如果另一个链表如果指向非空，直接把指针指过去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeTwoLists</span>(<span class="params">self, list1: <span class="type">Optional</span>[ListNode], list2: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        res = ListNode(<span class="number">0</span>)</span><br><span class="line">        tmp = res</span><br><span class="line">        <span class="keyword">while</span> list1 <span class="keyword">and</span> list2:</span><br><span class="line">            <span class="keyword">if</span> list1.val &lt;= list2.val:</span><br><span class="line">                tmp.<span class="built_in">next</span> = list1</span><br><span class="line">                tmp = tmp.<span class="built_in">next</span></span><br><span class="line">                list1 = list1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp.<span class="built_in">next</span> = list2</span><br><span class="line">                tmp = tmp.<span class="built_in">next</span></span><br><span class="line">                list2 = list2.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">if</span> list1:</span><br><span class="line">            tmp.<span class="built_in">next</span> = list1</span><br><span class="line">        <span class="keyword">elif</span> list2:</span><br><span class="line">            tmp.<span class="built_in">next</span> = list2</span><br><span class="line">        <span class="keyword">return</span> res.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>stack</tag>
      
      <tag>linked_list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 1 9</title>
    <link href="/2022/05/03/2022-05-03-Solution/"/>
    <url>/2022/05/03/2022-05-03-Solution/</url>
    
    <content type="html"><![CDATA[<h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h1><p>建立一个<code>dict</code>(map)，遍历一次数组，判断<code>目标值-当前值</code>是否在<code>dict</code>的<code>key</code>里，在就输出对应的<code>value</code>(index)与当前的<code>index</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        hashmap = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            temp_target = target - nums[i]</span><br><span class="line">            <span class="keyword">if</span> temp_target <span class="keyword">in</span> hashmap:</span><br><span class="line">                <span class="keyword">return</span> [hashmap[temp_target], i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hashmap[nums[i]] = i</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h1 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9. 回文数"></a>9. 回文数</h1><p>转字符串判断正序和逆序是否相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isPalindrome</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(x)[::-<span class="number">1</span>]==<span class="built_in">str</span>(x)</span><br></pre></td></tr></table></figure><p> 左右指针逐步向中间移动判断每一步是否相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isPalindrome</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        string = <span class="built_in">str</span>(x)</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(string)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left&lt;right:</span><br><span class="line">            <span class="keyword">if</span> string[left] != string[right]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
      <tag>point</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>主题预览</title>
    <link href="/2022/05/01/2015-01-01-%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/"/>
    <url>/2022/05/01/2015-01-01-%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h1 id="这里是-h1"><a href="#这里是-h1" class="headerlink" title="这里是 h1"></a>这里是 h1</h1><h2 id="这里是-h2"><a href="#这里是-h2" class="headerlink" title="这里是 h2"></a>这里是 h2</h2><h3 id="这里是-h3"><a href="#这里是-h3" class="headerlink" title="这里是 h3"></a>这里是 h3</h3><h4 id="这里是-h4"><a href="#这里是-h4" class="headerlink" title="这里是 h4"></a>这里是 h4</h4><h5 id="这里是-h5"><a href="#这里是-h5" class="headerlink" title="这里是 h5"></a>这里是 h5</h5><h6 id="这里是-h6"><a href="#这里是-h6" class="headerlink" title="这里是 h6"></a>这里是 h6</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这里是 h1</span><br><span class="line">## 这里是 h2</span><br><span class="line">### 这里是 h3</span><br><span class="line">#### 这里是 h4</span><br><span class="line">##### 这里是 h5</span><br><span class="line">###### 这里是 h6</span><br></pre></td></tr></table></figure><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落</p><p>段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落</p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a href="http://blog.tmaize.net/">TMaize Blog</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[TMaize Blog](http://blog.tmaize.net)</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>这里是引用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这里是引用</span><br></pre></td></tr></table></figure><h2 id="常见字体样式"><a href="#常见字体样式" class="headerlink" title="常见字体样式"></a>常见字体样式</h2><p><em>斜体</em></p><p><strong>粗体</strong></p><p><del>删除线</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_斜体_</span><br><span class="line">**粗体**</span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li><p>无序列表 1-1</p><p>缩进 2 空格</p><ul><li>缩进 2 空格</li><li>缩进 2 空格</li></ul></li><li><p>无序列表 1-2</p></li><li><p>无序列表 1-3</p></li></ul><ol><li><p>有序列表 1-1</p><p>缩进 3 空格</p><ol><li>缩进 3 空格</li><li>缩进 3 空格</li></ol></li><li><p>有序列表 1-2</p></li><li><p>有序列表 1-3</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- 无序列表 1-1</span><br><span class="line"></span><br><span class="line">  缩进 2 空格</span><br><span class="line"></span><br><span class="line">  - 缩进 2 空格</span><br><span class="line">  - 缩进 2 空格</span><br><span class="line"></span><br><span class="line">- 无序列表 1-2</span><br><span class="line">- 无序列表 1-3</span><br><span class="line"></span><br><span class="line">1. 有序列表 1-1</span><br><span class="line"></span><br><span class="line">   缩进 3 空格</span><br><span class="line"></span><br><span class="line">   1. 缩进 3 空格</span><br><span class="line">   2. 缩进 3 空格</span><br><span class="line"></span><br><span class="line">2. 有序列表 1-2</span><br><span class="line">3. 有序列表 1-3</span><br></pre></td></tr></table></figure><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>破事水<img src="emoji_01.png" alt="line"><br>滑稽<img src="emoji_02.png" alt="line"></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">line</span>](<span class="link">http://xx.com/xx.jpg</span>)</span><br></pre></td></tr></table></figure><p>块级别图片</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">测试图片</span>](<span class="link">001.jpg</span>)</span><br></pre></td></tr></table></figure><p><img src="001.jpg" alt="测试图片"></p><h2 id="代码行"><a href="#代码行" class="headerlink" title="代码行"></a>代码行</h2><p>这是一段文字<code>rm -rf /*</code>这是一段文字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一段文字`rm -rf /*`这是一段文字</span><br></pre></td></tr></table></figure><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">blog.<span class="property">encodeHtml</span> = <span class="keyword">function</span> (<span class="params">html</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  o.<span class="property">innerText</span> = html</span><br><span class="line">  <span class="keyword">var</span> temp = o.<span class="property">innerHTML</span></span><br><span class="line">  o = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">```javascript</span><br><span class="line">blog.encodeHtml = function(html) &#123;</span><br><span class="line">var o = document.createElement(&#x27;div&#x27;)</span><br><span class="line">o.innerText = html</span><br><span class="line">var temp = o.innerHTML</span><br><span class="line">o = null</span><br><span class="line">return temp</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><h2 id="表格测试"><a href="#表格测试" class="headerlink" title="表格测试"></a>表格测试</h2><table><thead><tr><th>Tables</th><th align="center">Are</th><th align="right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td align="center">right-aligned</td><td align="right">$1600</td></tr><tr><td>col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td>zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Tables        |      Are      |   Cool |</span><br><span class="line">| ------------- | :-----------: | -----: |</span><br><span class="line">| col 3 is      | right-aligned | \$1600 |</span><br><span class="line">| col 2 is      |   centered    |   \$12 |</span><br><span class="line">| zebra stripes |   are neat    |    \$1 |</span><br></pre></td></tr></table></figure><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>需要在配置中设置<code>extMath: true</code>开启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 行内</span><br><span class="line">\( \int_0^\infty \frac&#123;x^3&#125;&#123;e^x-1&#125;\,dx = \frac&#123;\pi^4&#125;&#123;15&#125; \)</span><br><span class="line">$ \int_0^\infty \frac&#123;x^3&#125;&#123;e^x-1&#125;\,dx = \frac&#123;\pi^4&#125;&#123;15&#125; $</span><br><span class="line"></span><br><span class="line"># 段落</span><br><span class="line">\[ \int_0^\infty \frac&#123;x^3&#125;&#123;e^x-1&#125;\,dx = \frac&#123;\pi^4&#125;&#123;15&#125; \]</span><br><span class="line">$$ \int_0^\infty \frac&#123;x^3&#125;&#123;e^x-1&#125;\,dx = \frac&#123;\pi^4&#125;&#123;15&#125; $$</span><br></pre></td></tr></table></figure><p>Lorem ipsum dolor sit <code>\( \int_0^\infty \frac&#123;x^3&#125;&#123;e^x-1&#125;\,dx = \frac&#123;\pi^4&#125;&#123;15&#125; \)</code> amet consectetur adipisicing elit.</p><p>Lorem ipsum dolor sit <code>$ \int_0^\infty \frac&#123;x^3&#125;&#123;e^x-1&#125;\,dx = \frac&#123;\pi^4&#125;&#123;15&#125; $</code> amet consectetur adipisicing elit.</p><p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad aut assumenda distinctio eveniet quos, saepe non quasi minus facere iste odit! Accusamus eos optio, a recusandae neque aliquam provident illum?</p><p><code>\[ \int_0^\infty \frac&#123;x^3&#125;&#123;e^x-1&#125;\,dx = \frac&#123;\pi^4&#125;&#123;15&#125; \]</code></p><p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad aut assumenda distinctio eveniet quos, saepe non quasi minus facere iste odit! Accusamus eos optio, a recusandae neque aliquam provident illum?</p><p><code>$$ \int_0^\infty \frac&#123;x^3&#125;&#123;e^x-1&#125;\,dx = \frac&#123;\pi^4&#125;&#123;15&#125; $$</code></p><p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad aut assumenda distinctio eveniet quos, saepe non quasi minus facere iste odit! Accusamus eos optio, a recusandae neque aliquam provident illum?</p><h2 id="插入-html"><a href="#插入-html" class="headerlink" title="插入 html"></a>插入 html</h2><div id="htmldemo"></div><style>#htmldemo{    height: 30px;    width: 30px;    background-color: #00aa9a;    animation-name: moveX;    animation-duration: 1s;    animation-timing-function: linear;    animation-iteration-count: infinite;    animation-direction: alternate;    animation-fill-mode : both;}@keyframes moveX {    0%{        transform: translateX(0px);    }    100%{        transform: translateX(100px);    }}</style><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;htmldemo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#htmldemo</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#00aa9a</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-name</span>: moveX;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-timing-function</span>: linear;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-iteration-count</span>: infinite;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-direction</span>: alternate;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-fill-mode</span>: both;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> moveX &#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="插入-iframe"><a href="#插入-iframe" class="headerlink" title="插入 iframe"></a>插入 iframe</h2><iframe src="//music.163.com/outchain/player?type=2&id=28445796&auto=0&height=66" frameborder="0" width="100%" height="86px" ></iframe><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 属性什么的不要错了，最好用双引号括住 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 网易云的iframe需要做些调整，调整如下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//music.163.com/outchain/player?type=2&amp;id=28445796&amp;auto=0&amp;height=66&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;86px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
