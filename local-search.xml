<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>再次学习python</title>
    <link href="/2022/06/02/%E5%86%8D%E6%AC%A1%E5%AD%A6%E4%B9%A0python/"/>
    <url>/2022/06/02/%E5%86%8D%E6%AC%A1%E5%AD%A6%E4%B9%A0python/</url>
    
    <content type="html"><![CDATA[<blockquote><p>以下内容全部基于<ahref="https://www.liaoxuefeng.com/wiki/1016959663602400">Python教程 -廖雪峰的官方网站</a>。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 242</title>
    <link href="/2022/06/01/leetcode20220601/"/>
    <url>/2022/06/01/leetcode20220601/</url>
    
    <content type="html"><![CDATA[<h1 id="有效的字母异位词">242. 有效的字母异位词</h1><p>排序，比较两个字符串排序后是否相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isAnagram</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, t: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">import</span> operator<br>        <span class="hljs-keyword">return</span> operator.eq(<span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">list</span>(s)), <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">list</span>(t)))<br></code></pre></td></tr></table></figure><p>哈希，用<code>dict</code>进行计数。比上一种快。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isAnagram</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, t: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        hashmap = &#123;&#125;<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashmap:<br>                hashmap[i] = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                hashmap[i] += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> t:<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashmap:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">else</span>:<br>                hashmap[i] -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> hashmap.values():<br>            <span class="hljs-keyword">if</span> v != <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 228 231</title>
    <link href="/2022/05/29/leetcode20220529/"/>
    <url>/2022/05/29/leetcode20220529/</url>
    
    <content type="html"><![CDATA[<h1 id="汇总区间">228. 汇总区间</h1><p>双指针 <code>start</code> 和 <code>end</code>，开始遍历数组，每次循环找到一组可以被添加的值，注意下里循环条件就好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">summaryRanges</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:<br>        res = []<br>        start = <span class="hljs-number">0</span><br>        length = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">while</span> start &lt; length:<br>            end = start<br>            <span class="hljs-keyword">while</span> end &lt; length-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (nums[end+<span class="hljs-number">1</span>]-nums[end])==<span class="hljs-number">1</span>:<br>                end += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> start == end:<br>                res.append(<span class="hljs-built_in">str</span>(nums[start]))<br>            <span class="hljs-keyword">else</span>:<br>                res.append(<span class="hljs-built_in">str</span>(nums[start])+<span class="hljs-string">&#x27;-&gt;&#x27;</span>+<span class="hljs-built_in">str</span>(nums[end]))<br>            start = end+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><h1 id="的幂">231. 2 的幂</h1><p>先来个 c 的幂的万能解法，就是在定义域（但是必须是正整数）内 c的幂的最大值设为 <span class="math inline">\(x\)</span> ，必有 <spanclass="math inline">\(x\%c=0\)</span>，其实就是判断是不是最大值的约数。比如说这道题 2 的定义域内的最大值是<code>2&lt;&lt;30</code> ，就可以写成如下代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPowerOfTwo</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">2</span>&lt;&lt;<span class="hljs-number">30</span>)%n == <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>当然正规军的做法是位运算。首先 2的幂的二进制表示有个规律就是所有位只有一个 1，所以可以通过查找次数是否二进制只有一个 1 来确定它是不是 2的幂。这里有个小技巧<ahref="https://movisli.github.io/posts/2022/05/19/Solution.html">LeetCode191</a> ，<code>n &amp; (n - 1)</code> 可以将最后一个 1去掉，既然只有一个 1 所以去掉之后就没有了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPowerOfTwo</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">return</span> n &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> n &amp; (n - <span class="hljs-number">1</span>) == <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>point</tag>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 217 219</title>
    <link href="/2022/05/27/leetcode20220527/"/>
    <url>/2022/05/27/leetcode20220527/</url>
    
    <content type="html"><![CDATA[<h1 id="存在重复元素">217. 存在重复元素</h1><p>简单<code>hash</code>，建立一个<code>set</code>，遍历数组，如果元素不在里面就添加，如果在里面就返回<code>True</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">containsDuplicate</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        hashset = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums:<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashset:<br>                hashset.add(i)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h1 id="存在重复元素-ii">219. 存在重复元素 II</h1><p>这次涉及到元素还有它的下标，也是简单<code>hash</code>，不过要建立的是<code>dict</code>，<code>dict</code>的<code>key</code>是元素值，<code>dict</code>的<code>value</code>是元素下标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">containsNearbyDuplicate</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        hashmap = &#123;&#125;<br>        <span class="hljs-keyword">for</span> n,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>            <span class="hljs-keyword">if</span> v <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashmap:<br>                hashmap[v] = n<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> n-hashmap[v] &lt;= k:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">else</span>:<br>                    hashmap[v] = n<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 206</title>
    <link href="/2022/05/26/leetcode20220526/"/>
    <url>/2022/05/26/leetcode20220526/</url>
    
    <content type="html"><![CDATA[<h1 id="反转链表">206. 反转链表</h1><p>常见的用栈反转。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseList</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:<br>        stack = []<br>        node = head<br>        <span class="hljs-keyword">while</span> node:<br>            stack.append(node.val)<br>            node = node.<span class="hljs-built_in">next</span><br>        res = ListNode()<br>        node = res<br>        <span class="hljs-keyword">while</span> stack:<br>            node.<span class="hljs-built_in">next</span> = ListNode(stack.pop())<br>            node = node.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 203 205</title>
    <link href="/2022/05/25/leetcode20220525/"/>
    <url>/2022/05/25/leetcode20220525/</url>
    
    <content type="html"><![CDATA[<h1 id="移除链表元素">203. 移除链表元素</h1><p>一道基础删链表节点的问题，需要注意的是头节点如果不做特殊处理就得在前面再加个新的头节点，方便头节点重复时删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeElements</span>(<span class="hljs-params">self, head: ListNode, val: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:<br>        res = ListNode()<br>        res.<span class="hljs-built_in">next</span> = head<br>        node = res<br>        <span class="hljs-keyword">while</span> node.<span class="hljs-built_in">next</span>:<br>            <span class="hljs-keyword">if</span> node.<span class="hljs-built_in">next</span>.val == val:<br>                node.<span class="hljs-built_in">next</span> = node.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                node = node.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><p>也可以先对头节点进行处理，先保证头节点不是要删除的节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeElements</span>(<span class="hljs-params">self, head: ListNode, val: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:<br>        <span class="hljs-keyword">while</span> head <span class="hljs-keyword">and</span> head.val == val:<br>            head = head.<span class="hljs-built_in">next</span><br>        node = head<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">while</span> node.<span class="hljs-built_in">next</span>:<br>            <span class="hljs-keyword">if</span> node.<span class="hljs-built_in">next</span>.val == val:<br>                node.<span class="hljs-built_in">next</span> = node.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                node = node.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> head<br></code></pre></td></tr></table></figure><h1 id="同构字符串">205. 同构字符串</h1><p>分别建立正向映射关系<code>dict_forward</code>和逆向映射关系<code>dict_backward</code>，值得一提的是最好想象成正向映射是从字符串正向去建立映射关系，而逆向映射是从字符串逆向建立映射关系。否则，过不了这样的测试用例：</p><blockquote><p>"bbbaaaba"</p><p>"aaabbbba"</p></blockquote><p>这里有个技巧就是正向映射一旦建立就不可被覆盖，而逆向一直可以被覆盖。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isIsomorphic</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, t: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        dict_forward = &#123;&#125;<br>        dict_backward = &#123;&#125;<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>            <span class="hljs-keyword">if</span> s[i] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> dict_forward:<br>                dict_forward[s[i]] = t[i]<br>            dict_backward[t[i]] = s[i]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(dict_forward) != <span class="hljs-built_in">len</span>(dict_backward):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> dict_forward.items():<br>            <span class="hljs-keyword">if</span> dict_backward[v] != k:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>linked_list</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 202</title>
    <link href="/2022/05/24/leetcode20220524/"/>
    <url>/2022/05/24/leetcode20220524/</url>
    
    <content type="html"><![CDATA[<h1 id="快乐数">202. 快乐数</h1><p>首先简单找了下10以内的，满足快乐数定义的只有1和7。然后直接采取暴力解法，循环查找，如果当某次结果跳到10以内却不等于1或7时，就是<code>False</code>，否则就是<code>True</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isHappy</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> n == <span class="hljs-number">7</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        res = n<br>        <span class="hljs-keyword">while</span> res&gt;=<span class="hljs-number">10</span>:<br>            temp = <span class="hljs-built_in">str</span>(res)<br>            res = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> temp:<br>                res += <span class="hljs-built_in">int</span>(i)**<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> res == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> res == <span class="hljs-number">7</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>也可以从题目中所说的无限循环入手，那么什么时候知道这个无限循环已经开始了呢，这就用到了<code>hashset</code>，当这次运算结果出现在<code>set</code>里时，说明循环已经开始了，否则我们把这次结果加入<code>set</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isHappy</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        hashset = &#123;n&#125;<br>        <span class="hljs-keyword">while</span> n!=<span class="hljs-number">1</span>:<br>            temp = <span class="hljs-built_in">str</span>(n)<br>            n = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> temp:<br>                n += <span class="hljs-built_in">int</span>(i)**<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> hashset:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">else</span>:<br>                hashset.add(n)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 191</title>
    <link href="/2022/05/19/leetcode20220519/"/>
    <url>/2022/05/19/leetcode20220519/</url>
    
    <content type="html"><![CDATA[<h1 id="位1的个数">191. 位1的个数</h1><p>首先来个循环检查每一位是否为1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hammingWeight</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        bin_str = <span class="hljs-built_in">bin</span>(n)[<span class="hljs-number">2</span>:]<br>        res = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> bin_str:<br>            <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;1&#x27;</span>:<br>                res += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>当然显然这道题考察的是位运算，所以我们可以用位运算检查循环，逐位右移，判断最低位是不是1，python的右移运算符<code>&gt;&gt;</code>就是高位补0，低位舍去。所以移动32次，就可以得到结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hammingWeight</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        res = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> n:<br>            res += <span class="hljs-number">1</span><br>            n &gt;&gt;= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>但是在位运算里，还有个神奇的做法，可以通过<code>n&amp;(n-1)</code>把二进制中最后一个1改写成0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hammingWeight</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        res = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> n:<br>            res += <span class="hljs-number">1</span><br>            n &amp;= n-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>参考<ahref="https://leetcode.cn/problems/number-of-1-bits/solution/fu-xue-ming-zhu-xiang-jie-wei-yun-suan-f-ci7i/">【负雪明烛】详解位运算，附本题躲坑指南- 位1的个数 - 力扣（LeetCode）</a></p>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 190</title>
    <link href="/2022/05/18/leetcode20220518/"/>
    <url>/2022/05/18/leetcode20220518/</url>
    
    <content type="html"><![CDATA[<h1 id="颠倒二进制位">190. 颠倒二进制位</h1><p>注意下题目中的32位无符号整数。暴力解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseBits</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(<span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">32</span>-<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(n))[<span class="hljs-number">2</span>:]))+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(n))[<span class="hljs-number">2</span>:])[::-<span class="hljs-number">1</span>], <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 168 171 175 181 182 183</title>
    <link href="/2022/05/16/leetcode20220516/"/>
    <url>/2022/05/16/leetcode20220516/</url>
    
    <content type="html"><![CDATA[<h1 id="excel表列名称">168. Excel表列名称</h1><p>此题有点类似进制转换，从A到Z有26个字母也就是26进制，需要注意的是，A对应1而不是0，Z对应26而不是25，所以在做进制转换的时候，要先减1再取余再加1。即下面<code>temp = (columnNumber-1)%26+1</code>这行代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">convertToTitle</span>(<span class="hljs-params">self, columnNumber: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        res = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> columnNumber != <span class="hljs-number">0</span>:<br>            temp = (columnNumber-<span class="hljs-number">1</span>)%<span class="hljs-number">26</span>+<span class="hljs-number">1</span><br>            res += <span class="hljs-built_in">chr</span>(temp+<span class="hljs-number">64</span>)<br>            columnNumber = (columnNumber-temp)//<span class="hljs-number">26</span><br>        <span class="hljs-keyword">return</span> res[::-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h1 id="excel-表列序号">171. Excel 表列序号</h1><p>与上题差不多，上题的逆向。本质上还是个进制转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">titleToNumber</span>(<span class="hljs-params">self, columnTitle: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        res = <span class="hljs-number">0</span><br>        n = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> columnTitle[::-<span class="hljs-number">1</span>]:<br>            res += (<span class="hljs-built_in">ord</span>(i)-<span class="hljs-number">64</span>)*n<br>            n *= <span class="hljs-number">26</span><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><h1 id="组合两个表">175. 组合两个表</h1><p>依题意做一个简单左链接就行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>t1.firstName,<br>t1.lastName,<br>t2.city,<br>t2.state <br>FROM<br>Person t1<br>LEFT JOIN Address t2 ON t1.personId = t2.personId<br></code></pre></td></tr></table></figure><h1 id="超过经理收入的员工">181. 超过经理收入的员工</h1><p>表自链接就行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>l.NAME AS Employee <br>FROM<br>Employee l<br>INNER JOIN Employee r ON l.managerId = r.id <br>WHERE<br>l.salary &gt; r.salary<br></code></pre></td></tr></table></figure><h1 id="查找重复的电子邮箱">182. 查找重复的电子邮箱</h1><p>自链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT DISTINCT<br>t1.Email <br>FROM<br>Person t1<br>JOIN Person t2 ON t1.Email = t2.Email <br>AND t1.Id != t2.Id<br></code></pre></td></tr></table></figure><p>子表查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>Email <br>FROM<br>( SELECT Email, count( 1 ) AS ec FROM Person GROUP BY Email ) tec <br>WHERE<br>tec.ec &gt; 1<br></code></pre></td></tr></table></figure><h1 id="从不订购的客户">183. 从不订购的客户</h1><p>子表查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>n.NAME AS Customers <br>FROM<br>( SELECT t1.NAME, t2.Id FROM Customers t1 LEFT JOIN Orders t2 ON t1.Id = t2.CustomerId ) n <br>WHERE<br>n.id IS NULL<br></code></pre></td></tr></table></figure><p>子表查询和<code>NOT IN</code>语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>Customers.Name AS Customers <br>FROM<br>Customers <br>WHERE<br>Customers.Id NOT IN ( SELECT CustomerId FROM Orders )<br></code></pre></td></tr></table></figure><p>右链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>a.NAME AS Customers <br>FROM<br>Customers a<br>LEFT JOIN Orders b ON a.Id = b.CustomerId <br>WHERE<br>b.CustomerId IS NULL<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>sql</tag>
      
      <tag>ascii</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 121 125 136 169</title>
    <link href="/2022/05/15/leetcode20220515/"/>
    <url>/2022/05/15/leetcode20220515/</url>
    
    <content type="html"><![CDATA[<h1 id="买卖股票的最佳时机">121. 买卖股票的最佳时机</h1><p>遍历一次数组，更新数组的最小值<code>min_pcp</code>与当前值与数组最小值差的最大值<code>max_pft</code>。遍历完成后，当前值与数组最小值差的最大值就是交易的最大利润。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxProfit</span>(<span class="hljs-params">self, prices: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    max_pft = <span class="hljs-number">0</span><br>    min_pcp = prices[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> prices:<br>      <span class="hljs-keyword">if</span> i &lt; min_pcp:<br>        min_pcp = i<br>        <span class="hljs-keyword">continue</span><br>      <span class="hljs-keyword">if</span> (i-min_pcp)&gt;max_pft:<br>        max_pft = i-min_pcp<br>    <span class="hljs-keyword">return</span> max_pft<br></code></pre></td></tr></table></figure></p><h1 id="验证回文串">125. 验证回文串</h1><p>先进行数据清洗再比较。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    washed = <span class="hljs-string">&#x27;&#x27;</span>.join(ch.lower() <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> s <span class="hljs-keyword">if</span> ch.isalnum())<br>    <span class="hljs-keyword">return</span> washed == washed[::-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure></p><h1 id="只出现一次的数字">136. 只出现一次的数字</h1><p>蠢蠢hashset。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">singleNumber</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        hashset = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>        res = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums:<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashset:<br>                res.append(i)<br>                hashset.add(i)<br>            <span class="hljs-keyword">else</span>:<br>                res.remove(i)<br>        <span class="hljs-keyword">return</span> res[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure>题中讲到了只有一个元素出现了一次，其它元素都出现了两次。两个相同的数进行异或的结果为0，所以可以对所有元素都进行异或运算，最终得到的结果就是出现一次的元素。只能说有点想不到。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">singleNumber</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> reduce(<span class="hljs-keyword">lambda</span> x,y: x^y, nums)<br></code></pre></td></tr></table></figure></p><h1 id="多数元素">169. 多数元素</h1><p>简单粗暴，直接用字典记录每个元素出现次数，然后遍历字典，找到那个多数元素。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">majorityElement</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        hashmap = &#123;&#125;<br>        feq = <span class="hljs-built_in">len</span>(nums)/<span class="hljs-number">2</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums:<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashmap:<br>                hashmap[i] = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                hashmap[i] += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> hashmap.items():<br>            <span class="hljs-keyword">if</span> v &gt; feq:<br>                <span class="hljs-keyword">return</span> k<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
      <tag>string</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 83 88 94 118 119</title>
    <link href="/2022/05/13/leetcode20220513/"/>
    <url>/2022/05/13/leetcode20220513/</url>
    
    <content type="html"><![CDATA[<h1 id="删除排序链表中的重复元素">83. 删除排序链表中的重复元素</h1><p>基本链表操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deleteDuplicates</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head:<br>            <span class="hljs-keyword">return</span> head<br>        node = head<br>        <span class="hljs-keyword">while</span> node.<span class="hljs-built_in">next</span>:<br>            <span class="hljs-keyword">if</span> node.val == node.<span class="hljs-built_in">next</span>.val:<br>                node.<span class="hljs-built_in">next</span> = node.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                node = node.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> head<br></code></pre></td></tr></table></figure><h1 id="合并两个有序数组">88. 合并两个有序数组</h1><p>本题要求<code>inplace</code>，但是我们仍然可以用<code>不inplace</code>的思想做<code>inplace</code>的事情。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], m: <span class="hljs-built_in">int</span>, nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        left = <span class="hljs-number">0</span><br>        right = <span class="hljs-number">0</span><br>        res = []<br>        <span class="hljs-keyword">while</span> (left+right)&lt;(m+n):<br>            <span class="hljs-keyword">if</span> left&gt;=m:<br>                res.append(nums2[right])<br>                right += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> right&gt;=n:<br>                res.append(nums1[left])<br>                left += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> nums1[left] &lt;= nums2[right]:<br>                res.append(nums1[left])<br>                left += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                res.append(nums2[right])<br>                right += <span class="hljs-number">1</span><br>        nums1[:]=res<br></code></pre></td></tr></table></figure><p>当然我们也可以逆向开始放数，空间复杂度会更低。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], m: <span class="hljs-built_in">int</span>, nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        tail = m+n-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> m&gt;=<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> n&gt;=<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span> m&lt;<span class="hljs-number">1</span>:<br>                nums1[tail] = nums2[n-<span class="hljs-number">1</span>]<br>                tail -= <span class="hljs-number">1</span><br>                n -= <span class="hljs-number">1</span><br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> n&lt;<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> nums1[m-<span class="hljs-number">1</span>] &gt;= nums2[n-<span class="hljs-number">1</span>]:<br>                nums1[tail] = nums1[m-<span class="hljs-number">1</span>]<br>                m -= <span class="hljs-number">1</span><br>                tail -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                nums1[tail] = nums2[n-<span class="hljs-number">1</span>]<br>                n -= <span class="hljs-number">1</span><br>                tail -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="二叉树的中序遍历">94. 二叉树的中序遍历</h1><p>递归：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inorderTraversal</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        res = []<br>        <span class="hljs-keyword">if</span> root:<br>            res.extend(self.inorderTraversal(root.left))<br>            res.append(root.val)<br>            res.extend(self.inorderTraversal(root.right))<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>非递归：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inorderTraversal</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        res = []<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> res<br>        node = root<br>        stack = []<br>        <span class="hljs-keyword">while</span> node <span class="hljs-keyword">or</span> stack:<br>            <span class="hljs-keyword">if</span> node:<br>                stack.append(node)<br>                node = node.left<br>            <span class="hljs-keyword">else</span>:<br>                node = stack.pop()<br>                res.append(node.val)<br>                node = node.right<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><h1 id="杨辉三角">118. 杨辉三角</h1><p>就按照杨辉三角的样子，从第三行开始，除了左右两个1，其他数等于上一行的邻近两个数的和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">self, numRows: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">if</span> numRows == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> [[<span class="hljs-number">1</span>]]<br>        res = [[<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]]<br>        curRow = <span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> curRow&lt;numRows:<br>            temp = [<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(res[curRow-<span class="hljs-number">1</span>])-<span class="hljs-number">1</span>):<br>                temp.append(res[curRow-<span class="hljs-number">1</span>][i]+res[curRow-<span class="hljs-number">1</span>][i+<span class="hljs-number">1</span>])<br>            temp.append(<span class="hljs-number">1</span>)<br>            res.append(temp)<br>            curRow += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><h1 id="杨辉三角-ii">119. 杨辉三角 II</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getRow</span>(<span class="hljs-params">self, rowIndex: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        res = [<span class="hljs-number">1</span>]<br>        cal_num = (rowIndex)//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, cal_num+<span class="hljs-number">1</span>, <span class="hljs-number">1</span>):<br>            res.append(<span class="hljs-built_in">int</span>(res[i-<span class="hljs-number">1</span>]*(rowIndex-i+<span class="hljs-number">1</span>)/i))<br>        <span class="hljs-keyword">if</span> rowIndex%<span class="hljs-number">2</span> != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(cal_num,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>                res.append(res[i])<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(cal_num-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>                res.append(res[i])<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>linked_list</tag>
      
      <tag>array</tag>
      
      <tag>binary tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 70</title>
    <link href="/2022/05/11/leetcode20220511/"/>
    <url>/2022/05/11/leetcode20220511/</url>
    
    <content type="html"><![CDATA[<h1 id="爬楼梯">70. 爬楼梯</h1><p>斐波那契数列，一个数等于他上一个数和上上的数的和。分为递归解和非递归解，如果有空间限制可以把列表看作一个栈。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">climbStairs</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        lst = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n-<span class="hljs-number">1</span>):<br>            lst.append(lst[i]+lst[i+<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">return</span> lst[n]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>stack</tag>
      
      <tag>recurse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 66 67 69</title>
    <link href="/2022/05/10/leetcode20220510/"/>
    <url>/2022/05/10/leetcode20220510/</url>
    
    <content type="html"><![CDATA[<h1 id="加一">66. 加一</h1><p>从后往前加就行了，需要用一个<code>carry flag</code>控制是否进位，加一对末位来说就是进位的，所以当<code>carry flag</code>变为<code>False</code>时，跳出循环。如果循环走完还需进位，则需要在<code>list</code>第0个位置增添个元素1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">plusOne</span>(<span class="hljs-params">self, digits: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        carry = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(digits)-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> carry:<br>                digits[i] += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> digits[i] &gt;= <span class="hljs-number">10</span>:<br>                    digits[i] %= <span class="hljs-number">10</span><br>                <span class="hljs-keyword">else</span>:<br>                    carry = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> carry:<br>            digits.insert(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> digits<br></code></pre></td></tr></table></figure><h1 id="二进制求和">67.二进制求和</h1><p>直接用内置函数就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addBinary</span>(<span class="hljs-params">self, a: <span class="hljs-built_in">str</span>, b: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(a,<span class="hljs-number">2</span>)+<span class="hljs-built_in">int</span>(b,<span class="hljs-number">2</span>)))[<span class="hljs-number">2</span>:]<br></code></pre></td></tr></table></figure><h1 id="x-的平方根">69. x 的平方根</h1><p>牛顿迭代法：</p><p>为了方便区别问题写为求n的平方根，即 <span class="math display">\[x^2=n\\f(x)=x^2-n\]</span> 相当于求函数<spanclass="math inline">\(f(x)\)</span>的根，关于牛顿迭代的原理参照</p><blockquote><p><ahref="https://www.zhihu.com/question/20690553/answer/146104283">如何通俗易懂地讲解牛顿迭代法求开方（数值分析）？</a></p></blockquote><p>对<span class="math inline">\(x_0\)</span>点的切线为： <spanclass="math display">\[y = f(x_0)-2x_0(x-x0)\]</span> 令<span class="math inline">\(y=0\)</span>，迭代后的<spanclass="math inline">\(x_1\)</span>点值可算得： <spanclass="math display">\[x_1=x_0-\frac{x_0}{2}+\frac{n}{2x_0}\]</span> 每次迭代的误差为： <span class="math display">\[\varepsilon = |x0-x1|\]</span> 当误差小于0.1时跳出就行了。</p><p><strong>初值不能为0。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mySqrt</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        res = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            last = res<br>            res = res - res/<span class="hljs-number">2</span> + x/<span class="hljs-number">2</span>/res<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(last-res) &lt; <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(res)<br></code></pre></td></tr></table></figure><p>二分查找：</p><p><span class="math inline">\(x\)</span>的平方根整数部分是满足<spanclass="math inline">\(k^2\leq x\)</span>的最大<spanclass="math inline">\(k\)</span>值，所以只要保证这个条件可以进行赋值。经典二分查找代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mySqrt</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        left, right, res = <span class="hljs-number">0</span>, x, -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left &lt;= right:<br>            mid = (left+right)//<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> mid*mid &lt;= x:<br>                res = mid<br>                left = mid+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                right = mid-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>binary search</tag>
      
      <tag>loop</tag>
      
      <tag>Newton&#39;s method</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 58</title>
    <link href="/2022/05/09/leetcode20220509/"/>
    <url>/2022/05/09/leetcode20220509/</url>
    
    <content type="html"><![CDATA[<h1 id="最后一个单词的长度">58. 最后一个单词的长度</h1><p>反向遍历，用一个<code>flag</code>稍微控制下流程就行了，注意几个<code>if</code>的顺序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLastWord</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        res = <span class="hljs-number">0</span><br>        start = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> s[i] != <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> start:<br>                start = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-keyword">and</span> start:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> start:<br>                res += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 27 28 35 53</title>
    <link href="/2022/05/07/leetcode20220507/"/>
    <url>/2022/05/07/leetcode20220507/</url>
    
    <content type="html"><![CDATA[<h1 id="移除元素">27. 移除元素</h1><p>双指针，一个指针<code>index</code>控制循环遍历，另一个指针<code>k</code>控制将正确的数填到正确的位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeElement</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], val: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        index = <span class="hljs-number">0</span><br>        k = <span class="hljs-number">0</span><br>        length = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">while</span> index&lt;length:<br>            <span class="hljs-keyword">if</span> nums[index] != val:<br>                nums[k] = nums[index]<br>                k+=<span class="hljs-number">1</span><br>            index += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> k<br></code></pre></td></tr></table></figure><h1 id="实现strstr">28. 实现strStr()</h1><p>只是用的话，调用python字符串的find函数就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">strStr</span>(<span class="hljs-params">self, haystack: <span class="hljs-built_in">str</span>, needle: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> haystack.find(needle)<br></code></pre></td></tr></table></figure><p>思路就是逐位比较。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">strStr</span>(<span class="hljs-params">self, haystack: <span class="hljs-built_in">str</span>, needle: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        length = <span class="hljs-built_in">len</span>(needle)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(haystack)-length+<span class="hljs-number">1</span>):<br>            j = i<br>            k = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">while</span> k&lt;length <span class="hljs-keyword">and</span> haystack[j] == needle[k]:<br>                j += <span class="hljs-number">1</span><br>                k += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> j-i == length:<br>                <span class="hljs-keyword">return</span> i<br>        <br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="搜索插入位置">35. 搜索插入位置</h1><p>时间复杂度<code>O(log n)</code>，经典二分查找。但是这题如果没找到要返回插入的位置，当<span class="math inline">\(left&lt;x&lt;right\)</span>时，很明显该插入的位置是<code>right_index</code>，然后看一下经典二分查找代码，因为没找到的话<code>left</code>还是会加1，所以其实没找到的话<code>left</code>就是<code>right_index</code>，所以没找到返回<code>left</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">searchInsert</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        left = <span class="hljs-number">0</span><br>        right = <span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left&lt;=right:<br>            mid = (right+left)//<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[mid] &lt; target:<br>                left = mid+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> nums[mid] &gt; target:<br>                right = mid-<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> mid<br>        <br>        <span class="hljs-keyword">return</span> left<br></code></pre></td></tr></table></figure><h1 id="最大子数组和">53. 最大子数组和</h1><p>动态规划，首先数组里至少有一个数，那么最大子数组和肯定大于等于<code>nums[0]</code>，然后从左往右遍历，创建一个变量<code>temp_sum</code>用于记录遍历过程中某一段的最大和，如果此值大于0那么往后的数还可以在此值上加，如果小于等于0那对某一段的下一段来讲算最大和时就不太需要这个<code>temp_sum</code>了。每找出一段<code>temp_sum</code>都与<code>result</code>比较取大的作为新的<code>result</code>。遍历完成后，就可以得到最大的<code>result</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxSubArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        res = nums[<span class="hljs-number">0</span>]<br>        temp_sum = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums:<br>            temp_sum += i<br>            <span class="hljs-keyword">if</span> temp_sum &gt; res:<br>                res = temp_sum<br>            <span class="hljs-keyword">if</span> temp_sum &lt; <span class="hljs-number">0</span>:<br>                temp_sum = <span class="hljs-number">0</span><br>        <br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><blockquote><p>时间复杂度 O(n)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>point</tag>
      
      <tag>binary search</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 26</title>
    <link href="/2022/05/06/leetcode20220506/"/>
    <url>/2022/05/06/leetcode20220506/</url>
    
    <content type="html"><![CDATA[<h1 id="删除有序数组中的重复项">26. 删除有序数组中的重复项</h1><p>暴力解法，创建<code>set</code>用于记录出现过的唯一元素，创建<code>drop_lst</code>用于记录要删的位置，删元素的时候注意下<code>python</code>的<code>del</code>会更改后续元素的下标，所以建立一个<code>k</code>辅助找到真正的下标再删。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeDuplicates</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        hashset = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>        drop_lst = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">if</span> nums[i] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashset:<br>                hashset.add(nums[i])<br>            <span class="hljs-keyword">else</span>:<br>                drop_lst.append(i)<br>        k = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> drop_lst:<br>            <span class="hljs-keyword">del</span> nums[i-k]<br>            k += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(hashset)<br></code></pre></td></tr></table></figure><blockquote><p>1068 ms</p></blockquote><p>核心在于前探指针，每次循环时生成一个前探指针<code>next_index</code>找寻下一个不重复的元素的<code>index</code>，用指针<code>k</code>代表下一个不重复元素（假如有）正确的位置，所以在找到正确的<code>next_index</code>后，将其赋值给<code>k</code>就行了，同时将<code>index</code>变为<code>next_index</code>，最后返回<code>k-1</code>因为多算了一次<code>k</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeDuplicates</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        index = <span class="hljs-number">0</span><br>        length = <span class="hljs-built_in">len</span>(nums)<br>        k = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> index &lt; length:<br>            next_index = index+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> next_index&lt;length:<br>                <span class="hljs-keyword">if</span> nums[next_index] != nums[index]:<br>                    <span class="hljs-keyword">break</span><br>                next_index += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> next_index != length:<br>                nums[k] = nums[next_index]<br>            k += <span class="hljs-number">1</span><br>            index = next_index<br>        <span class="hljs-keyword">return</span> k-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><p>28 ms</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>point</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 13</title>
    <link href="/2022/05/05/leetcode20220505/"/>
    <url>/2022/05/05/leetcode20220505/</url>
    
    <content type="html"><![CDATA[<h1 id="罗马数字转整数">13. 罗马数字转整数</h1><p>比较直接的解法，一个指针指当前位，另一个指针指下一位。如果当前位和下一位凑成了4、9等数，就在结果中加上，然后当前指针指向下下位。如果当前位和下一位没有凑成特殊情况，就在结果中加上当前位的数，并把当前位指针指向下一位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">romanToInt</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        res = <span class="hljs-number">0</span><br>        s_len = <span class="hljs-built_in">len</span>(s)<br>        index = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> index&lt;s_len:<br>            <span class="hljs-keyword">if</span> s[index] == <span class="hljs-string">&#x27;I&#x27;</span>:<br>                next_index = index+<span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> next_index &lt; s_len:<br>                    <span class="hljs-keyword">if</span> s[next_index] == <span class="hljs-string">&#x27;V&#x27;</span>:<br>                        res += <span class="hljs-number">4</span><br>                        index += <span class="hljs-number">2</span><br>                    <span class="hljs-keyword">elif</span> s[next_index] == <span class="hljs-string">&#x27;X&#x27;</span>:<br>                        res += <span class="hljs-number">9</span><br>                        index += <span class="hljs-number">2</span><br>                    <span class="hljs-keyword">else</span>:<br>                        res += <span class="hljs-number">1</span><br>                        index += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    res += <span class="hljs-number">1</span><br>                    index += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> s[index] == <span class="hljs-string">&#x27;X&#x27;</span>:<br>                next_index = index+<span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> next_index &lt; s_len:<br>                    <span class="hljs-keyword">if</span> s[next_index] == <span class="hljs-string">&#x27;L&#x27;</span>:<br>                        res += <span class="hljs-number">40</span><br>                        index += <span class="hljs-number">2</span><br>                    <span class="hljs-keyword">elif</span> s[next_index] == <span class="hljs-string">&#x27;C&#x27;</span>:<br>                        res += <span class="hljs-number">90</span><br>                        index += <span class="hljs-number">2</span><br>                    <span class="hljs-keyword">else</span>:<br>                        res += <span class="hljs-number">10</span><br>                        index += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    res += <span class="hljs-number">10</span><br>                    index += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> s[index] == <span class="hljs-string">&#x27;C&#x27;</span>:<br>                next_index = index+<span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> next_index &lt; s_len:<br>                    <span class="hljs-keyword">if</span> s[next_index] == <span class="hljs-string">&#x27;D&#x27;</span>:<br>                        res += <span class="hljs-number">400</span><br>                        index += <span class="hljs-number">2</span><br>                    <span class="hljs-keyword">elif</span> s[next_index] == <span class="hljs-string">&#x27;M&#x27;</span>:<br>                        res += <span class="hljs-number">900</span><br>                        index += <span class="hljs-number">2</span><br>                    <span class="hljs-keyword">else</span>:<br>                        res += <span class="hljs-number">100</span><br>                        index += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    res += <span class="hljs-number">100</span><br>                    index += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> s[index] == <span class="hljs-string">&#x27;V&#x27;</span>:<br>                res += <span class="hljs-number">5</span><br>                index += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> s[index] == <span class="hljs-string">&#x27;L&#x27;</span>:<br>                res += <span class="hljs-number">50</span><br>                index += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> s[index] == <span class="hljs-string">&#x27;D&#x27;</span>:<br>                res += <span class="hljs-number">500</span><br>                index += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> s[index] == <span class="hljs-string">&#x27;M&#x27;</span>:<br>                res += <span class="hljs-number">1000</span><br>                index += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>point</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 14 20 21</title>
    <link href="/2022/05/04/leetcode20220504/"/>
    <url>/2022/05/04/leetcode20220504/</url>
    
    <content type="html"><![CDATA[<h1 id="最长公共前缀">14. 最长公共前缀</h1><p>首先最长公共前缀肯定小于等于最短字符串长度，所以先找出最短字符串长度，然后双循环比较字符串每个位置的值，都相等就记录，不相等直接返回当前记录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestCommonPrefix</span>(<span class="hljs-params">self, strs: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        res = <span class="hljs-string">&quot;&quot;</span><br>        min_len = <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> strs:<br>            min_len = <span class="hljs-built_in">min</span>(min_len, <span class="hljs-built_in">len</span>(i))<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(min_len):<br>            tmp_target = strs[<span class="hljs-number">0</span>][i]<br>            <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> strs:<br>                <span class="hljs-keyword">if</span> s[i] != tmp_target:<br>                    <span class="hljs-keyword">return</span> res<br>            res += tmp_target<br>        <br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><h1 id="有效的括号">20. 有效的括号</h1><p>有点类似栈的思想，遍历字符串，遇到前括号进栈，遇到后括号时判断因素2个，一是栈是否为空，后括号遇到空栈说明不匹配直接返回<code>False</code>，二是后括号是否对应出栈的前括号，不对应也返回<code>False</code>。遍历完后如果栈非空说明前括号没找到对应的后括号，也返回<code>False</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isValid</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        stack = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-keyword">or</span> i == <span class="hljs-string">&#x27;&#123;&#x27;</span> <span class="hljs-keyword">or</span> i == <span class="hljs-string">&#x27;[&#x27;</span>:<br>                stack.append(i)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> stack:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-keyword">and</span> stack.pop() != <span class="hljs-string">&#x27;(&#x27;</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">elif</span> i == <span class="hljs-string">&#x27;&#125;&#x27;</span> <span class="hljs-keyword">and</span> stack.pop() != <span class="hljs-string">&#x27;&#123;&#x27;</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">elif</span> i == <span class="hljs-string">&#x27;]&#x27;</span> <span class="hljs-keyword">and</span> stack.pop() != <span class="hljs-string">&#x27;[&#x27;</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">if</span> stack:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h1 id="合并两个有序链表">21. 合并两个有序链表</h1><p>迭代，主要考察对链表的理解，要创建节点方便返回，然后在两个链表都有元素时，一次添加小的元素并移动对应链表的指针，直到两个链表的有一个的指针已经指向空了。最后看看如果另一个链表如果指向非空，直接把指针指过去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mergeTwoLists</span>(<span class="hljs-params">self, list1: <span class="hljs-type">Optional</span>[ListNode], list2: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        res = ListNode(<span class="hljs-number">0</span>)<br>        tmp = res<br>        <span class="hljs-keyword">while</span> list1 <span class="hljs-keyword">and</span> list2:<br>            <span class="hljs-keyword">if</span> list1.val &lt;= list2.val:<br>                tmp.<span class="hljs-built_in">next</span> = list1<br>                tmp = tmp.<span class="hljs-built_in">next</span><br>                list1 = list1.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                tmp.<span class="hljs-built_in">next</span> = list2<br>                tmp = tmp.<span class="hljs-built_in">next</span><br>                list2 = list2.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">if</span> list1:<br>            tmp.<span class="hljs-built_in">next</span> = list1<br>        <span class="hljs-keyword">elif</span> list2:<br>            tmp.<span class="hljs-built_in">next</span> = list2<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>stack</tag>
      
      <tag>linked_list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 1 9</title>
    <link href="/2022/05/03/leetcode20220503/"/>
    <url>/2022/05/03/leetcode20220503/</url>
    
    <content type="html"><![CDATA[<h1 id="两数之和">1. 两数之和</h1><p>建立一个<code>dict</code>(map)，遍历一次数组，判断<code>目标值-当前值</code>是否在<code>dict</code>的<code>key</code>里，在就输出对应的<code>value</code>(index)与当前的<code>index</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        hashmap = &#123;&#125;<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            temp_target = target - nums[i]<br>            <span class="hljs-keyword">if</span> temp_target <span class="hljs-keyword">in</span> hashmap:<br>                <span class="hljs-keyword">return</span> [hashmap[temp_target], i]<br>            <span class="hljs-keyword">else</span>:<br>                hashmap[nums[i]] = i<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><h1 id="回文数">9. 回文数</h1><p>转字符串判断正序和逆序是否相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(x)[::-<span class="hljs-number">1</span>]==<span class="hljs-built_in">str</span>(x)<br></code></pre></td></tr></table></figure><p> 左右指针逐步向中间移动判断每一步是否相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        string = <span class="hljs-built_in">str</span>(x)<br>        left = <span class="hljs-number">0</span><br>        right = <span class="hljs-built_in">len</span>(string)-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left&lt;right:<br>            <span class="hljs-keyword">if</span> string[left] != string[right]:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">else</span>:<br>                left += <span class="hljs-number">1</span><br>                right -= <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>leetcode answer</category>
      
      <category>easy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
      <tag>point</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
