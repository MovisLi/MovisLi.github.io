<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>new</title>
    <link href="/2022/08/12/new-1/"/>
    <url>/2022/08/12/new-1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>new</title>
    <link href="/2022/08/12/new/"/>
    <url>/2022/08/12/new/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2022/08/11/test/"/>
    <url>/2022/08/11/test/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode</title>
    <link href="/2022/08/11/leetcode20220811/"/>
    <url>/2022/08/11/leetcode20220811/</url>
    
    <content type="html"><![CDATA[<h1 id="七进制数">504. 七进制数</h1><p>暴力法。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">convertToBase7</span>(<span class="hljs-params">self, num: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:        <span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">0</span>:            neg = <span class="hljs-literal">False</span>        <span class="hljs-keyword">elif</span> num &lt; <span class="hljs-number">0</span>:            neg = <span class="hljs-literal">True</span>            num = -num        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;0&#x27;</span>        n = <span class="hljs-number">0</span>        <span class="hljs-keyword">while</span> <span class="hljs-number">7</span>**n &lt;= num:            n += <span class="hljs-number">1</span>        n -= <span class="hljs-number">1</span>        res = <span class="hljs-string">&#x27;&#x27;</span>        <span class="hljs-keyword">while</span> n&gt;=<span class="hljs-number">0</span>:            i = num//(<span class="hljs-number">7</span>**n)            res += <span class="hljs-built_in">str</span>(i)            num -= (<span class="hljs-number">7</span>**n)*i            n -= <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;-<span class="hljs-subst">&#123;res&#125;</span>&#x27;</span> <span class="hljs-keyword">if</span> neg <span class="hljs-keyword">else</span> res</code></pre></div><p>然而，将返回结果的字符串换成整数之后，速度提升了很多。这里可以看出字符串连接比整数相加效率要低。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">convertToBase7</span>(<span class="hljs-params">self, num: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:        <span class="hljs-keyword">if</span> num &gt;= <span class="hljs-number">0</span>:            neg = <span class="hljs-literal">False</span>        <span class="hljs-keyword">else</span>:            neg = <span class="hljs-literal">True</span>            num = -num        n = <span class="hljs-number">0</span>        <span class="hljs-keyword">while</span> <span class="hljs-number">7</span>**n &lt;= num:            n += <span class="hljs-number">1</span>        n -= <span class="hljs-number">1</span>        res = <span class="hljs-number">0</span>        <span class="hljs-keyword">while</span> n&gt;=<span class="hljs-number">0</span>:            i = num//(<span class="hljs-number">7</span>**n)            res += (<span class="hljs-number">10</span>**n)*i            num -= (<span class="hljs-number">7</span>**n)*i            n -= <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;-&#x27;</span>+<span class="hljs-built_in">str</span>(res) <span class="hljs-keyword">if</span> neg <span class="hljs-keyword">else</span> <span class="hljs-built_in">str</span>(res)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 496 500</title>
    <link href="/2022/08/09/leetcode20220809/"/>
    <url>/2022/08/09/leetcode20220809/</url>
    
    <content type="html"><![CDATA[<h1 id="下一个更大元素-i">496. 下一个更大元素 I</h1><p>首先很容易想到暴力法：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">nextGreaterElement</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:        res = []        nums2_len = <span class="hljs-built_in">len</span>(nums2)        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums1:            j = nums2.index(i)+<span class="hljs-number">1</span>            flag = <span class="hljs-literal">False</span>            <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(j, nums2_len):                <span class="hljs-keyword">if</span> nums2[v] &gt; i:                    res.append(nums2[v])                    flag = <span class="hljs-literal">True</span>                    <span class="hljs-keyword">break</span>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag:                res.append(-<span class="hljs-number">1</span>)        <span class="hljs-keyword">return</span> res</code></pre></div><p>不过很慢。很明显，从慢的时间上来讲，肯定是算法不够好而不是没有优化。然后观察上面的算法可以发现，其实慢就慢在<code>j = nums2.index(i)+1</code>这里。每次都得重新去寻找元素的下标，这个时候就会想到空间换时间这种方法，就会想到<code>dict</code> ，也就是哈希：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">nextGreaterElement</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:        res = []        hashmap = &#123;&#125;        nums2_len = <span class="hljs-built_in">len</span>(nums2)        <span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums2):            hashmap[v] = i        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums1:            j = hashmap[i]+<span class="hljs-number">1</span>            flag = <span class="hljs-literal">False</span>            <span class="hljs-keyword">while</span> j&lt;nums2_len:                <span class="hljs-keyword">if</span> nums2[j] &gt; i:                    res.append(nums2[j])                    flag = <span class="hljs-literal">True</span>                    <span class="hljs-keyword">break</span>                j += <span class="hljs-number">1</span>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag:                res.append(-<span class="hljs-number">1</span>)        <span class="hljs-keyword">return</span> res</code></pre></div><h1 id="键盘行">500. 键盘行</h1><p>用 <code>dict</code> 记录字母所在行，然后暴力解法。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findWords</span>(<span class="hljs-params">self, words: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:        res = []        hashmap = &#123;            <span class="hljs-string">&#x27;q&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;w&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;e&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;r&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;t&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;y&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;u&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;i&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;o&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;p&#x27;</span>:<span class="hljs-number">1</span>,            <span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;s&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;d&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;f&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;g&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;h&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;j&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;k&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;l&#x27;</span>:<span class="hljs-number">2</span>,            <span class="hljs-string">&#x27;z&#x27;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;x&#x27;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;v&#x27;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;n&#x27;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;m&#x27;</span>:<span class="hljs-number">3</span>        &#125;        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(words)):            flag = <span class="hljs-number">0</span>            <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> words[i].lower():                <span class="hljs-keyword">if</span> flag == <span class="hljs-number">0</span>:                    flag = hashmap[v]                <span class="hljs-keyword">elif</span> flag != hashmap[v]:                    flag = -<span class="hljs-number">1</span>                    <span class="hljs-keyword">break</span>            <span class="hljs-keyword">if</span> flag != -<span class="hljs-number">1</span>:                res.append(words[i])        <span class="hljs-keyword">return</span> res</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 基础</title>
    <link href="/2022/08/04/MySQL%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/08/04/MySQL%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考资料：</p><p><a href="https://www.sololearn.com/learning/1060">Learn SQL |Sololearn</a></p><p>《SQL 必知必会》（第 5 版）</p></blockquote><h1 id="基础概念">基础概念</h1><h2 id="数据库介绍">数据库介绍</h2><p>数据库是一个以便于访问、高效管理与更新的方式组织起来的数据集合。</p><p>数据库由存储相关信息的表组成。</p><p>表以行和列的格式存储并展示信息，就像 Excel 表格一样。</p><p>数据库通常包含多个表，每个表都因特定的目的而设计。</p><p><strong>表可拥有任意数量的行，但只能拥有一定数量的列。</strong></p><blockquote><p>MySQL Server 最多只允许 4096 个字段</p><p>InnoDB 最多只能有 1017 个字段</p><p><ahref="https://dev.mysql.com/doc/refman/8.0/en/column-count-limit.html">MySQL:: MySQL 8.0 Reference Manual :: 8.4.7 Limits on Table Column Count andRow Size</a></p></blockquote><h2 id="主键---primary-keys">主键 - Primary Keys</h2><p>主键是表中唯一标识表记录的字段。它关键的两个特点：</p><ul><li>每行值唯一。</li><li>非空。</li></ul><p>每张表最多只能有一个主键（也可以没有）。</p><h2 id="sql---structured-query-language">SQL - Structured QueryLanguage</h2><p>SQL 中文叫结构化查询语言。</p><p>它用于访问和操作数据库。</p><blockquote><p>SQL 是 ANSI（美国国家标准协会）标准，但 SQL 语言有不同的版本。</p><p>除了 SQL 标准之外，大多数 SQL数据库程序都有自己的专有扩展，但它们都支持主要命令。</p><p>MySQL 是其中的一种。</p></blockquote><p>最主要的 4 大功能：<strong>增删查改</strong>。</p><h2 id="基础-sql-命令">基础 SQL 命令</h2><h3 id="show-databases">SHOW DATABASES</h3><div class="code-wrapper"><pre><code class="hljs mysql">SHOW DATABASES</code></pre></div><p>列出了服务器管理的数据库。</p><h3 id="show-tables">SHOW TABLES</h3><div class="code-wrapper"><pre><code class="hljs mysql">SHOW TABLES</code></pre></div><p>列出当前数据库里所有表。</p><h3 id="show-columns-from">SHOW COLUMNS FROM</h3><div class="code-wrapper"><pre><code class="hljs mysql">SHOW COLUMNS FROM 表名</code></pre></div><p>列出表里的所有字段的详细信息。</p><p>如结果可能是</p><table><thead><tr class="header"><th>Field</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Extra</th></tr></thead><tbody><tr class="odd"><td>id</td><td>int(11)</td><td>NO</td><td>PRI</td><td>NULL</td><td>auto_increment</td></tr><tr class="even"><td>name</td><td>varchar(30)</td><td>YES</td><td></td><td>NULL</td><td></td></tr></tbody></table><ul><li>Field - 列名，字段名。</li><li>Type - 列数据类型。</li><li>Null - 字段可否是空值。</li><li>Key - 指示列是否被索引。</li><li>Default - 分配给该列的默认值。</li><li>Extra - 可能包含有关给定列的任何其他可用信息。</li></ul><h1 id="查询">查询</h1><h3 id="select">SELECT</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECT 列名 FROM 表名;</code></pre></div><p>从一个表中查询指定的列。</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECT 列名1, 列名2 FROM 表名;</code></pre></div><p>从一个表里查询多列的数据，列名之间用 <code>,</code> 分隔。</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECT * FROM 表名;</code></pre></div><p>如果要查询所有列的数据，可以用 <code>*</code> 。</p><ul><li>对于多条 SQL ，每条后需要添加 <code>;</code> 。</li><li>SQL 语言不区分大小写。</li><li>SQL 中忽略空格和多行。<ul><li>结合适当的间距和缩进，将命令分成逻辑行将使 SQL语句更易于阅读和维护。</li></ul></li></ul><div class="code-wrapper"><pre><code class="hljs mysql">SELECT 表名.列名 FROM 表名;</code></pre></div><p>同样也可以指定查询某张表的某一列，在表名和列名之间加上 <code>.</code>，当处理可能共享相同列名的多个表时，这种书写形式特别有用。</p><h3 id="distinct">DISTINCT</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECT DISTINCT列名FROM表名;</code></pre></div><p>DISTINCT 关键字可以达到去重的效果。</p><h3 id="limit">LIMIT</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名FROM表名LIMIT 数量;</code></pre></div><p>LIMIT 关键字可以指定返回结果的数量。</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名FROM表名OFFSET 数量LIMIT 数量;</code></pre></div><p>可以使用 OFFSET 关键字对所取结果中作筛选偏移，可以理解为 OFFSET几条就是前几条不要。</p><h3 id="order-by">ORDER BY</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名FROM表名ORDER BY列名;</code></pre></div><p>ORDER BY 关键字可以将结果排序后再返回。</p><p>如果是数值型列，默认返回从小到大；如果是字符型列，默认返回字母顺序升序。</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECT*FROM表名ORDER BY列名1, 列名2;</code></pre></div><p>ORDER BY 后可以跟两列，像这句一样。这样首先满足 <code>列名1</code>的顺序，再满足 <code>列名2</code> 的顺序。</p><ul><li><p>ASC - 升序。</p></li><li><p>DESC - 降序。</p></li></ul><h1 id="筛选">筛选</h1><h3 id="where">WHERE</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECT表名FROM列名WHERE条件;</code></pre></div><p>WHERE 语句可用于按条件筛选返回结果。</p><p>使用文本列时，用单引号 <code>'</code>将语句中出现的任何文本括起来。</p><p>并且如果字符串内部有单引号，可以使用单引号来转义。例如：</p><p>我有一个查询条件 <code>值 = I'm</code> ，写成：</p><div class="code-wrapper"><pre><code class="hljs mysql">WHERE列名 = &#x27;I&#x27;&#x27;m&#x27;</code></pre></div><p>使用比较运算符和逻辑运算符来过滤要选择的数据。</p><table><thead><tr class="header"><th>比较运算符</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>=</td><td>等于</td></tr><tr class="even"><td>!=</td><td>不等于</td></tr><tr class="odd"><td>&gt;</td><td>大于</td></tr><tr class="even"><td>&lt;</td><td>小于</td></tr><tr class="odd"><td>&gt;=</td><td>大于等于</td></tr><tr class="even"><td>&lt;=</td><td>小于等于</td></tr><tr class="odd"><td>BETWEEN</td><td>和 AND 一起筛选一个范围</td></tr></tbody></table><h3 id="between">BETWEEN</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名FROM表名WHERE列名 BETWEEN 值1 AND 值2;</code></pre></div><p>BETWEEN运算符选择范围内的值。第一个值必须是下限，第二个值必须是上限。<strong>这两个值都会被包括进去。</strong></p><h3 id="逻辑运算符">逻辑运算符</h3><table><thead><tr class="header"><th>逻辑运算符</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>AND</td><td>返回左右两个条件的交集</td></tr><tr class="even"><td>OR</td><td>返回左右两个条件的并集</td></tr><tr class="odd"><td>IN</td><td>返回值在后面跟的括号里的结果</td></tr><tr class="even"><td>NOT</td><td>对条件取反</td></tr></tbody></table><p>在上述逻辑运算符中，<code>AND</code> 优先级是要比 <code>OR</code>高的。</p><p>所以 如果要同时用 <code>AND</code> 和 <code>OR</code> ，最好用括号<code>()</code> 把 <code>OR</code> 的括起来以免出错。</p><h3 id="in">IN</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名FROM表名WHERE列名 IN (值1， 值2);</code></pre></div><p>比较一个列与多个值时，使用 IN 运算符。其效果等同于：</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名FROM表名WHERE列名=值1 OR 列名=值2;</code></pre></div><h3 id="as">AS</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名 AS 新列名FROM表名;</code></pre></div><p>用 AS 关键字能够将列名的结果以新列名的标题返回。</p><h3 id="算术运算符">算术运算符</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名+值 AS 列名FROM表名;</code></pre></div><p>可以使用算术运算符将每列的值都做运算。</p><p>包括四则运算 <code>+-*/</code>和括号，括号可用于强制操作优先于任何其他运算符，还用于提高代码的可读性。</p><table><thead><tr class="header"><th>操作符</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>+</td><td>加</td></tr><tr class="even"><td>-</td><td>减</td></tr><tr class="odd"><td>*</td><td>乘</td></tr><tr class="even"><td>/</td><td>除</td></tr></tbody></table><h3 id="like">LIKE</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名FROM表名WHERE列名 LIKE 搜索条件;</code></pre></div><p>使用 <code>_</code> 匹配任何单个字符，使用 <code>%</code>匹配任意数量的字符（包括零个字符）。</p><ul><li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</li><li>在确实需要使用通配符时，也尽量不要把它们用在搜索模式的开始处。把通配符置于开始处，搜索起来是最慢的。</li><li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。</li></ul><h1 id="函数">函数</h1><blockquote><p>SELECT 语句为测试、检验函数和计算提供了很好的方法。</p><p>虽然 SELECT 通常用于从表中检索数据，但是省略了 FROM子句后就是简单地访问和 处理表达式，例如 ：</p><p>SELECT 3 * 2;将返回 6，</p><p>SELECT Trim(' abc '); 将返回 abc，</p><p>SELECT Curdate();使用 Curdate()函数返回当前日期和时间。</p><p>可以根据需要使用 SELECT 语句进行检验。</p></blockquote><h2 id="文本处理函数">文本处理函数</h2><h3 id="concat">CONCAT</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECTCONCAT(列名1, &#x27;,&#x27;, 列名2)FROM表名;</code></pre></div><p>CONCAT 函数用于连接两个或多个文本值并返回连接的字符串。</p><h3 id="rtrim">RTRIM</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECTRTRIM(列名)FROM表名;</code></pre></div><p>RTRIM 函数用于去除所取列的值右边所有的空格。</p><h3 id="ltrim">LTRIM</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECTLTRIM(列名)FROM表名;</code></pre></div><p>RTRIM 函数用于去除所取列的值<strong>左边</strong>所有的空格。</p><h3 id="trim">TRIM</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECTTRIM(列名)FROM表名;</code></pre></div><p>RTRIM 函数用于去除所取列的值<strong>左右两边</strong>所有的空格。</p><h3 id="upper"><strong>UPPER</strong></h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECTUPPER(列名)FROM表名;</code></pre></div><p>UPPER 函数将指定字符串中的所有字母转换为大写。</p><h3 id="lower">LOWER</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECTLOWER(列名)FROM表名;</code></pre></div><p>LOWER 函数将字符串转换为小写。</p><blockquote><p>如果字符串中有不是字母的字符，这个函数对它们不起作用。</p></blockquote><h3 id="left">LEFT</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECTLEFT(列名, 数字)FROM表名</code></pre></div><p>LEFT 函数将取到该列中值的前 n 个字符。</p><h3 id="right">RIGHT</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECTRIGHT(列名, 数字)FROM表名</code></pre></div><p>RIGHT 函数将取到该列中值的后 n 个字符。</p><h3 id="substring">SUBSTRING</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECTSUBSTRING(列名 FROM 数字1 FOR 数字2)FROM表名</code></pre></div><p>从 <code>数字1</code> 开始（字符串下标从 1 开始而不是 0），取<code>数字2</code> 个数字。</p><h3 id="soundex">SOUNDEX</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名FROM表名WHERESOUNDEX(列名) = SOUNDEX(字符串)</code></pre></div><p>返回与字符串发音相同的列名里的值。</p><h2 id="数值处理函数">数值处理函数</h2><h3 id="sqrt">SQRT</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECTSQRT(列名)FROM表名;</code></pre></div><p>SQRT 函数返回该列中给定值的平方根。</p><h3 id="abs">ABS</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECTABS(列名)FROM表名;</code></pre></div><p>ABS 函数返回该列中给定值的绝对值。</p><h3 id="sincostanpiexp">SIN、COS、TAN、PI、EXP</h3><table><thead><tr class="header"><th>函数</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>SIN</td><td>返回一个角度的正弦</td></tr><tr class="even"><td>COS</td><td>返回一个角度的余弦</td></tr><tr class="odd"><td>TAN</td><td>返回一个角度的正切</td></tr><tr class="even"><td>PI</td><td>返回圆周率 <span class="math inline">\(\pi\)</span> 的值</td></tr><tr class="odd"><td>EXP</td><td>返回一个数的指数值 <span class="math inline">\(e^{x}\)</span></td></tr></tbody></table><h2 id="聚集函数">聚集函数</h2><p><strong>这种函数只会返回一个值，此所谓聚集的意思。</strong></p><h3 id="avg">AVG</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECTAVG(列名)FROM表名;</code></pre></div><p>AVG 函数返回该列的平均值。</p><blockquote><p>AVG 函数忽略列值为 NULL 的行。</p></blockquote><h3 id="count">COUNT</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECTCOUNT(列名)FROM表名;</code></pre></div><p>COUNT 函数返回该列的行数。</p><blockquote><p>如果指定列名，则 COUNT 函数会忽略指定列的值为 NULL 的行，但 如果COUNT 函数中用的是星号 <code>*</code> ，则不忽略。DISTINCT 不能用于COUNT(*) 。</p></blockquote><h3 id="max">MAX</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECTMAX(列名)FROM表名;</code></pre></div><p>MAX 函数返回该列的最大值。</p><blockquote><p>MAX 函数忽略列值为 NULL 的行。</p></blockquote><h3 id="min">MIN</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECTMIN(列名)FROM表名;</code></pre></div><p>MIN 函数返回该列的最小值。</p><blockquote><p>MIN 函数忽略列值为 NULL 的行。</p></blockquote><h3 id="sum">SUM</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECTSUM(列名)FROM表名;</code></pre></div><p>SUM 函数返回该列的和。</p><blockquote><p>SUM 函数忽略列值为 NULL 的行。</p></blockquote><h1 id="分组数据">分组数据</h1><p>使用分组可以将数据分为多个逻辑组，对每个组进行聚集计算。</p><h2 id="group-by">GROUP BY</h2><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名, 聚集函数(*)FROM表名GROUP BY列名;</code></pre></div><p>GROUP BY 子句指示 DBMS分组数据，然后对每个组而不是整个结果集进行聚集。</p><h2 id="having">HAVING</h2><h1 id="子查询">子查询</h1><p>子查询是另一个查询中的查询。它的末尾没有分号。</p><blockquote><p>作为子查询的 SELECT 语句只能查询单个列。企图检索多个列将返回错误。</p></blockquote><div class="code-wrapper"><pre><code class="hljs mysql">SELECT(子查询)FROM表名;</code></pre></div><p>子查询作为查询结果。</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名FROM表名WHERE列名 in (子查询);</code></pre></div><p>子查询作为筛选条件。</p><h1 id="连接">连接</h1><p><strong>在引用的列可能出现歧义时，必须使用完全限定列名（用一个句点分隔表名和列名，<code>表名.列名</code>的形式）。如果引用一个没有用表名限制的具有歧义的列名，数据库会报错。</strong></p><blockquote><p>DBMS在运行时关联指定的每个表，以处理联结。这种处理可能非常耗费资源，因此应该注意，不要联结不必要的表。联结的表越多，性能下降越厉害。</p></blockquote><h2 id="等值连接">等值连接</h2><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名1, 列名2FROM表名1, 表名2WHERE表名1.列名1 = 表名2.列名2;</code></pre></div><p>这样会返回两个表的笛卡尔积，使用 WHERE 语句。</p><h2 id="内连接">内连接</h2><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名1, 列名2FROM表名1INNER JOIN 表名2 ON 表名1.列名1=表名2.列名2;</code></pre></div><p><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202208081810684.png" /></p><h2 id="自连接">自连接</h2><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名FROM表名 AS 别名1, 表名 AS 别名2WHERE别名1.列名 = 别名2.列名;</code></pre></div><p>或</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名FROM表名 AS 别名1INNER JOIN 表名 AS 别名2 ON 别名1.列名=别名2.列名;</code></pre></div><blockquote><p>自联结通常作为外部语句，用来替代从相同表中检索数据的使用子查询语句。</p><p>虽然最终的结果是相同的，但许多DBMS处理联结远比处理子查询快得多。</p><p>应该试一下两种方法，以确定哪一种的性能更好。</p></blockquote><h2 id="自然连接">自然连接</h2><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名FROM表名1NATURAL JOIN 表名2;</code></pre></div><p>自然连接是一种特殊的内连接，它不需要指定连接条件，重复的列会被去掉。</p><h2 id="外连接">外连接</h2><p>许多联结将一个表中的行与另一个表中的行相关联，但有时候需要包含没有关联行的那些行。</p><h3 id="左连接">左连接</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名1, 列名2FROM左表名LEFT OUTER JOIN 右表名 ON 左表名.列名1 = 右表名.列名2;</code></pre></div><p><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202208081845615.png" /></p><h3 id="右连接">右连接</h3><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名1, 列名2FROM左表名RIGHT OUTER JOIN 右表名 ON 左表名.列名1 = 右表名.列名2;</code></pre></div><p><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202208081847770.png" /></p><h1 id="组合查询">组合查询</h1><blockquote><p>多数 SQL查询只包含从一个或多个表中返回数据的单条 SELECT语句。但是，SQL也允许执行多个查询（多条 SELECT语句），并将结果作为一个查询结果集返回。这些组合查询通常称为并（ union）或复合查询（ compound query ）。</p></blockquote><div class="code-wrapper"><pre><code class="hljs mysql">查询1UNION查询2;</code></pre></div><p>UNION 返回的结果已经是去重了的，如果不需要去重，用 UNION ALL ，并且UNION ALL 也更快</p><div class="code-wrapper"><pre><code class="hljs mysql">查询1UNION ALL查询2;</code></pre></div><ul><li><p>在用 UNION 组合查询时，只能使用一条 <strong>ORDER BY</strong>子句，它必须位于最后一条 SELECT 语句之后。</p></li><li><p>如果列在所有查询中不完全匹配，可以使用NULL（或任何其他）值（<strong>说明组合查询要求列的数量完全匹配，最终列名会按第一个查询的列名来展示结果</strong>），例如：</p></li></ul><div class="code-wrapper"><pre><code class="hljs mysql">SELECT列名1, 列名2FROM表名1UNIONSELECT列名1, NULLFROM表名2;</code></pre></div><h1 id="插入数据">插入数据</h1><h2 id="插入完整的行">插入完整的行</h2><div class="code-wrapper"><pre><code class="hljs mysql">INSERT INTO表名VALUES(值1, 值2);</code></pre></div><p>这种写法能够实现插入功能，但是依赖列的顺序，很不安全，不推荐使用。</p><p>推荐使用下面的写法：</p><div class="code-wrapper"><pre><code class="hljs mysql">INSERT INTO表名(列名1, 列名2)VALUES(值1, 值2);</code></pre></div><h2 id="插入部分行">插入部分行</h2><p>其实就是使用写列名加值的写法。但是省略的列必须满足以下两个条件之一：</p><ul><li>该列定义允许 NULL 值。</li><li>该列在表定义种给出默认值。</li></ul><h2 id="插入检索出的数据">插入检索出的数据</h2><div class="code-wrapper"><pre><code class="hljs mysql">INSERT INTO表名1(列名)SELECT列名FROM表名2;</code></pre></div><p>一般用于表的迁移或合并。<strong>并不要求插入的列名和查询的列名一致，DBMS使用列的位置来插入。</strong></p><h2 id="复制表">复制表</h2><p>当然对于迁移到全新的表，也可以选择复制表。</p><div class="code-wrapper"><pre><code class="hljs mysql">CREATE TABLE新表名 ASSELECT*FROM旧表名;</code></pre></div><h1 id="修改数据">修改数据</h1><div class="code-wrapper"><pre><code class="hljs mysql">UPDATE表名SET列名1=值名1, 列名2=值名2WHERE条件;</code></pre></div><p><strong>如果不加 WHERE 条件的话，就会更新所有行。</strong></p><h1 id="删除数据">删除数据</h1><div class="code-wrapper"><pre><code class="hljs mysql">DELETE FROM表名WHERE条件;</code></pre></div><p>与更新数据一样，<strong>如果不加 WHERE条件的话，就会删除所有行。</strong></p><h1 id="创建表">创建表</h1><div class="code-wrapper"><pre><code class="hljs mysql">CREATE TABLE表名(列名1 数据类型 NOT NULL DEFAULT 默认值,列名2 数据类型 NULL,    列名3 INT NOT NULL AUTO_INCREMENT,    PRIMARY KET(列名));</code></pre></div><h2 id="数据类型">数据类型</h2><p>常用数据类型如下：</p><table><thead><tr class="header"><th>列种类</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>数值型</td><td>INT</td><td>有符号或无符号的正常大小的整数。</td></tr><tr class="even"><td></td><td>FLOAT(M, D)</td><td>有符号的浮点数。可以选择定义显示长度 (M) 和小数位数 (D)。</td></tr><tr class="odd"><td></td><td>DOUBLE(M, D)</td><td>有符号的双精度浮点数。可以选择定义显示长度 (M) 和小数位数 (D)。</td></tr><tr class="even"><td>日期与时间</td><td>DATE</td><td>YYYY-MM-DD 格式的日期。</td></tr><tr class="odd"><td></td><td>DATETIME</td><td>YYYY-MM-DD HH:MM:SS 格式的日期和时间组合。</td></tr><tr class="even"><td></td><td>TIMESTAMP</td><td>时间戳，从 1970 年 1 月 1 日午夜开始计算。</td></tr><tr class="odd"><td></td><td>TIME</td><td>以 HH:MM:SS 格式存储时间。</td></tr><tr class="even"><td>字符型</td><td>CHAR(M)</td><td>定长字符串。大小在括号中指定。最大 255 字节。</td></tr><tr class="odd"><td></td><td>VARCHAR(M)</td><td>变长字符串。最大尺寸在括号中指定。</td></tr><tr class="even"><td></td><td>BLOB</td><td>“二进制大对象”，用于存储大量二进制数据，例如图像或其他类型的文件。</td></tr><tr class="odd"><td></td><td>TEXT</td><td>大量的文本数据。</td></tr></tbody></table><h2 id="约束">约束</h2><p>常用约束如下：</p><table><thead><tr class="header"><th>约束</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>NOT NULL</td><td>指示列不能包含任何 NULL 值。</td></tr><tr class="even"><td>UNIQUE</td><td>不允许在列中插入重复值。 UNIQUE约束保持表中列的唯一性。一个表中可以使用多个 UNIQUE 列。</td></tr><tr class="odd"><td>PRIMARY KEY</td><td>强制表接受特定列的唯一数据，并且此约束创建唯一索引以更快地访问表。</td></tr><tr class="even"><td>CHECK</td><td>根据逻辑表达式确定值是否有效。</td></tr><tr class="odd"><td>DEFAULT</td><td>在向表中插入数据时，如果没有为列提供值，则该列将获取设置为 DEFAULT的值。</td></tr><tr class="even"><td><strong>AUTO_INCREMENT</strong></td><td>自增。</td></tr></tbody></table><h1 id="更新表">更新表</h1><h2 id="增加列">增加列</h2><div class="code-wrapper"><pre><code class="hljs mysql">ALTER TABLE表名ADD COLUMN列名 数据类型;</code></pre></div><h2 id="删除列">删除列</h2><div class="code-wrapper"><pre><code class="hljs mysql">ALTER TABLE表名DROP COLUMN列名;</code></pre></div><h2 id="重命名">重命名</h2><div class="code-wrapper"><pre><code class="hljs mysql">ALTER TABLE表名RENAME旧列名TO新列名;</code></pre></div><p>重命名列。</p><div class="code-wrapper"><pre><code class="hljs mysql">RENAME TABLE旧表名TO新表名;</code></pre></div><p>重命名表。</p><h1 id="删除表">删除表</h1><div class="code-wrapper"><pre><code class="hljs mysql">DROP TABLE表名;</code></pre></div><h1 id="视图">视图</h1><p>在 SQL 中，视图是一个基于 SQL语句结果集的虚拟表。每次访问视图都会重新查询，因此视图其实可能会导致性能下降得特别厉害。它的优点在于封装了底层查询，同时也可用作权限的管理。</p><h2 id="创建视图">创建视图</h2><div class="code-wrapper"><pre><code class="hljs mysql">CREATE VIEW视图名 AS查询;</code></pre></div><h2 id="更新视图">更新视图</h2><div class="code-wrapper"><pre><code class="hljs mysql">CREATE OR REPLACE VIEW视图名 AS查询;</code></pre></div><p>不太推荐，直接删掉重新创建就行了。</p><h2 id="删除视图">删除视图</h2><div class="code-wrapper"><pre><code class="hljs mysql">DROP VIEW视图名;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>DataScience</category>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>sololearn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 492 495</title>
    <link href="/2022/08/02/leetcode20220802-2/"/>
    <url>/2022/08/02/leetcode20220802-2/</url>
    
    <content type="html"><![CDATA[<h1 id="构造矩形">492. 构造矩形</h1><p>先获取面积的算术平方根的整数部分 <code>square_root</code> ，宽一定在[1, square_root]里，所以开始递减找长就行了，当面积能够整除宽的时候，就找到了长，直接返回。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">constructRectangle</span>(<span class="hljs-params">self, area: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:        s_root = <span class="hljs-built_in">round</span>(area**<span class="hljs-number">0.5</span>)        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(s_root, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):            <span class="hljs-keyword">if</span> area%i == <span class="hljs-number">0</span>:                <span class="hljs-keyword">return</span> (area//i, i)        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span></code></pre></div><h1 id="提莫攻击">495. 提莫攻击</h1><p>前探指针，遍历整个数组，做一下条件判断。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findPoisonedDuration</span>(<span class="hljs-params">self, timeSeries: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], duration: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:        length = <span class="hljs-built_in">len</span>(timeSeries)        res = <span class="hljs-number">0</span>        cur = <span class="hljs-number">0</span>        <span class="hljs-keyword">while</span> cur&lt;length:            pre = cur+<span class="hljs-number">1</span>            <span class="hljs-keyword">if</span> pre&lt;length:                temp = timeSeries[cur]+duration-timeSeries[pre]                <span class="hljs-keyword">if</span> temp &lt;= <span class="hljs-number">0</span>:                    res += duration                <span class="hljs-keyword">else</span>:                    res += duration-temp            <span class="hljs-keyword">else</span>:                res += duration            cur = pre        <span class="hljs-keyword">return</span> res</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>point</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 461 463 476 482 485</title>
    <link href="/2022/08/02/leetcode20220802/"/>
    <url>/2022/08/02/leetcode20220802/</url>
    
    <content type="html"><![CDATA[<h1 id="汉明距离">461. 汉明距离</h1><p>那这道题，很明显需要一个异或 <code>^</code>的运算，那异或完了之后所有二进制不同的位会变成 1， 之前的题里学到了<code>n&amp;(n-1)</code> 可以消除最后一个 1，那么我们做一个循环消除的操作，直到这个异或结果为 0就可以，用一个计数器来统计循环的次数。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hammingDistance</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span>, y: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:        res = x^y        count = <span class="hljs-number">0</span>        <span class="hljs-keyword">while</span> res:            res &amp;= res-<span class="hljs-number">1</span>            count += <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> count</code></pre></div><h1 id="岛屿的周长">463. 岛屿的周长</h1><p>把格子的点看作一个坐标，那么我们从左上建立坐标系。用一个元组<code>(x1, y1, x2, y2)</code> 来表示一条边。用一个 <code>set</code>来记录存放的边。然后遍历整个数组，当一个新的 <code>1</code>被找到时，看一下它四条边是否在 <code>set</code>里，在就删除，不在就添加。最后集合的长度就是周长。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">islandPerimeter</span>(<span class="hljs-params">self, grid: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:        hashset = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;&#x27;</span>)        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(grid)):            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(grid[i])):                <span class="hljs-keyword">if</span> grid[i][j] == <span class="hljs-number">1</span>:                    <span class="hljs-keyword">if</span> (i, j, i+<span class="hljs-number">1</span>, j) <span class="hljs-keyword">in</span> hashset:                        hashset.remove((i, j, i+<span class="hljs-number">1</span>, j))                    <span class="hljs-keyword">else</span>:                        hashset.add((i, j, i+<span class="hljs-number">1</span>, j))                    <span class="hljs-keyword">if</span> (i, j, i, j+<span class="hljs-number">1</span>) <span class="hljs-keyword">in</span> hashset:                        hashset.remove((i, j, i, j+<span class="hljs-number">1</span>))                    <span class="hljs-keyword">else</span>:                        hashset.add((i, j, i, j+<span class="hljs-number">1</span>))                    <span class="hljs-keyword">if</span> (i, j+<span class="hljs-number">1</span>, i+<span class="hljs-number">1</span>, j+<span class="hljs-number">1</span>) <span class="hljs-keyword">in</span> hashset:                        hashset.remove((i, j+<span class="hljs-number">1</span>, i+<span class="hljs-number">1</span>, j+<span class="hljs-number">1</span>))                    <span class="hljs-keyword">else</span>:                        hashset.add((i, j+<span class="hljs-number">1</span>, i+<span class="hljs-number">1</span>, j+<span class="hljs-number">1</span>))                    <span class="hljs-keyword">if</span> (i+<span class="hljs-number">1</span>, j, i+<span class="hljs-number">1</span>, j+<span class="hljs-number">1</span>) <span class="hljs-keyword">in</span> hashset:                        hashset.remove((i+<span class="hljs-number">1</span>, j, i+<span class="hljs-number">1</span>, j+<span class="hljs-number">1</span>))                    <span class="hljs-keyword">else</span>:                        hashset.add((i+<span class="hljs-number">1</span>, j, i+<span class="hljs-number">1</span>, j+<span class="hljs-number">1</span>))        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(hashset)</code></pre></div><h1 id="数字的补数">476. 数字的补数</h1><p>转成字符串取反了之后再转回来。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findComplement</span>(<span class="hljs-params">self, num: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:        str_num = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(num)).replace(<span class="hljs-string">&#x27;0b&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)        res = <span class="hljs-string">&#x27;&#x27;</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str_num:            <span class="hljs-keyword">if</span> i==<span class="hljs-string">&#x27;1&#x27;</span>:                res+=<span class="hljs-string">&#x27;0&#x27;</span>            <span class="hljs-keyword">else</span>:                res+=<span class="hljs-string">&#x27;1&#x27;</span>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(res,<span class="hljs-number">2</span>)</code></pre></div><h1 id="密钥格式化">482. 密钥格式化</h1><p>从后往前添加格式化结果，注意异常情况的处理就行。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">licenseKeyFormatting</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:        s = s.replace(<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>).upper()        count = <span class="hljs-built_in">len</span>(s)//k        other = <span class="hljs-built_in">len</span>(s)%k        res = <span class="hljs-string">&#x27;&#x27;</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, -count*k, -k):            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:                res = s[i-k:]            <span class="hljs-keyword">else</span>:                res = s[i-k:i]+<span class="hljs-string">&#x27;-&#x27;</span>+res        <span class="hljs-keyword">if</span> other == <span class="hljs-number">0</span>:            <span class="hljs-keyword">return</span> res        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">if</span> count != <span class="hljs-number">0</span>:                <span class="hljs-keyword">return</span> s[:other]+<span class="hljs-string">&#x27;-&#x27;</span>+res            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">return</span> s[:other]</code></pre></div><h1 id="最大连续-1-的个数">485. 最大连续 1 的个数</h1><p>前探指针探寻 <code>1</code> 的位置，计数器计数。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findMaxConsecutiveOnes</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:        count = <span class="hljs-number">0</span>        cur = <span class="hljs-number">0</span>        length = <span class="hljs-built_in">len</span>(nums)        <span class="hljs-keyword">while</span> cur&lt;length:            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nums[cur]:                cur += <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                pre = cur+<span class="hljs-number">1</span>                <span class="hljs-keyword">while</span> pre&lt;length <span class="hljs-keyword">and</span> nums[pre]:                    pre += <span class="hljs-number">1</span>                count = <span class="hljs-built_in">max</span>(count, pre-cur)                cur = pre+<span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> count</code></pre></div><p>或者设置一个 <code>flag</code>来判断是否开始计数了，并用一个结果计数器和中间计数器控制整个遍历：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findMaxConsecutiveOnes</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:        flag = <span class="hljs-literal">False</span>        res = <span class="hljs-number">0</span>        count = <span class="hljs-number">0</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums:            <span class="hljs-keyword">if</span> i==<span class="hljs-number">1</span>:                <span class="hljs-keyword">if</span> flag:                    count+=<span class="hljs-number">1</span>                <span class="hljs-keyword">else</span>:                    flag = <span class="hljs-literal">True</span>                    count += <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">if</span> flag:                    flag = <span class="hljs-literal">False</span>                    res = <span class="hljs-built_in">max</span>(res, count)                    count = <span class="hljs-number">0</span>        res = <span class="hljs-built_in">max</span>(res, count)        <span class="hljs-keyword">return</span> res</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
      <tag>point</tag>
      
      <tag>string</tag>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《敏捷实战指南》 - 读书笔记</title>
    <link href="/2022/07/25/%E3%80%8A%E6%95%8F%E6%8D%B7%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97%E3%80%8B/"/>
    <url>/2022/07/25/%E3%80%8A%E6%95%8F%E6%8D%B7%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="引论">1. 引论</h1><p>这里用了一个叫做预测法的东西作为对比。作者提到，本书适用于：</p><ul><li>对于预测法与敏捷方法难以取舍的项目团队。</li><li>试图解决快速创新和复杂性问题的项目团队。</li><li>致力于团队改进的项目团队。</li></ul><p>本书的目的是：</p><ul><li>帮助项目取得成功。</li><li>帮助项目团队顺利交付商业价值。</li><li>满足客户的期望和需求。</li></ul><p>看第一章所述内容似乎是解决新技术应用到现有的项目上，但寻求不降低项目开发效率的项目管理思路，称之为敏捷思维模式。</p><h1 id="敏捷概述">2. 敏捷概述</h1><h2 id="可确定的工作与高度不确定的工作">2.1可确定的工作与高度不确定的工作</h2><p>项目工作包括两种不同类型：</p><ul><li>可确定的工作 - 执行的不确定性和风险通常较低，归宿是自动化。</li><li>高度不确定的工作 - 探索性工作，项目变化速度快，复杂性和风险高。</li></ul><p>这里提到了<strong>预测法</strong>，其实就是传统开发过程，大概类似可行性分析、需求分析、总体设计、详细设计、编码、测试、部署上线的软件开发流程。这种流程应对变更的能力稍微有点弱（其实就是每一个阶段的质量都必须充分的保证，给人犯错的空间比较小），所以这个时候需要一种在短时间内探讨可行性，根据评估和反馈快速调整的开发过程（给试错的空间，这里跟高度不确定性相呼应），也就是敏捷方法。</p><h2 id="敏捷宣言及思维模式">2.2 《敏捷宣言》及思维模式</h2><ul><li>四大价值观<ul><li><p>重视个体以及互动而不是过程和工具。</p><blockquote><p>这个应该是为了发掘更多可改善的地方。</p></blockquote></li><li><p>可用的软件而不是完整的文档。</p><blockquote><p>这个大概是讲软件比较完善的时候再沉淀一下弄文档？不然对项目专家的依赖度也太高了。</p></blockquote></li><li><p>客户合作而不是合同谈判。</p><blockquote><p>这个应该是针对深入业务这一点所说的吧。但是感觉这两个并没有对立关系。</p></blockquote></li><li><p>应对变更而不是遵循计划。</p><blockquote><p>个人觉得这点恐怕对团队的能力要求有点高。</p></blockquote></li></ul></li></ul><blockquote><p>上面所说的是敏捷开发的一个价值观，总体来讲我觉得对整个团队里每个人能力的要求都要比传统的高一点，这个不太好做其实。</p></blockquote><ul><li>十二大原则<ul><li><p>最高目标，通过尽早持续交付有价值的软件来满足客户的需求。</p><blockquote><p>比起传统方法多了个快。</p></blockquote></li><li><p>欢迎对需求提出变更，善于利用变更，以帮助客户获得竞争优势。</p><blockquote><p>其实需求变更这个东西怎么说呢，软件开发者不太想要。至少能不停变更需求的软件与定好需求的软件不是一个价格，基于需求要变更这个前提，敏捷开发会比传统方法舒服。</p></blockquote></li><li><p>要经常交付可用的软件。</p><blockquote><p>这里应该是指局部交付，以避免所有东西都做出来结果发现不尽人意这种情况，通过这种方式尽快找出错误。</p></blockquote></li><li><p>项目实施过程中，业务人员与开发人员必须始终通力合作。</p><blockquote><p>这一点我个人是非常赞同的。很多时候，开发人员从技术上提升的代价比更深入理解业务大很多。</p></blockquote></li><li><p>善于激励项目人员，给予他们所需的环境和支持，并相信他们能够完成任务。</p><blockquote><p>我觉得看人。</p></blockquote></li><li><p>无论是对开发团队还是团队内部，信息传达最有效的方法都是面对面交谈。</p><blockquote><p>确实。</p></blockquote></li><li><p>可用的软件是衡量进度的首要衡量标准。</p><blockquote><p>类似于 Talk is cheap, show me your code.</p></blockquote></li><li><p>敏捷过程提倡可持续的开发。项目发起人、开发人员和用户应该都能够始终保证持续步调稳定性。</p><blockquote><p>对开发人员的状态是个考验。</p></blockquote></li><li><p>对技术的精益求精以及对设计的不断完善将提高敏捷性。</p><blockquote><p>其实这点是不是敏捷开发都一样的。</p></blockquote></li><li><p>简洁，即尽最大可能减少不必要的工作。</p><blockquote><p>这点对管理者是个考验。</p></blockquote></li><li><p>最佳的架构、需求和设计将出自组织团队。</p><blockquote><p>对组织团队有点依赖，不过要敏捷的话确实只有这样。</p></blockquote></li><li><p>团队定期反省怎样做才能更有效，并相应地调整团队地行为。</p><blockquote><p>这点讲究开发过程的变化。</p></blockquote></li></ul></li></ul><h2 id="精益与看板方法">2.3 精益与看板方法</h2><p>重点在于：</p><ul><li><p>交付价值</p><blockquote><p>我觉得是指客户满意度这方面来讲。</p></blockquote></li><li><p>尊重人</p><blockquote><p>对客户来讲确实尊重，对开发者来讲其实有点压榨的意思，当然也可以说是信任开发者，这个恐怕得看人。</p></blockquote></li><li><p>减少浪费</p><blockquote><p>这点对项目经理（专家）要求会高一点。</p></blockquote></li><li><p>透明化</p><blockquote><p>这个确实是优点，可以看到每个人在干嘛。</p></blockquote></li><li><p>适应变更</p><blockquote><p>这个有点像是附加价值。</p></blockquote></li><li><p>持续改善</p><blockquote><p>比起改善更强调持续。这种对项目发起人的要求会高一点，可能会出现一种情况，就是项目发起人指负责规划并不参与做项目，由开发技术员做，感觉提供价值方面不太好说。</p></blockquote></li></ul><h2 id="不确定性风险和生命周期选择">2.4不确定性、风险和生命周期选择</h2><p>这里不确定性指需求的不确定性与技术的不确定性两方面，风险指返工的风险。</p><p>这里提倡用较小的工作增量验证自身的工作，相当于是每做一个模块的东西，就去汇报验证看是否满足需求，即使返工也只是很小的返工这种方式。</p><ul><li>非常短的反馈循环。</li><li>频繁调整过程。</li><li>重新进行优先级排序。</li><li>定期更新计划。</li><li>频繁交付。</li></ul><p>但是这里也明确说了并不是什么都适合敏捷开发，如果一项任务没有中间成果，或者没有原型的时候，比较适合主用预测法去开发，用敏捷方法去管理新的迭代需求和增量交付成果。</p><p>当技术和需求的不确定性都很高的时候，为了使项目可靠，需要先遏制其中一个不确定性的变量。</p><blockquote><p>从这一节开始，我觉得他讲得有点道理。</p></blockquote><h1 id="生命周期选择">3. 生命周期选择</h1><p>这里详细说明了 4 种生命周期的定义：</p><ul><li>预测型生命周期 -提前进行大量的计划工作，然后一次性执行；执行时一个连续的过程。</li><li>迭代型生命周期 -这种方法允许对未完成的工作进行反馈，从而改进和修改该工作。</li><li>增量型生命周期 -这种方法向客户提供各个已完成的，可能立即使用的可交付成果。</li><li>敏捷型生命周期 -这种方法既有迭代，也有增量，便于完善工作，频繁交付。</li></ul><h2 id="项目生命周期的特征">3.1 项目生命周期的特征</h2><table><thead><tr class="header"><th>方法</th><th>需求</th><th>活动</th><th>交付</th><th>目标</th></tr></thead><tbody><tr class="odd"><td>预测型</td><td>固定</td><td>整个项目仅执行一次</td><td>一次交付</td><td>管理成本</td></tr><tr class="even"><td>迭代型</td><td>动态</td><td>反复执行直至修正</td><td>一次交付</td><td>解决方案的正确性</td></tr><tr class="odd"><td>增量型</td><td>动态</td><td>对给定增量执行一次</td><td>频繁更小规模交付</td><td>速度</td></tr><tr class="even"><td>敏捷型</td><td>动态</td><td>反复执行直至修正</td><td>频繁小规模交付</td><td>通过频繁小规模交付和反馈实现的客户价值</td></tr></tbody></table><p>选择哪一个生命周期取决于需求的变更程度与交付频率。</p><table><thead><tr class="header"><th></th><th>需求变更低</th><th>需求变更高</th></tr></thead><tbody><tr class="odd"><td><strong>交付频率高</strong></td><td>增量型</td><td>敏捷型</td></tr><tr class="even"><td><strong>交付频率低</strong></td><td>预测型</td><td>迭代型</td></tr></tbody></table><h3 id="预测型生命周期的特征">3.1.1 预测型生命周期的特征</h3><pre><code class=" mermaid">graph LRdemand(需求)--&gt;analysisanalysis(分析)--&gt;designdesign(设计)--&gt;codecode(构建)--&gt;testtest(测试)--&gt;deploy(交付)</code></pre><p>强调部门划分、有效、顺序的工作。有点谋定而后动的意思，好处自然就是计划非常清晰明了，文档也易构建。坏处就是可能在开发之前就得确定好明确的需求，除此之外还需要对技术有充分的了解，应对需求不确定性和技术不确定性的能力太弱。</p><h3 id="迭代型生命周期的特征">3.1.2 迭代型生命周期的特征</h3><pre><code class=" mermaid">graph LRanalysis(需求)--&gt;phase2(分析与设计)phase2--&gt;|概念验证| phase2phase2--&gt;phase3(构建与测试)phase3--&gt;|改善| phase3phase3--&gt;deploy(交付)</code></pre><p>有点类似与一个学习的开发过程。通过连续的原型或概念验证来改进产品或成果。在同一个时间盒内可能涉及到长达数周时间的迭代。生命周期可能会很长，因为它是为了学习而优化，而不是为交付速度而优化。</p><h3 id="增量型生命周期的特征">3.1.3 增量型生命周期的特征</h3><pre><code class=" mermaid">graph LRdemand(需求) --&gt; phase1phase1(分析-设计-构建-测试-交付) --&gt; phase2(分析-设计-构建-测试-交付)phase2 --&gt; phase3(分析-设计-构建-测试-交付)</code></pre><p>一点一点的交付，突出交付速度快，减少潜在返工。</p><h3 id="敏捷生命周期的特征">3.1.4 敏捷生命周期的特征</h3><pre><code class=" mermaid">graph LRphase1(需求-分析-设计-构建-测试) --&gt; phase2(需求-分析-设计-构建-测试)phase2 --&gt; deploy1(交付)deploy1(交付) --&gt; phase3(需求-分析-设计-构建-测试)phase3 --&gt; phase4(需求-分析-设计-构建-测试)phase4 --&gt; phase5(需求-分析-设计-构建-测试)phase5 --&gt; deploy2(交付)</code></pre><p>类似增量型和迭代型的结合体。</p><h3 id="敏捷适用性筛选器">3.1.5 敏捷适用性筛选器</h3><h3 id="混合生命周期的特征">3.1.6 混合生命周期的特征</h3><p>依据不同的目标在项目不同的模块选择不同的开发方法。</p><h3 id="结合了敏捷和预测的方法">3.1.7 结合了敏捷和预测的方法</h3><h3 id="以预测法为主敏捷方法为辅的方法">3.1.8以预测法为主、敏捷方法为辅的方法</h3><h3 id="以敏捷方法为主预测法为辅的方法">3.1.9以敏捷方法为主、预测法为辅的方法</h3><h3 id="符合目的的混合生命周期">3.1.10 符合目的的混合生命周期</h3><p>要根据目的去选择开发方法。</p><h3 id="混合型生命周期作为过渡策略">3.1.11混合型生命周期作为过渡策略</h3><p>在预测法的项目上去使用敏捷方法作为过渡而不是一开始就在大项目上使用敏捷方法。</p><h2 id="混合敏捷方法">3.2 混合敏捷方法</h2><p>敏捷方法有很多，根据需要进行组合。</p><h2 id="影响裁剪的项目因素">3.3 影响裁剪的项目因素</h2><table><thead><tr class="header"><th>项目因素</th><th>裁剪方案</th></tr></thead><tbody><tr class="odd"><td>对不稳定需求的适应</td><td>使用节奏（定期时间盒）帮助团队进行演示、回顾与理解新任务。</td></tr><tr class="even"><td>改进速度不够快</td><td>更频繁地回归并选择改进措施。</td></tr><tr class="odd"><td>工作流容易被打断</td><td>利用看板让工作可见，分配任务优先级。</td></tr><tr class="even"><td>产品增量质量不佳</td><td>以测试为重点。</td></tr><tr class="odd"><td>多团队协同</td><td>精心制定一种符合项目背景的方法。</td></tr><tr class="even"><td>团队成员缺乏敏捷经验</td><td>培养敏捷思维模式和敏捷原则的基本原理。使用特定敏捷方法前开研讨会。</td></tr></tbody></table><h1 id="实施敏捷创建敏捷环境">4. 实施敏捷：创建敏捷环境</h1><h2 id="从敏捷思维模式开始">4.1 从敏捷思维模式开始</h2><p>从几个问题开始：</p><ul><li>项目团队如何以敏捷方式行动？</li><li>为了使下一交付周期受益，团队需要快速交付哪些成果并获得早期反馈？</li><li>团队如何以一种透明的方式行动？</li><li>为了专注于高优先级的目标，可以避免哪些工作？</li><li>仆人式领导对团队达成目标有何益处？</li></ul><h2 id="仆人式领导为团队赋权">4.2 仆人式领导为团队赋权</h2><p>仆人式领导使通过对团队服务来领导团队的实践，它注重理解和关注团队成员的需要和发展，旨在使团队尽可能达到最高成绩。</p><h3 id="仆人式领导的职责">4.2.1 仆人式领导的职责</h3><ul><li>促进合作。</li><li>审视阻碍敏捷的过程，努力使其合理化。</li><li>鼓励团队成员，让人尽其才。</li><li>培养团队发展。</li></ul><h3 id="项目经理在敏捷环境中的角色">4.2.2项目经理在敏捷环境中的角色</h3><p>项目经理作为技术人员的服务者而不是管理者。</p><h3 id="项目经理应用仆人式领导">4.2.3 项目经理应用仆人式领导</h3><p>要把责任分配给有能力的人。</p><h2 id="团队构成">4.3 团队构成</h2><h3 id="敏捷团队">4.3.1 敏捷团队</h3><table><thead><tr class="header"><th>属性</th><th>目标</th></tr></thead><tbody><tr class="odd"><td>专门人团</td><td>专心，提高工作效率；少于十人的小型团队。</td></tr><tr class="even"><td>跨职能团队成员</td><td>频繁开发交付；作为独立团队交付；整合工作；向团队内部外部提供反馈。</td></tr><tr class="odd"><td>集中办公或有能力应对办公地点不同</td><td>改善沟通；挺高团队动力；知识共享；降低学习成本；合作。</td></tr><tr class="even"><td>通才和专家组成的混合团队</td><td>专家提供专门技能，通才提供从事不同工作的灵活性；团队具有专业能力，体现在都称为通才型专家。</td></tr><tr class="odd"><td>稳定的工作环境</td><td>彼此依赖；对工作方法相互认同；简化团队成本；知识资本的保证和发展。</td></tr></tbody></table><blockquote><p>这，感觉对技术人员的要求也太高了。感觉不太可行。</p></blockquote><h3 id="敏捷的角色">4.3.2 敏捷的角色</h3><ul><li><p>跨职能团队成员</p></li><li><p>产品负责人</p><blockquote><p>我感觉这个才是真正的大佬。</p></blockquote></li><li><p>团队促进者</p><blockquote><p>听起来有点玄乎。Scrum Master 居然是这个，我说实话不能接受。</p></blockquote></li></ul><h3 id="通才型专家">4.3.3 通才型专家</h3><p>知识广度够，也有专攻的 T 字型人才。</p><h3 id="团队结构">4.3.4 团队结构</h3><p>以产品为主，将人员组织到跨职能的团队中。</p><blockquote><p>做东西来讲这点挺好，问题就是这个知识和技术积累有点困难。</p></blockquote><h3 id="专职小组成员">4.3.5 专职小组成员</h3><p>这里阐述在这个团队里专职工作的小组成员比较重要。分散尽力去做多个项目会造成切换时的效率浪费。</p><h3 id="团队工作场所">4.3.6 团队工作场所</h3><p>独立的私人办公区域与定期开会合作交流。</p><h3 id="克服组织孤岛">4.3.7 克服组织孤岛</h3><p>平等的话语权，意见都能被听到并得到考虑。</p><blockquote><p>前提是有话语权的人有足够水平的见解和技术吧。</p></blockquote><h1 id="实施敏捷在敏捷环境中交付">5. 实施敏捷：在敏捷环境中交付</h1><h2 id="项目章程和团队章程">5.1 项目章程和团队章程</h2><p>章程：</p><ul><li>项目重要的原因</li><li>团队前景方向</li><li>项目目标</li></ul><p>敏捷项目章程：</p><ul><li>项目愿景 - 我们为什么要做这个项目？</li><li>项目远景或项目目标的一部分 - 谁会从中受益？如何受益？</li><li>项目的发布标准 - 达到哪些条件才意味着项目完成？</li><li>预期的工作流 - 我们将怎样合作？</li></ul><p>团队章程：</p><ul><li>团队价值观。</li><li>工作协议，“就绪”如何定义，这是团队可以接受工作的前提；“完成”如何定义，达成一致；考虑时间盒，使用工作过程限制。</li><li>基本规则，有关一个人在会议发言上的规定。</li><li>团队规范，团队如何对待会议时间。</li></ul><h2 id="常见敏捷实践">5.2 常见敏捷实践</h2><h3 id="回顾">5.2.1 回顾</h3><p>团队定期反省如何能够做到更加有效，并相应地调整团队的行为。</p><h3 id="待办事项列表编制">5.2.2 待办事项列表编制</h3><p>所有工作的有序列表，故事。</p><h3 id="待办事项列表的细化">5.2.3 待办事项列表的细化</h3><p>任务，可能是即时制定的，也可能是迭代会上制定的，也可以是多次会议讨论（比较陌生的项目）。</p><h3 id="每日站会">5.2.4 每日站会</h3><p>过一下看板和任务盒。回答以下问题：</p><ul><li><p>基于迭代的敏捷</p><ul><li><p>上次站会以来我都完成了什么？</p></li><li><p>从现在到下一次站会，我计划完成什么？</p></li><li><p>我的障碍是什么？</p></li></ul></li><li><p>基于流程的敏捷</p><ul><li>我们还需要做些什么来推进这一工作？</li><li>有人在做看板上没有的事情吗？</li><li>作为一个团队，我们需要完成什么？</li><li>工作流程是否存在瓶颈或障碍？</li></ul></li></ul><h3 id="展示评审">5.2.5 展示/评审</h3><p>故事完成后，展示时，产品负责人接受或拒绝故事。</p><h3 id="规划基于迭代的敏捷">5.2.6 规划基于迭代的敏捷</h3><p>反复计划与学习。</p><blockquote><p>这块我感觉是为了敏捷而敏捷。</p></blockquote><h3 id="帮助团队交付价值的执行实践">5.2.7帮助团队交付价值的执行实践</h3><ul><li>持续集成</li><li>在不同层面测试</li><li>验收测试驱动开发</li><li>测试驱动开发</li><li>刺探（时间盒研究或实验）</li></ul><h3 id="迭代和增量如何帮助交付工作产品">5.2.8迭代和增量如何帮助交付工作产品</h3><p>迭代帮助团队为交付和多种反馈创建一个节奏。</p><p>增量帮助团队频繁交付。</p><h2 id="解决敏捷项目的挑战">5.3 解决敏捷项目的挑战</h2><table><thead><tr class="header"><th>痛点</th><th>解决</th></tr></thead><tbody><tr class="odd"><td>目标或任务不明确</td><td>愿景、使命。</td></tr><tr class="even"><td>工作协议不明确</td><td>价值观、原则和工作协议。</td></tr><tr class="odd"><td>团队环境不明确</td><td>边界、承诺资产和前瞻性分析。</td></tr><tr class="even"><td>需求不明确</td><td>帮助发起人和相关方制定产品愿景。</td></tr><tr class="odd"><td>用户体验不佳</td><td>设计实践早期让用户参与。</td></tr><tr class="even"><td>估算不准确</td><td>分解故事。进一步细估。</td></tr><tr class="odd"><td>工作分配或进展不明确</td><td>自我管理工作。看板，每日站会。</td></tr><tr class="even"><td>团队面临障碍</td><td>仆人式领导消除，消除不了就上报。</td></tr><tr class="odd"><td>产品待办事项不完善导致工作延误、超时</td><td>产品负责人和团队一起研讨故事。“就绪”的定义。</td></tr><tr class="even"><td>缺陷</td><td>完成工作的定义。</td></tr><tr class="odd"><td>工作未完成</td><td>为完成工作定义。</td></tr><tr class="even"><td>技术债务</td><td>重构，测试。</td></tr><tr class="odd"><td>产品复杂性过高</td><td>提倡简单，思考简单。</td></tr><tr class="even"><td>合作进展缓慢</td><td>仆人式领导负责协调。</td></tr><tr class="odd"><td>前期工作过多导致返工</td><td>不要做过多的工作，通过刺探来学习。</td></tr><tr class="even"><td>错误的开始</td><td>产品负责人的重要性。</td></tr><tr class="odd"><td>待办事项无序</td><td>创建不同优先级。</td></tr><tr class="even"><td>不均匀的工作流程</td><td>计划对应团队的能力。</td></tr><tr class="odd"><td>相关方要求无法满足</td><td>仆人式领导与产品负责人一起工作。</td></tr><tr class="even"><td>意想不到或不可预见的延误</td><td>团队更频繁地检查工作流。</td></tr><tr class="odd"><td>孤立的团队，而不是跨职能团队</td><td>讲明是以产品为主的团队而不是以职能。</td></tr></tbody></table><h2 id="敏捷项目的衡量指标">5.4 敏捷项目的衡量指标</h2><p>定义完成和拒绝。</p><h3 id="敏捷团队的衡量结果">5.4.1 敏捷团队的衡量结果</h3><p>倾向使用基于经验和价值的衡量指标，而不是预测型衡量指标。</p><h1 id="关于项目敏捷性的组织考虑因素">6.关于项目敏捷性的组织考虑因素</h1><h2 id="组织变革管理">6.1 组织变革管理</h2><h3 id="变革管理驱动因素">6.1.1 变革管理驱动因素</h3><ul><li>与加速交付相关的变革。</li><li>与敏捷方法相关的变革。</li></ul><h3 id="变革就绪情况">6.1.2 变革就绪情况</h3><p>变革友好型特征：</p><ul><li>管理层的变革意愿。</li><li>组织在员工认知、审核和评估方式上做出改变的意愿。</li><li>集中或分散项目、项目于集和项目组合管理职能。</li><li>专注于短期预算和指标而不是长期目标。</li><li>人才管理成熟度和能力。</li></ul><h2 id="组织文化">6.2 组织文化</h2><h3 id="创建安全环境">6.2.1 创建安全环境</h3><p>安全、诚实、透明。</p><h3 id="评估文化">6.2.2 评估文化</h3><ul><li>探索 or 执行</li><li>速度 or 稳定性</li><li>数量 or 质量</li><li>灵活性 or 可预测性</li></ul><h2 id="采购和合同">6.3 采购和合同</h2><ul><li>多层结构。</li><li>强调价值交付。</li><li>总价增量。</li><li>固定时间和材料。</li><li>累进的时间和材料。</li><li>提前取消方案。</li><li>动态范围方案。</li><li>团队扩充。</li><li>支持全方位供应商。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Management</category>
      
    </categories>
    
    
    <tags>
      
      <tag>management</tag>
      
      <tag>develop</tag>
      
      <tag>scrum</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 455 459</title>
    <link href="/2022/07/25/leetcode20220725/"/>
    <url>/2022/07/25/leetcode20220725/</url>
    
    <content type="html"><![CDATA[<h1 id="分发饼干">455. 分发饼干</h1><p>首先可以排序之后贪心算法解决。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findContentChildren</span>(<span class="hljs-params">self, g: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], s: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:        g.sort()        s.sort()        left = <span class="hljs-number">0</span>        right = <span class="hljs-number">0</span>        res = <span class="hljs-number">0</span>        len_g = <span class="hljs-built_in">len</span>(g)        len_s = <span class="hljs-built_in">len</span>(s)        <span class="hljs-keyword">while</span> left&lt;len_g <span class="hljs-keyword">and</span> right&lt;len_s:            <span class="hljs-keyword">if</span> g[left] &lt;= s[right]:                left += <span class="hljs-number">1</span>                res += <span class="hljs-number">1</span>            right += <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> res</code></pre></div><h1 id="重复的子字符串">459. 重复的子字符串</h1><p>双指针。思路是如果字符串有子字符串长度为m 重复 n 次构成，那么它前 m个字符与后 m 个字符是一样的，并且 m 重复 n 次与它本身也是一样的。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">repeatedSubstringPattern</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        length = <span class="hljs-built_in">len</span>(s)        <span class="hljs-keyword">if</span> length == <span class="hljs-number">1</span>:            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        left = <span class="hljs-number">1</span>        right = length-<span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> left&lt;=right:            <span class="hljs-keyword">if</span> length%left == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> s[:left] == s[right:]:                <span class="hljs-keyword">if</span> s[:left]*(length//left) == s:                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>            left += <span class="hljs-number">1</span>            right -= <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>point</tag>
      
      <tag>greedy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 441 448 453</title>
    <link href="/2022/07/19/leetcode20220719/"/>
    <url>/2022/07/19/leetcode20220719/</url>
    
    <content type="html"><![CDATA[<h1 id="排列硬币">441. 排列硬币</h1><p>首先是基本的累加。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">arrangeCoins</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:        x = <span class="hljs-number">0</span>        total = <span class="hljs-number">0</span>        <span class="hljs-keyword">while</span> total&lt;n:            x+=<span class="hljs-number">1</span>            total +=x           <span class="hljs-keyword">return</span> x-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> total!=n <span class="hljs-keyword">else</span> x</code></pre></div><p>然后其实可以看出这道题是一道求解不等式的问题，问题为： <spanclass="math display">\[\frac{x(x-1)}{2}\le n\lt\frac{x(x+1)}{2}\]</span> 当 <code>n</code> 确定时，求解 <code>x</code>的值。而且是顺序的，所以很自然想到了二分法。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">arrangeCoins</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:        l = <span class="hljs-number">0</span>        r = n        <span class="hljs-keyword">while</span> l&lt;=r:            mid = (l+r)//<span class="hljs-number">2</span>            s = mid*(mid-<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>            b = mid*(mid+<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>            <span class="hljs-keyword">if</span> s&lt;=n&lt;b:                <span class="hljs-keyword">return</span> mid-<span class="hljs-number">1</span>            <span class="hljs-keyword">elif</span> n&gt;=b:                l=mid+<span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                r=mid-<span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> l-<span class="hljs-number">1</span></code></pre></div><h1 id="找到所有数组中消失的数字">448. 找到所有数组中消失的数字</h1><p>集合的差集运算。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findDisappearedNumbers</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:        set_all = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums)+<span class="hljs-number">1</span>))        set_nums = <span class="hljs-built_in">set</span>(nums)        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(set_all-set_nums)</code></pre></div><h1 id="最小操作次数使数组元素相等">453. 最小操作次数使数组元素相等</h1><p>说句实话感觉这题应该不算简单题。</p><p>这题最核心的是 <code>n-1</code> 个数都加一等价于<code>1</code>个数减1。所以最后结果应该是 <span class="math display">\[result=\sum^{len(nums)-1}_{i=0}(nums[i]-min(nums))\]</span> 把<code>min(nums)</code>提出来就是 <spanclass="math display">\[result = \sum nums-n\times min(nums)\]</span></p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minMoves</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(nums)-<span class="hljs-built_in">len</span>(nums)*<span class="hljs-built_in">min</span>(nums)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
      <tag>enumerate</tag>
      
      <tag>greedy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 409 412 414 415 434</title>
    <link href="/2022/07/15/leetcode20220715/"/>
    <url>/2022/07/15/leetcode20220715/</url>
    
    <content type="html"><![CDATA[<h1 id="最长回文串">409. 最长回文串</h1><p>贪心法。回文串要满足的条件就是出现奇数次的字符数量要小于等于1。所以，对于每个字符来讲，如果它出现为奇数次，就可以用<code>n-1</code>次；如果它出现为偶数次，就可以用<code>n</code>次。如果有出现奇数次的字符，最后结果再加1，没有就不管了。按照这种思路用一个<code>flag</code>记录是否有出现过奇数次的字符。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestPalindrome</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:        res = <span class="hljs-number">0</span>        hashmap = &#123;&#125;        flag = <span class="hljs-literal">False</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashmap:                hashmap[i] = <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                hashmap[i] += <span class="hljs-number">1</span>        <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> hashmap.values():            <span class="hljs-keyword">if</span> value%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>:                res += value            <span class="hljs-keyword">else</span>:                res += value -<span class="hljs-number">1</span>                flag = <span class="hljs-literal">True</span>        <span class="hljs-keyword">return</span> res+<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> flag <span class="hljs-keyword">else</span> res</code></pre></div><h1 id="fizz-buzz">412. Fizz Buzz</h1><p>感觉就是一个穷举。</p><p>看了一下讨论，好像这道题背后有故事，就是来筛选不会编程的人。</p><blockquote><p><ahref="https://blog.codinghorror.com/why-cant-programmers-program/">WhyCan't Programmers.. Program?</a></p></blockquote><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fizzBuzz</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:        res = []        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):            <span class="hljs-keyword">if</span> i%<span class="hljs-number">15</span> == <span class="hljs-number">0</span>:                res.append(<span class="hljs-string">&#x27;FizzBuzz&#x27;</span>)            <span class="hljs-keyword">elif</span> i%<span class="hljs-number">5</span> == <span class="hljs-number">0</span>:                res.append(<span class="hljs-string">&#x27;Buzz&#x27;</span>)            <span class="hljs-keyword">elif</span> i%<span class="hljs-number">3</span> == <span class="hljs-number">0</span>:                res.append(<span class="hljs-string">&#x27;Fizz&#x27;</span>)            <span class="hljs-keyword">else</span>:                res.append(<span class="hljs-built_in">str</span>(i))        <span class="hljs-keyword">return</span> res</code></pre></div><h1 id="第三大的数">414. 第三大的数</h1><p>先去重再排除两次最大值是可以的。而且也不慢。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">thirdMax</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:        lst = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(nums))        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(lst) &lt; <span class="hljs-number">3</span>:            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(lst)        lst.remove(<span class="hljs-built_in">max</span>(lst))        lst.remove(<span class="hljs-built_in">max</span>(lst))        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(lst)</code></pre></div><p>排序也试了下，稍微慢点。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">thirdMax</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:        lst = <span class="hljs-built_in">sorted</span>(nums, reverse = <span class="hljs-literal">True</span>)        count = <span class="hljs-number">1</span>        temp = lst[<span class="hljs-number">0</span>]        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lst:            <span class="hljs-keyword">if</span> i != temp:                count += <span class="hljs-number">1</span>                temp = i            <span class="hljs-keyword">if</span> count == <span class="hljs-number">3</span>:                <span class="hljs-keyword">return</span> i        <span class="hljs-keyword">return</span> lst[<span class="hljs-number">0</span>]</code></pre></div><h1 id="字符串相加">415. 字符串相加</h1><p>从一个数的后面加到前面。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addStrings</span>(<span class="hljs-params">self, num1: <span class="hljs-built_in">str</span>, num2: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:        carry = <span class="hljs-literal">False</span>        res = <span class="hljs-string">&#x27;&#x27;</span>        len_1 = <span class="hljs-built_in">len</span>(num1)        len_2 = <span class="hljs-built_in">len</span>(num2)        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">1</span>, -<span class="hljs-built_in">max</span>(len_1,len_2)-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):            <span class="hljs-keyword">if</span> i&lt;-len_1:                temp = <span class="hljs-built_in">int</span>(num2[i])            <span class="hljs-keyword">elif</span> i&lt;-len_2:                temp = <span class="hljs-built_in">int</span>(num1[i])            <span class="hljs-keyword">else</span>:                temp = <span class="hljs-built_in">int</span>(num1[i])+<span class="hljs-built_in">int</span>(num2[i])            <span class="hljs-keyword">if</span> carry:                temp += <span class="hljs-number">1</span>            <span class="hljs-keyword">if</span> temp &gt;= <span class="hljs-number">10</span>:                temp -= <span class="hljs-number">10</span>                carry = <span class="hljs-literal">True</span>            <span class="hljs-keyword">else</span>:                carry = <span class="hljs-literal">False</span>            res = <span class="hljs-built_in">str</span>(temp)+res        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;1&#x27;</span>+res <span class="hljs-keyword">if</span> carry <span class="hljs-keyword">else</span> res</code></pre></div><h1 id="字符串中的单词数">434. 字符串中的单词数</h1><p>循环搜索。在没有计数的情况下，遇到非空格开始计数。在计数的情况下，遇到空格停止计数。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">countSegments</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:        res = <span class="hljs-number">0</span>        counting = <span class="hljs-literal">False</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:            <span class="hljs-keyword">if</span> i != <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> counting:                counting = <span class="hljs-literal">True</span>                res += <span class="hljs-number">1</span>            <span class="hljs-keyword">elif</span> i == <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-keyword">and</span> counting:                counting = <span class="hljs-literal">False</span>        <span class="hljs-keyword">return</span> res</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
      <tag>enumerate</tag>
      
      <tag>greedy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 401</title>
    <link href="/2022/07/10/leetcode20220710/"/>
    <url>/2022/07/10/leetcode20220710/</url>
    
    <content type="html"><![CDATA[<h1 id="二进制手表">401. 二进制手表</h1><p>枚举法，枚举时和分，如果满足就添加进列表。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">readBinaryWatch</span>(<span class="hljs-params">self, turnedOn: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:        res = []        <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>):            <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">60</span>):               <span class="hljs-keyword">if</span> <span class="hljs-built_in">bin</span>(h).count(<span class="hljs-string">&#x27;1&#x27;</span>)+<span class="hljs-built_in">bin</span>(m).count(<span class="hljs-string">&#x27;1&#x27;</span>) == turnedOn:                   res.append(<span class="hljs-string">&#x27;%d:%.2d&#x27;</span> % (h,m))        <span class="hljs-keyword">return</span> res</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>enumerate</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 389</title>
    <link href="/2022/06/30/leetcode20220630/"/>
    <url>/2022/06/30/leetcode20220630/</url>
    
    <content type="html"><![CDATA[<h1 id="找不同">389. 找不同</h1><p>用 <code>dict</code> 对字符串 <code>s</code> 进行计数，然后遍历<code>t</code> 用 <code>dict</code> 进行检索。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findTheDifference</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, t: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:        hashmap = &#123;&#125;        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashmap:                hashmap[i] = <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                hashmap[i] += <span class="hljs-number">1</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> t:            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashmap:                <span class="hljs-keyword">return</span> i            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">if</span> hashmap[i] == <span class="hljs-number">0</span>:                    <span class="hljs-keyword">return</span> i                <span class="hljs-keyword">else</span>:                    hashmap[i] -= <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span></code></pre></div><p>当然 <code>t</code> 只是在 <code>s</code>打乱顺序的基础上随机添加了一个字母，所以那个随机添加的字母的 ascii码其实就是两个字符串 ascii 码和的差值。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findTheDifference</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, t: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:        ascii_s = <span class="hljs-built_in">sum</span>([<span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s])        ascii_t = <span class="hljs-built_in">sum</span>([<span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> t])        <span class="hljs-keyword">return</span> <span class="hljs-built_in">chr</span>(ascii_t-ascii_s)</code></pre></div><h1 id="判断子序列">392. 判断子序列</h1><blockquote><p>字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。</p></blockquote><p>这个题目不仅要保证 <code>s</code> 的字符在 <code>t</code>中有，还要有序。在遍历两个字符串的过程中，指针移动速度不一定一样，所以很容易想到了双指针。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isSubsequence</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, t: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        left = <span class="hljs-number">0</span>        right = <span class="hljs-number">0</span>        len_s = <span class="hljs-built_in">len</span>(s)        len_t = <span class="hljs-built_in">len</span>(t)        <span class="hljs-keyword">while</span> left&lt;len_s <span class="hljs-keyword">and</span> right&lt;len_t:            <span class="hljs-keyword">if</span> s[left] == t[right]:                left += <span class="hljs-number">1</span>                right += <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                right += <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> left == len_s</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
      <tag>ascii</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 387</title>
    <link href="/2022/06/29/leetcode20220629/"/>
    <url>/2022/06/29/leetcode20220629/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串中的第一个唯一字符">387. 字符串中的第一个唯一字符</h1><p>先想到的一种思路就是用双<code>set</code>，一个<code>set</code>用来存储字符串每个字符，作用时校验是否重复，另一个<code>set</code>用来存储重复的字符。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">firstUniqChar</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:        hashset1 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;&#x27;</span>)        hashset2 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;&#x27;</span>)        <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> s:            <span class="hljs-keyword">if</span> value <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashset1:                hashset1.add(value)            <span class="hljs-keyword">else</span>:                hashset2.add(value)        <span class="hljs-keyword">for</span> index,value <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s):            <span class="hljs-keyword">if</span> value <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashset2:                <span class="hljs-keyword">return</span> index        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span></code></pre></div><p>当然用字典也可以。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">firstUniqChar</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:        hashmap = &#123;&#125;        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashmap:                hashmap[i] = <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                hashmap[i] += <span class="hljs-number">1</span>        <span class="hljs-keyword">for</span> index,key_char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s):            <span class="hljs-keyword">if</span> hashmap[key_char] == <span class="hljs-number">1</span>:                <span class="hljs-keyword">return</span> index        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 383</title>
    <link href="/2022/06/28/leetcode20220628/"/>
    <url>/2022/06/28/leetcode20220628/</url>
    
    <content type="html"><![CDATA[<h1 id="赎金信">383. 赎金信</h1><p>采用字典方式对两个字符串计数，一旦<code>ransomNote</code>里的字符没有出现在<code>magazine</code>里或是比<code>magazine</code>里出现的次数多时，返回<code>False</code>，否则返回<code>True</code>。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">canConstruct</span>(<span class="hljs-params">self, ransomNote: <span class="hljs-built_in">str</span>, magazine: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        magazine_dict = &#123;&#125;        ransomNote_dict = &#123;&#125;        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> magazine:            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> magazine_dict:                magazine_dict[i] = <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                magazine_dict[i] += <span class="hljs-number">1</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ransomNote:            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> ransomNote_dict:                ransomNote_dict[i] = <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                ransomNote_dict[i] += <span class="hljs-number">1</span>        <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> ransomNote_dict.items():            <span class="hljs-keyword">if</span> k <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> magazine_dict:                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">if</span> v &gt; magazine_dict[k]:                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 326 344 349</title>
    <link href="/2022/06/27/leetcode20220627/"/>
    <url>/2022/06/27/leetcode20220627/</url>
    
    <content type="html"><![CDATA[<h1 id="有效的完全平方数">367. 有效的完全平方数</h1><blockquote><p><ahref="https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0">完全平方数- 百度百科</a></p></blockquote><p>这道题不禁让我想到了之前求算术平方根的题，看起来好像要更简单一点，那么直接用二分搜索。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPerfectSquare</span>(<span class="hljs-params">self, num: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        left = <span class="hljs-number">1</span>        right = num        <span class="hljs-keyword">while</span> left&lt;=right:            mid = (left+right)//<span class="hljs-number">2</span>            <span class="hljs-keyword">if</span> mid*mid == num:                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>            <span class="hljs-keyword">elif</span> mid*mid &lt; num:                left = mid+<span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                right = mid-<span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span></code></pre></div><h1 id="猜数字大小">374. 猜数字大小</h1><p>这道题和上道题几乎完全一样的思路，不同之处在于这道题更直白地说明了二分法的可行性。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">guessNumber</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:        left = <span class="hljs-number">1</span>        right = n        <span class="hljs-keyword">while</span> left&lt;=right:            mid = (left+right)//<span class="hljs-number">2</span>            res = guess(mid)            <span class="hljs-keyword">if</span> res == <span class="hljs-number">0</span>:                <span class="hljs-keyword">return</span> mid            <span class="hljs-keyword">elif</span> res == -<span class="hljs-number">1</span>:                right = mid-<span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                left = mid+<span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>binary search</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 326 344 349</title>
    <link href="/2022/06/25/leetcode20220625/"/>
    <url>/2022/06/25/leetcode20220625/</url>
    
    <content type="html"><![CDATA[<h1 id="的幂">326. 3 的幂</h1><p>还是经典的是否是最大值的约数。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPowerOfThree</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        <span class="hljs-keyword">return</span> (<span class="hljs-number">3</span>**<span class="hljs-number">20</span>)%n == <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span></code></pre></div><h1 id="的幂-1">342. 4 的幂</h1><p>这题不同于 2 和 3 的幂，因为 4 = 2$$2，所以如果按 2 的幂和 3的幂的解法会识别不了是 2 的幂但是不是 4的幂的数这种情况，不过可以转换为求解 2 的幂，如果一个数是 4的幂，那它的算术平方根肯定是 2 的幂就可解得正确答案。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPowerOfFour</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        <span class="hljs-keyword">return</span> (<span class="hljs-number">2</span>**<span class="hljs-number">30</span>)%(n**<span class="hljs-number">0.5</span>) == <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span></code></pre></div><h1 id="两个数组的交集">349. 两个数组的交集</h1><p>其实就是两个 <code>list</code> 转 <code>set</code> 后求交集再返回<code>list</code> 。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">intersection</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(nums1)&amp;<span class="hljs-built_in">set</span>(nums2))</code></pre></div><h1 id="两个数组的交集-ii">350. 两个数组的交集 II</h1><p>比上个题要难一点，需要对字符出现次数进行一个统计，所以用了<code>dict</code> 而不是 <code>set</code>，在往结果列表里添加值时取最小的次数就可以。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">intersect</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:        dict1 = &#123;&#125;        dict2 = &#123;&#125;        res = []        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums1:            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> dict1:                dict1[i] = <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                dict1[i] += <span class="hljs-number">1</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums2:            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> dict2:                dict2[i] = <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                dict2[i] += <span class="hljs-number">1</span>        <span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> dict1.items():            <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> dict2:                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">min</span>(value,dict2[key])):                    res.append(key)        <span class="hljs-keyword">return</span> res</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSH Tunnel 实现 BI 工具连接数据库</title>
    <link href="/2022/06/19/ssh%E9%9A%A7%E9%81%93%E5%AE%9E%E7%8E%B0bi%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2022/06/19/ssh%E9%9A%A7%E9%81%93%E5%AE%9E%E7%8E%B0bi%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>最近项目需要 BI工具看板做一个数据可视化的模块，服务器和数据库都是在云端的，每次访问数据库通过Navicat 、Python 等工具去访问，但是很可惜，power BI 和 tableau 并没有ssh 访问的入口（ Navicat是有的）。关于如何通过这种方式访问数据库在网上没有符合预期的解答，后来经过研究，发现了答案。</p><h1 id="原理">原理</h1><p>SSH 的理论在此不多赘述。整个连接过程分为两部分：</p><ul><li>服务器/远程主机某端口与本机某端口通过 ssh tunnel连接，连接建立后我去访问本机某端口时，相当于访问服务器/远程主机对应端口。</li><li>在 BI 工具（其实 Navicat也可以，稍有不同）上访问本机的这个端口，而不是访问之前的 3306（ Mysql默认的）端口。</li></ul><h1 id="实操过程">实操过程</h1><h2 id="隧道搭建">隧道搭建</h2><p>我的系统时 Windows 11，系统本身没有命令直接搭建 ssh隧道。所以需要选择一款 ssh 客户端软件，我用的是 PuTTY （ 0.77 release64-bit x86 ），下载地址如下：</p><p><ahref="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html</a></p><p>下载完了之后，我们打开 PuTTY，首先是主页面，也就是左侧<code>Session</code> 的页面，这里有个 Host Name (or IP address) 和Port。</p><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202206192238821.png"alt="配置 Session" /><figcaption aria-hidden="true">配置 Session</figcaption></figure><p>这里的 <strong>Host Name 与 Port 是指的 ssh 服务器的 IP地址与端口</strong>，对应着 Navicat 如下位置：</p><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202206192244406.png"alt="对应的 ssh 服务器" /><figcaption aria-hidden="true">对应的 ssh 服务器</figcaption></figure><p>接着在左侧<code>Connection -&gt; SSH -&gt; Tunnels</code>这个界面，输入Source port 与 Destination，输入完之后，点击 Add 添加。</p><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202206192255705.png"alt="配置单向隧道的源端口和目的端口" /><figcaptionaria-hidden="true">配置单向隧道的源端口和目的端口</figcaption></figure><p>这里的 <strong>Source port是指本机要用来建立隧道通信的端口</strong>，我的建议是不要选太怪的数字，最好10000 以上，65535以下，也没有太大讲究，最好别和其它服务重合了。<strong>Destination则是远程主机/服务器的 IP 和端口</strong>，我在 Google里其实搜索到过搭隧道 tableau连接远程主机的，它在演示的时候，自己跟自己建立的隧道，稍微不太方便理解这里的意思。Destination对应着 Navicat 如下位置：</p><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202206192305530.png"alt="对应的目的端口" /><figcaption aria-hidden="true">对应的目的端口</figcaption></figure><p>然后在 PuTTY 里还需要配置一个地方，它位于<code>Connection -&gt; SSH -&gt; Auth</code>，这个地方是添加私钥的地方，如下：</p><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202206192309718.png"alt="配置私钥" /><figcaption aria-hidden="true">配置私钥</figcaption></figure><p>它对应着 Navicat 里的：</p><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202206192310985.png"alt="对应私钥位置" /><figcaption aria-hidden="true">对应私钥位置</figcaption></figure><p><strong>但是其实并不能直接添加 <code>pem</code>文件</strong>，这个时候我们需要打开 PuTTYgen，点击load，弹出文件选择页面时选择你的 pem 文件，然后点击 Save private key保存一个 <code>ppk</code> 格式的文件。</p><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202206192315126.png"alt="私钥格式转换" /><figcaption aria-hidden="true">私钥格式转换</figcaption></figure><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202206192317180.png"alt="image-20220619231701159" /><figcaption aria-hidden="true">image-20220619231701159</figcaption></figure><p>这个时候就可以在 PuTTY 的页面添加这个 <code>ppk</code>格式文件了，如图：</p><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202206192318792.png"alt="成功配置私钥" /><figcaption aria-hidden="true">成功配置私钥</figcaption></figure><p>回到 <code>Session</code> 点击 <code>Save</code>保存一下以免之后重新配（只用一次当我没说），配置方面就完成了。点击<code>Open</code> 测试一波：</p><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202206192321988.png"alt="建立连接，登录账户" /><figcaption aria-hidden="true">建立连接，登录账户</figcaption></figure><p>输入用户名，这个用户名是 ssh 的用户名，对应着 Navicat 如下位置：</p><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202206192322747.png"alt="对应的 ssh 账户名" /><figcaption aria-hidden="true">对应的 ssh 账户名</figcaption></figure><p>然后其实就连上了。注意连上了之后不要关闭 PuTTY，关了隧道就断开了。</p><p>有时可能会突然挂掉，我采用了每隔一段时间发送空包的方式维持隧道。在<code>Connection</code> 里，我把如下位置的值改成了 10：</p><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202206192328488.png"alt="保持隧道连接" /><figcaption aria-hidden="true">保持隧道连接</figcaption></figure><p>至此，ssh 客户端（ PuTTY ）这边的工作就结束了，下一步就是测试。</p><h2 id="连接测试">连接测试</h2><p>因为我用 Navicat 是可以连接上的，所以我的选择是先用 Navicat测试。有过 Navicat 通过 ssh连接数据库经验的同学应该都知道，用这种方式连接数据库时，需要在<code>常规</code> 和 <code>SSH</code>两个页面分别配置，搭建隧道之后，只用配置 <code>常规</code>页面就可以了。</p><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202206192349956.png"alt="Navicat 测试" /><figcaption aria-hidden="true">Navicat 测试</figcaption></figure><p>这里：</p><ul><li>主机填写 <code>localhost</code> 或是 <code>127.0.0.1</code>都可以。</li><li>端口填写之前<strong>在 PuTTY 里填写的 Source port</strong>。</li><li>用户名填写目的主机/服务器的用户名。</li><li>密码填写目的主机/服务器的密码。</li></ul><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202206192349512.png"alt="连接成功" /><figcaption aria-hidden="true">连接成功</figcaption></figure><p>接着在 power BI 上也测试一下。选择 MySQL 数据库。</p><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202206192355774.png"alt="power BI 选择数据库" /><figcaption aria-hidden="true">power BI 选择数据库</figcaption></figure><p><strong>服务器填写 <code>127.0.0.1:xxxx</code>，就是本机的 IP地址加用于搭隧道的端口，也就是 PuTTY 里配置的 Source port。</strong>数据库填写你要连接的库名。</p><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202206192357463.png"alt="power BI 连接数据库" /><figcaption aria-hidden="true">power BI 连接数据库</figcaption></figure><p>高级选项下可以写 SQL 查询语句。然后在下一步选择<code>数据库</code>，用户名填写目的主机/服务器的用户名，密码填写目的主机/服务器的密码，如下：</p><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202206200000501.png"alt="power BI 登录数据库账户" /><figcaption aria-hidden="true">power BI 登录数据库账户</figcaption></figure><p>点击连接就可以了。</p>]]></content>
    
    
    <categories>
      
      <category>DataScience</category>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>ssh tunnel</tag>
      
      <tag>powerbi</tag>
      
      <tag>tableau</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《信用评分工具：自动化信用管理的理论与实践》 - 读书笔记</title>
    <link href="/2022/06/19/%E3%80%8A%E4%BF%A1%E7%94%A8%E8%AF%84%E5%88%86%E5%B7%A5%E5%85%B7%EF%BC%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E4%BF%A1%E7%94%A8%E7%AE%A1%E7%90%86%E7%9A%84%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B/"/>
    <url>/2022/06/19/%E3%80%8A%E4%BF%A1%E7%94%A8%E8%AF%84%E5%88%86%E5%B7%A5%E5%85%B7%EF%BC%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E4%BF%A1%E7%94%A8%E7%AE%A1%E7%90%86%E7%9A%84%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="大纲">大纲</h1><p>全书共 8 个部分，分别为：</p><ul><li><p>背景设定 -讲述信用评分的定义及业务、历史背景、原理。明确提到了申请贷款会有一个回复“通过”或“拒绝”，如果“通过”，会进一步知道“贷款额度”与“还款条件”。这体现了一笔loan做成必经准入或是拦截的过程，在准入之后，还有一个差异化定价的过程。</p><blockquote><ol type="1"><li>信用评分及其业务 -什么是信用评分、它适用于哪些经济和业务领域、它如何影响我们。</li><li>信用微历史 -关于信用供给、信用评分、征信机构和评级机构的简要历史。</li><li>信用评分原理 - 如何进行信用评分、怎样建立评分卡。</li></ol></blockquote></li><li><p>风险业务 -针对不同业务的风险管理有不同的决策评估方法，要建立风险管理框架，对企业和个体也要做不同的风险评估。</p><blockquote><ol start="4" type="1"><li>风险理论 - 管理层要考虑的风险管理框架，信用风险只是其中之一。</li><li>决策科学 -信用评分是对个体风险的评估，但使用科学的方法能挖掘出更大的价值。</li><li>企业风险评估 -对不同规模的企业贷款的评估，既有传统的理论方法，也有近期的发展。</li></ol></blockquote></li><li><p>数学和统计 -介绍传统统计方法，包括一些机器学习的模型、算法的原理和适用范围。</p><blockquote><ol start="7" type="1"><li>预测统计 -因为成本高或者代价大，对未来事件或结果的未知答案的估计方法很难确定。</li><li>区分度的测量 -用于对预测变量和预测能力的稳定性以及预测的准确性进行判定。</li><li>零碎内容 -描述性分析、预测工具、一些统计概念以及基本的评分卡开发报告。</li><li>头脑与机器 -所需的人员（开发人员、项目组、委员会）和软件（评分卡开发、决策引擎）。</li></ol></blockquote></li><li><p>数据 - 讲述数据本身的重要性以及如何提高数据的数量与质量。</p><blockquote><ol start="11" type="1"><li>数据考虑 -建立评分卡之前要考虑的一些必要因素，主要涉及特征变量。</li><li>数据来源 - 讨论从客户、内部系统和征信机构获取信息。</li><li>评分结构 -关注评分卡的定制和架设、数据整合和不同来源数据的匹配。</li><li>信息共享 -征信机构的类型、存在的原因、如何运作以及如何鼓励或约束贷款机构。</li><li>数据准备 -开发评分卡流程的第一阶段，包括数据整合、好坏定义、采样窗口以及样本选择。</li></ol></blockquote></li><li><p>评分卡开发 -这里提到了分离开发时去理解业务与开发过程这个概念，也讲述到了应把<strong>简单、可解释性强的模型</strong>作为评分卡开发时的选择这个倾向。</p><blockquote><p>Falkenstein E G , Boral A , Ca Rty L V . RiskCalc for PrivateCompanies: Moody's Default Model[J]. SSRN Electronic Journal, 2000.</p></blockquote><p>作者认为理解业务应当在开发时那个节点，在这一步需要与业务人员，决策者进行互动，所谓“谋定而后动”，这点与软件工程中的<code>可行性分析-&gt;需求分析-&gt;总体设计-&gt;详细设计</code>有着异曲同工之妙。作者把开发前大体的步骤划分为如下：</p><ul><li>项目启动 - 最开始的会议决定责任、项目内容、数据来源和潜在问题。</li><li>数据收集 - 从数据来源提取大小合适的样本。</li><li>好坏定义 -不仅要区别好坏、不确定样本，还要剔除任何不该用来建模的样本（灰样本）。</li><li>样本分层 -决定是否要细分样本并分别对待，要参考之前的分层方法和业务信息。（也可以用决策树辅助。）</li><li>确定模型 -开发完毕，交付结果，包括每个特征的权重，还有评分卡的验证结果。</li><li>决策策略 -不同情境下的决策，分数本身也是策略的一部分。分数可以被简单设置成一个临界分数（准入与拦截），但也可能会更复杂。</li></ul><p>开发的完整流程如下：</p><blockquote><ol start="16" type="1"><li>变量转换 -分析可得数据并将其转换为可用数据，传统上包括细分类、粗分类、转换。</li><li>特征选取 -确定哪些特征作为备选变量，它们最好是有预测能力、符合逻辑、稳定可得、合规、与客户有关并且相互独立的。</li><li>样本分层 -是否细分样本并分别建立评分卡取决于市场、客户、数据、过程、建模等因素。</li><li>拒绝推断 - 开发申请评分卡时对被拒绝的申请者的表现进行推断。</li><li>模型校准 -用分数分段或缩放来确保分数在不同评分卡中有相同的含义，反映相应的违约概率。</li><li>检验交付 -用保留样本和近期样本检验模型是否过度拟合或不稳定，然后准备投入使用。</li><li>开发管理 - 评分卡开发的流程管理和安排。</li></ol></blockquote></li><li><p>实施和使用 -遵循<strong>Wiklund提供的框架</strong>，介绍模型部署与模型监控相关内容。</p><blockquote><p>在信用评分中有三个重要的程序系统：（1）评分卡安装；（2）与信用信息的连接；（3）安装完成后的监控。</p><p>Handbook of credit scoring[M]. Global Professional Publishi,2001.</p></blockquote><blockquote><ol start="23" type="1"><li>实施安装 - 绿地开发（ Greenfield Software Development,指为全新环境开发系统）相关问题，以及棕地开发（ Brownfield SoftwareDevelopment,指在现有或遗留软件系统存在的情况下开发和部署新的软件系统）涉及的数据、资源和转换问题。</li><li>管理控制 - 验证审查，保证分数合理有效。</li><li>跟踪监控 - 记录事件的报告，有前端报告和后端报告之分。</li><li>金融财务 - 损失准备金、风险定价和利润率等问题。</li></ol></blockquote></li><li><p>信用风险管理周期 -这里提到风险管理周期可以分为五个阶段，<code>市场营销-&gt;申请审批-&gt;账户管理-&gt;催收-&gt;回收</code>。其中市场营销可以细分为分层（为了精准营销）和吸引客户。回收可以细分为追踪和回收（观察和表现）。</p><ul><li>分层（ segmentation ） - 确定目标客户、客户需求和适合的产品。</li><li>吸引（ solicitation ） -设计和实施营销活动，吸引潜在客户办理业务。</li><li>获取（ acquisition ） -获取并处理新业务申请，如果审批通过则交付产品，否则还要与客户沟通并处理疑问。</li><li>管理（ management ） -对一般账户进行日常管理，主要是额度管理，但也包括还款、账单、咨询等。</li><li>催收（ collections ） - 重点关注早期的违约和维持客户关系。</li><li>追踪（ tracing ） -尝试联系并找到一些因没有更新住址或联系方式而失联的客户。</li><li>回收（ rehabilitation ） -处理后期的违约，尽可能地收回资金，其中可能采取法律手段并破坏客户关系。</li></ul><p>除此之外，还有一个欺诈风险。作者认为欺诈属于操作风险中的一种，并不属于信用风险的范畴，但必须在信用管理周期中考虑。</p><blockquote><ol start="27" type="1"><li>市场营销 - 广告媒体、质量与数量、初步筛选和使用的数据。</li><li>申请审批 - 选择客户的操作。</li><li>账户管理 -询问贷款的人、获得贷款的人、接受贷款的人、重复贷款的人和关闭账户的人。</li><li>催收回收 - 违约原因和催收流程、催收时机和催收策略。</li><li>欺诈防范 - 趋势、类型和工具。</li></ol></blockquote></li><li><p>监管环境 - 介绍一些对金融机构的监管内容。</p><blockquote><ol start="32" type="1"><li>监管概念 -最佳实践、善良治理、商业道德、社会责任、合规等级、判例制度、行业规范、政策程序，以及不成文规定。</li><li>隐私保护 -贷款机构之间的数据共享、上传征信机构的内容、必须告知客户的信息等。</li><li>禁止歧视 -涉及借贷决策中可能会使用的信息，禁止使用带有歧视的信息（种族、宗教等），或者与潜在客户不同群体的信息。</li><li>公平信贷 -确保贷款机构采取足够措施，保证借款人能负担贷款，以及贷款条款的公平。</li><li>资本要求 -主要针对银行的巴塞尔协议，它允许使用内部评级法计算资本金要求。</li><li>了解客户 -提高身份识别要求，主要用于防止洗钱和犯罪活动，还有阻止恐怖活动。</li><li>国家差异 -对一些英语国家的法律作出概述，包括美国、英国、澳大利亚、加拿大和南非。</li></ol></blockquote></li></ul><h1 id="第一部分---背景设定">第一部分 - 背景设定</h1><h2 id="第-1-章---信用评分及其业务">第 1 章 - 信用评分及其业务</h2><h3 id="什么是信用评分">1.1 什么是信用评分</h3><h3 id="在哪儿使用信用评分">1.2 在哪儿使用信用评分？</h3><h4 id="数据来源">1.2.1 数据来源</h4><h4 id="信用风险管理周期">1.2.2 信用风险管理周期</h4><h4 id="行为偏好">1.2.3 行为偏好</h4><h3 id="为什么要使用信用评分">为什么要使用信用评分？</h3><h4 id="如何影响贷款机构">1.3.1 如何影响贷款机构？</h4><h4 id="对客户的影响">1.3.2 对客户的影响</h4><h3 id="信用评分如何影响信用供给">1.4 信用评分如何影响信用供给？</h3><h3 id="小结">1.5 小结</h3><h2 id="第-2-章---信用微历史">第 2 章 - 信用微历史</h2><h3 id="信用的历史">2.1 信用的历史</h3><h4 id="古代历史">2.1.1 古代历史</h4><h4 id="中世纪到-19-世纪">2.1.2 中世纪到 19 世纪</h4><h4 id="世纪">2.1.3 20 世纪</h4><h3 id="信用评分的历史">2.2 信用评分的历史</h3><h4 id="开拓时期">2.2.1 开拓时期</h4><h4 id="自动化时期">2.2.2 自动化时期</h4><h4 id="扩张时期">2.2.3 扩张时期</h4><h3 id="征信机构的历史">2.3 征信机构的历史</h3><h4 id="世纪中期以前">2.3.1 18 世纪中期以前</h4><h4 id="世纪-90-年代以后">2.3.2 19 世纪 90 年代以后</h4><h4 id="世纪-60-年代以后">2.3.3 20 世纪 60 年代以后</h4><h4 id="国际">2.3.4 国际</h4><h3 id="评级机构的历史">2.4 评级机构的历史</h3><h3 id="小结-1">2.5 小结</h3><h2 id="第三章---评分信用原理">第三章 - 评分信用原理</h2><h3 id="评分卡是什么">3.1 评分卡是什么</h3><h4 id="评分卡的形态">3.1.1 评分卡的形态</h4><h4 id="如何开发评分卡">3.1.2 如何开发评分卡</h4><h4 id="预测能力如何评估">3.1.3 预测能力如何评估</h4><h4 id="评分卡的偏差是如何出现的">3.1.4 评分卡的偏差是如何出现的</h4><h4 id="如何应对以上问题">3.1.5 如何应对以上问题</h4><h3 id="采用何种测量方法">3.2 采用何种测量方法</h3><h4 id="流程与策略">3.2.1 流程与策略</h4><h4 id="如何开发评分卡-1">3.2.2 如何开发评分卡</h4><h4 id="违约概率和损失程度">3.2.3 违约概率和损失程度</h4><h3 id="评分卡的开发流程">3.3 评分卡的开发流程</h3><h4 id="项目准备">3.3.1 项目准备</h4><h4 id="数据准备">3.3.2 数据准备</h4><h4 id="建模分析">3.3.3 建模分析</h4><h4 id="模型确定">3.3.4 模型确定</h4><h4 id="决策制定和策略">3.3.5 决策制定和策略</h4><h4 id="安全保护">3.3.6 安全保护</h4><h3 id="什么会影响评分卡">3.4 什么会影响评分卡</h3><h4 id="经济偏移">3.4.1 经济偏移</h4><h4 id="市场偏移">3.4.2 市场偏移</h4><h4 id="操作偏移">3.4.3 操作偏移</h4><h4 id="目标偏移">3.4.4 目标偏移</h4><h4 id="不明偏移">3.4.5 不明偏移</h4><h3 id="小结-2">3.5 小结</h3><h1 id="第二部分---风险业务">第二部分 - 风险业务</h1><h2 id="第-4-章---风险理论">第 4 章 - 风险理论</h2><h3 id="风险相关术语">4.1 风险相关术语</h3><h4 id="风险关联">4.1.1 风险关联</h4><h4 id="风险环境">4.1.2 风险环境</h4><h4 id="风险类型">4.1.3 风险类型</h4><h3 id="数据与模型">4.2 数据与模型</h3><h4 id="数据类型">4.2.1 数据类型</h4><h4 id="模型类型">4.2.2 模型类型</h4><h4 id="人为判断">4.2.3 人为判断</h4><h4 id="专家系统">4.2.4 专家系统</h4><h3 id="小结-3">4.3 小结</h3><h2 id="第-5-章---决策科学">第 5 章 - 决策科学</h2><h3 id="自适应控制">5.1 自适应控制</h3><h3 id="成为主人">5.2 成为主人</h3><h4 id="冠军挑战">5.2.1 冠军挑战</h4><h4 id="优化">5.2.2 优化</h4><h4 id="策略推断">5.2.3 策略推断</h4><h3 id="小结-4">5.3 小结</h3><h2 id="第-6-章---企业风险评估">第 6 章 - 企业风险评估</h2><h3 id="风险评估基础">6.1 风险评估基础</h3><h4 id="数据来源-1">6.1.1 数据来源</h4><h4 id="风险模型">6.1.2 风险模型</h4><h4 id="风险等级">6.1.3 风险等级</h4><h3 id="中小企业贷款">6.2 中小企业贷款</h3><h4 id="关系型贷款">6.2.1 关系型贷款</h4><h4 id="交易型贷款">6.2.2 交易型贷款</h4><h3 id="财务比率评分">6.3 财务比率评分</h3><h4 id="理论先驱">6.3.1 理论先驱</h4><h4 id="预测比率">6.3.2 预测比率</h4><h4 id="限制因素">6.3.3 限制因素</h4><h4 id="评级机构">6.3.4 评级机构</h4><h4 id="内部评级">6.3.5 内部评级</h4><h3 id="信用评级机构">6.4 信用评级机构</h3><h4 id="字母等级">6.4.1 字母等级</h4><h4 id="评级类型">6.4.2 评级类型</h4><h4 id="存在问题">6.4.3 存在问题</h4><h4 id="研究重点">6.4.4 研究重点</h4><h3 id="前瞻数据建模">6.5 前瞻数据建模</h3><h4 id="历史分析">6.5.1 历史分析</h4><h4 id="结构模型">6.5.2 结构模型</h4><h4 id="简约模型">6.5.3 简约模型</h4><h3 id="小结-5">6.6 小结</h3><h1 id="第三部分---数学和统计">第三部分 - 数学和统计</h1><h2 id="第-7-章---预测统计">第 7 章 - 预测统计</h2><h3 id="模型概述">7.1 模型概述</h3><h3 id="参数模型">7.2 参数模型</h3><h4 id="线性模型">7.2.1 线性模型</h4><h4 id="判别分析">7.2.2 判别分析</h4><h4 id="逻辑回归">7.2.3 逻辑回归</h4><h3 id="非参模型">7.3 非参模型</h3><h4 id="决策树">7.3.1 决策树</h4><h4 id="神经网络">7.3.2 神经网络</h4><h4 id="遗传算法">7.3.3 遗传算法</h4><h4 id="k-近邻法">7.3.4 K 近邻法</h4><h4 id="线性规划">7.3.5 线性规划</h4><h3 id="关键假设">7.4 关键假设</h3><h4 id="数据因素">7.4.1 数据因素</h4><h4 id="统计假设">7.4.2 统计假设</h4><h4 id="解决方法">7.4.3 解决方法</h4><h3 id="结果比较">7.5 结果比较</h3><h2 id="第-8-章---区分度的测量">第 8 章 - 区分度的测量</h2><h3 id="错误的分类矩阵">8.1 错误的分类矩阵</h3><table><thead><tr class="header"><th>混淆矩阵</th><th><strong>实际好 Good</strong></th><th><strong>实际坏 Bad</strong></th></tr></thead><tbody><tr class="odd"><td><strong>预测好 Positive</strong></td><td>TP</td><td>FN</td></tr><tr class="even"><td><strong>预测坏 Negative</strong></td><td>FP</td><td>TN</td></tr></tbody></table><p>在预测不正确的情况下，分为两种错误：</p><ul><li>把实际好的预测为坏（ FN ） - FalseNegative，意为假负，也就是说实际上是正的，被称为<strong>第一类错误</strong>。</li><li>把实际坏的预测为好（ FP ） - FalseNegative，意为假正，也就是说实际上是负的，被称为<strong>第二类错误</strong>。</li></ul><h3 id="kullback-散度">8.2 Kullback 散度</h3><blockquote><p>Kullback S. Information theory and statistics[M]. CourierCorporation, 1997.</p></blockquote><p>Kullback散度用于测量两个频率分布的差异。在信用评分中，它的表现形式有两种：</p><ul><li>信息值（ Information Value, IV ）</li><li>稳定指数（ Stability Index ）</li></ul><p>他们都建立在证据权重（ Weight of Evidence, WOE ）的基础上。</p><h4 id="证据权重">8.2.1 证据权重</h4><p><span class="math display">\[WOE_i=ln(\frac{N_i}{\sum N})/(\frac{P_i}{\sumP})=ln(\frac{N_i}{P_i})-ln(\frac{\sum N}{\sum P})\]</span></p><p>其中 N 代表没有触发坏客户定义，也就是好客户。P代表触发坏客户定义，也就是坏客户。那么 <spanclass="math inline">\(\frac{N_i}{\sum N}\)</span>其实意思就是为好客户的概率，P 也一样，所以上面的公式也可以写为 <spanclass="math display">\[WOE_i=ln(\frac{P(bad)_i}{P(good)_i})\]</span>它反映了某个特征的某个值（或组）的<strong>相对风险</strong>，很明显为WOE 代表了该组的相对风险更小，为负代表该组相对分箱更大。</p><h4 id="信息值">8.2.2 信息值</h4><p><span class="math display">\[IV=\sum^{n}_{i=1}[(\frac{N_i}{\sum N}-\frac{P_i}{\sum P})\timesWOE_i]=\sum^{n}_{i=1}[\frac{count(i)}{count(n)}\times WOE_i]\]</span></p><h4 id="稳定指数">8.2.3 稳定指数</h4><h3 id="ks-统计量">8.3 KS 统计量</h3><h3 id="相关系数">8.4 相关系数</h3><h4 id="pearson-积矩">8.4.1 Pearson 积矩</h4><h4 id="spearman-秩序">8.4.2 Spearman 秩序</h4><h4 id="洛伦兹曲线">8.4.3 洛伦兹曲线</h4><h4 id="基尼系数">8.4.4 基尼系数</h4><h4 id="roc-曲线">8.4.5 ROC 曲线</h4><h3 id="卡方检验">8.5 卡方检验</h3><h3 id="准确性检验">8.6 准确性检验</h3><h4 id="概率论">8.6.1 概率论</h4><h4 id="二项分布">8.6.2 二项分布</h4><h4 id="hl统计量">8.6.3 HL统计量</h4><h4 id="对数似然">8.6.4 对数似然</h4><h3 id="小结-6">8.7 小结</h3><h2 id="第-9-章---零碎内容">第 9 章 - 零碎内容</h2><h3 id="描述方法">9.1 描述方法</h3><h4 id="聚类分析">9.1.1 聚类分析</h4><h4 id="因子分析">9.1.2 因子分析</h4><h3 id="预报方法">9.2 预报方法</h3><h4 id="马尔可夫链">9.2.1 马尔可夫链</h4><h4 id="生存分析">9.2.2 生存分析</h4><h3 id="其他概念">9.3 其他概念</h3><h4 id="相关性">9.3.1 相关性</h4><h4 id="交叉性">9.3.2 交叉性</h4><h4 id="单调性">9.3.3 单调性</h4><h4 id="标准化">9.3.4 标准化</h4><h3 id="开发报告">9.4 开发报告</h3><h4 id="特征分析报告">9.4.1 特征分析报告</h4><h4 id="分数分布报告">9.4.2 分数分布报告</h4><h4 id="新业务策略表">9.4.3 新业务策略表</h4><h3 id="小结-7">9.5 小结</h3><h2 id="第-10-章---头脑与机器">第 10 章 - 头脑与机器</h2><h3 id="人员和项目">10.1 人员和项目</h3><h4 id="评分卡开发人员">10.1.1 评分卡开发人员</h4><h4 id="外部供应商">10.1.2 外部供应商</h4><h4 id="内部资源">10.1.3 内部资源</h4><h4 id="项目组">10.1.4 项目组</h4><h4 id="指导委员会">10.1.5 指导委员会</h4><h3 id="软件">10.2 软件</h3><h4 id="评分卡开发">10.2.1 评分卡开发</h4><h4 id="决策引擎">10.2.1 决策引擎</h4><h3 id="小结-8">10.3 小结</h3><h1 id="第四部分---数据">第四部分 - 数据</h1><h2 id="第-11-章---数据考虑">第 11 章 - 数据考虑</h2><h3 id="数据透明度">11.1 数据透明度</h3><blockquote><p>数据透明度指充分评估风险所需的数据充足程度。</p></blockquote><p>建模的最终目标是获取一个信用度的测量标准，这个标准合适与否取决于借款人数据对我们的透明程度（了解借款人的信息有多全面，特征衍生前的特征）。</p><p>不透明的数据通常表现为：</p><ul><li>缺乏信用记录。</li><li>信息不友好。指结构化数据的存储结构不合理，或者数据对信用度影响的逻辑难以建立。</li><li>高度复杂。指非结构化数据，例如语音，图像等，可能有用但是我们不知道怎么用。</li></ul><p>如果数据透明度不够，贷款机构面临两种选择：</p><ol type="1"><li>提高贷款利率，作为风险溢价。</li><li>投入额外成本来确定有用信息，例如购买第三方数据源的数据。</li></ol><p>那么数据透明度是由数据的数量和质量决定的，就引入了下两章。</p><h3 id="数据数量">11.2 数据数量</h3><blockquote><p>数据的深度和广度，由可得性和同质性决定。</p></blockquote><h4 id="深度和广度">11.2.1 深度和广度</h4><blockquote><p>样本量（深度）和变量数量（广度）。</p></blockquote><p>最小样本量是 1500 个好样本、 1500 个坏样本、 1000 个拒绝样本。</p><p>最终模型一般包含 6~25 个特征。</p><h4 id="同质性">11.2.2 同质性</h4><blockquote><p>同质性决定样本是否可以合并处理。</p></blockquote><p>同质性是样本分群的问题。主要要考虑以下 3 点：</p><ol type="1"><li>目标定义</li><li>数据来源</li><li>交叉作用</li></ol><p>以上 3 点有问题的样本都应该分开，然后用不同的模型去处理。</p><p>有时我们会遇到在某群体的样本表现高度同质，这种时候应该去寻找新的数据源扩大数据的广度。</p><h4 id="可得性">11.2.3 可得性</h4><blockquote><p>数据获取面临的来自系统、权限或法律的限制。</p></blockquote><p>数据采集、系统升级时的数据更新（这里指丢失记录）、反歧视、数据隐私、信息共享。</p><h3 id="数据质量">11.3 数据质量</h3><blockquote><p>数据能否符合某具体需求。高质量的数据应该具备相关性、准确性、完备性、时效性和一致性。</p><p>在很多情况下，风险管理所用的信息通常只是为截然不同的目的而设计的处理系统的副产品，而且前端系统对数据质量通常缺乏具体的要求，从而虚弱了其产生信息的质量。</p></blockquote><h4 id="关联性">11.3.1 关联性</h4><blockquote><p>数据要与结果有关，能够为分数和决策提供有意义的帮助。</p></blockquote><p>首要关注的是数据的相关关系而非因果关系。</p><p>四个问题：</p><ol type="1"><li>如果特征可测量，它的预测能力怎么样？</li><li>如果特征不可测量，是否有证据证明它在其他方面有价值？</li><li>特征数据是否在需要时可获取，如果不能怎么办？</li><li>特征在逻辑上是否有意义？</li></ol><h4 id="准确性">11.3.2 准确性</h4><blockquote><p>通过正确地获取、加工和储存数据使其准确反映真实状况。</p></blockquote><p>数据不准确主要集中在两方面：</p><ol type="1"><li>流程设计不完善 - 表格设计、数据采集、系统错误和匹配等方面的问题。<ul><li>记账错误 - 数据不正确、不一致或重复。</li><li>漏账错误 - 字段为空或记录缺失。</li></ul></li><li>作弊 - 为提高申请通过的可能性，申请表答案可能被篡改。</li></ol><h4 id="完备性">11.3.3 完备性</h4><blockquote><p>数据包含所有所需信息，允许个别或整条记录有缺失。</p></blockquote><p>特征层面上的完备与样本记录层面上的完备。</p><h4 id="时效性">11.3.4 时效性</h4><blockquote><p>数据随时更新。超过一定期限后，数据就会失效。</p></blockquote><p>如 A 卡的特征年龄是基于客户申请时间的年龄，而不是现在的年龄。</p><p>对于老客户，更多地依赖行为数据而非申请数据。</p><h4 id="一致性">11.3.5 一致性</h4><blockquote><p>随时间推移数据意义保持一致。就算数据有误，也希望一致有误，这样还可以加以利用。</p></blockquote><p>主要是指系统、流程或某参数更新时造成同样的输入不同的输出问题。</p><p>重大突发事件也可能造成数据的意义不一致。</p><h4 id="对征信机构的影响">11.3.6 对征信机构的影响</h4><p>CFA 建议贷款机构在作决策时不要局限于一家征信机构的信息。</p><h3 id="数据设计">11.4 数据设计</h3><blockquote><p>定义数据的类型。从实践或统计的角度出发，考虑数据缺失、分母为零的特例和数据设计的问题，最大化数据的价值。</p></blockquote><h4 id="数据类型-1">11.4.1 数据类型</h4><blockquote><p>统计上及实践中描述数据的术语和对特殊情况的处理。</p></blockquote><p>数据的两个维度：</p><ul><li>记录（ record ） - 单个样本的细节。</li><li>字段（ field ）、特征（ characteristic ）、变量（ variable），这三者都是一个东西。</li></ul><p><strong>统计上的分类：</strong></p><table><thead><tr class="header"><th>变量类别</th><th>类别含义</th></tr></thead><tbody><tr class="odd"><td>分类变量</td><td>由定性特征确定的分组情况，例如性别（男、女）或颜色（黄、红、蓝）。没有顺序和大小。</td></tr><tr class="even"><td>二元变量</td><td>仅由两种类别构成，例如“是/否”等一对反义词。又称为二分类变量。信用评分中目标变量大多是二分类变量，例如目标客户（好、坏）。</td></tr><tr class="odd"><td>名义变量</td><td>用标签（名字）或代码（字母/数字）表示的变量。没有顺序和大小。</td></tr><tr class="even"><td>顺序变量</td><td>只表示一个序列中的相对位置，不表示相对距离的大小，通常和主观评价有关，例如优秀、良好、一般、差。有顺序没有大小。</td></tr><tr class="odd"><td>数值变量</td><td>用整数或实数表示，有顺序有大小，能进行数值运算，比如年龄（整岁）。</td></tr><tr class="even"><td>连续变量</td><td>存在于连续的序列中，可能值的数量无限，存在最大值和最小值，用实数表示，例如温度、重量、距离和时间。</td></tr><tr class="odd"><td>离散变量</td><td>分离或者不连续的变量，用实数表示。并不代表没有顺序和大小。</td></tr><tr class="even"><td>基数变量</td><td>离散的，但特指一个集合内的数量。通常等价于离散变量。</td></tr></tbody></table><p><strong>实践中的分类：</strong></p><table><thead><tr class="header"><th>变量类别</th><th>类别含义</th></tr></thead><tbody><tr class="odd"><td>编码（名义）</td><td>用符号或数字表现的类别。</td></tr><tr class="even"><td>金额（近似连续）</td><td>以货币金额表示的内容，例如余额、额度、交易额，可以计算总数、平均数、趋势、最小值、最大值、范围、极限等。</td></tr><tr class="odd"><td>次数（离散）</td><td>发生的数量，例如子女的数量（来自申请者）、逾期次数（来自贷款机构）、查询次数（来自征信机构）。</td></tr><tr class="even"><td>比率（连续）</td><td>两个数值相除的结果，最常用于按照规模对金额标准化，例如资产负债率。</td></tr><tr class="odd"><td>时间（离散）</td><td>距离某特定事件（账户开立、账户激活、某次评估）发生的时间，通常按天或月计算。</td></tr><tr class="even"><td>分数（近似连续）</td><td>表示未来某事件发生的概率（打分）。在一些情况下，一个分数可以用来计算另一个分数（比如通过第三方数据的评分卡制作内部的评分卡）。</td></tr><tr class="odd"><td>等级（序数）</td><td>和分数类似，不过它代表一个分数范围，或被主观确定。</td></tr></tbody></table><p>提到了变量处理的基础方法，主要分为两种：</p><ul><li>转换特征 - 比如 <code>birthday</code>本身可能并不能作为合适的特征使用，那么我们用某一时间（例如客户申请时间）减去出生日期换算成年就得到了<code>age</code> 这个特征。</li><li>特征生成<ul><li>多项式生成 - 生成交叉项，例如 <code>sklearn</code> 里的<code>PolynomialFeatures</code> 方法。</li><li>计算比率 - 例如计算负债比。</li></ul></li></ul><p><strong>特例（缺失值、异常值处理）：</strong></p><ul><li>数据缺失 -未找到（不清楚真实是否发生）、无记录（真实发生）、未发生（真实未发生）等。</li><li>账户状态 -同一个特征里没有用相同单位，如一部分是值，一部分是字符。</li><li>分母为零 - 除数不能为 0 ，这种情况可以用一个接近 0 的值代替。</li><li>分母为负 - 计算比率或比例时，出现了分子分母同时为负的情况。</li></ul><p>对缺失值和异常值，一般用一个特殊编号来记录。</p><h4 id="表格设计">11.4.2 表格设计</h4><blockquote><p>收集数据的表格设计。</p></blockquote><p>最大的挑战在于尽可能获取更多地相关数据，但数据又不过量。</p><p>表格的处理方式取决于表格设置的答案时定性的还是定量的。</p><p><strong>数值结果</strong></p><p>分为 3 种：</p><ol type="1"><li>数值本身。</li><li>计算输入值。</li><li>数值范围。</li></ol><p>例如不需要申请者填写年龄，直接填写年龄段和生日；金额上不填某段，填入具体的数值；负债收入比率不需要申请者计算，直接填入负债值和收入值。</p><p><strong>分类结果</strong></p><p>难点在于确定特征的选择范围。</p><p>不是直接填空，而是一个选择范围的下拉菜单。</p><p>将问题分为更多的维度，例如职业和教育的问题分为行业、工作层级、最高学历、就业现状等维度。</p><h3 id="小结-9">11.5 小结</h3><p>这章探讨了数据透明度、数据数量、数据质量和设计相关方面的问题。目的就是为了提高数据透明度，正是因为数据透明度的提高使得贷款机构对客户有更多的了解，从而可以扩大贷款规模。</p><h2 id="第-12-章---数据来源">第 12 章 - 数据来源</h2><h3 id="客户信息">12.1 客户信息</h3><h4 id="申请表">12.1.1 申请表</h4><h4 id="财务信息">12.1.2 财务信息</h4><h3 id="内部信息">12.2 内部信息</h3><h4 id="数据类型-2">12.2.1 数据类型</h4><h4 id="数据库类型">12.2.2 数据库类型</h4><h4 id="客户关系管理">12.2.3 客户关系管理</h4><h3 id="征信数据">12.3 征信数据</h3><h4 id="查询检索">12.3.1 查询检索</h4><h4 id="公共信息">12.3.2 公共信息</h4><h4 id="共享数据">12.3.3 共享数据</h4><h4 id="欺诈预警">12.3.4 欺诈预警</h4><h4 id="征信分数">12.3.5 征信分数</h4><h4 id="地理指标">12.3.6 地理指标</h4><h4 id="其他来源">12.3.7 其他来源</h4><h3 id="小结-10">12.4 小结</h3><h2 id="第-13-章---评分机构">第 13 章 - 评分机构</h2><h3 id="定制服务">13.1 定制服务</h3><h4 id="通用评分卡">13.1.1 通用评分卡</h4><h4 id="定制评分卡">13.1.2 定制评分卡</h4><h4 id="专家模型">13.1.3 专家模型</h4><h3 id="系统架设">13.2 系统架设</h3><h3 id="数据整合">13.3 数据整合</h3><h4 id="独立分数">13.3.1 独立分数</h4><h4 id="离散分数">13.3.2 离散分数</h4><h4 id="合并分数">13.3.3 合并分数</h4><h4 id="决策矩阵">13.3.4 决策矩阵</h4><h3 id="信用评分">13.4 信用评分</h3><h3 id="数据匹配">13.5 数据匹配</h3><h3 id="小结-11">13.6 小结</h3><h2 id="第-14-章---信息共享">第 14 章 - 信息共享</h2><h3 id="征信机构">14.1 征信机构</h3><h4 id="公共与民营">14.1.1 公共与民营</h4><h4 id="正面信息与负面信息">14.1.2 正面信息与负面信息</h4><h3 id="参与合作">14.2 参与合作</h3><h4 id="互惠原则">14.2.1 互惠原则</h4><h4 id="促进因素">14.2.2 促进因素</h4><h4 id="阻碍因素">14.2.3 阻碍因素</h4><h3 id="小结-12">14.3 小结</h3><h2 id="第-15-章---数据准备">第 15 章 - 数据准备</h2><h3 id="数据获取">15.1 数据获取</h3><h4 id="申请数据">15.1.1 申请数据</h4><h4 id="征信数据-1">15.1.2 征信数据</h4><h4 id="观测数据">15.1.3 观测数据</h4><h4 id="表现数据">15.1.4 表现数据</h4><h4 id="数据整合-1">15.1.5 数据整合</h4><h3 id="好坏定义">15.2 好坏定义</h3><p>作者强调了好坏定义的重要性，提到了<strong>好坏定义是建模过程中仅次于数据的重要因素，用来设定目标变量。</strong></p><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/202206201247059.png"alt="好坏定义" /><figcaption aria-hidden="true">好坏定义</figcaption></figure><h4 id="选择状态">15.2.1 选择状态</h4><p>指观测期的状态，分为以下4类：</p><ul><li>排除 -如果某个子群体的分数不影响对其决策，作者建议排除。和拒绝不一样的地方是这类样本不需要做拒绝推断。</li><li>拒绝 - 出于政策规则或者决策规则的样本不需要做拒绝推断。</li><li>未采用 -客户没有接受贷款机构提供的贷款合同，也就是准入了但未做成。可能是价格、利率、合同条款让客户觉得不适。</li><li>双方接受 - 只有这类样本会有真实的表现。</li></ul><h4 id="表现状态">15.2.2 表现状态</h4><p>指表现期的状态，分为以下4类：</p><ul><li><p>排除 -评分卡计划目标之外的结果，比如申请评分卡中出现了欺诈行为或客户去世。这类占比不宜超过总体的3%。</p></li><li><p>不定 - 指灰样本，申请评分卡的不定率应设定在5%~15%，行为评分卡的不定率设定在 10%~20%。这里提到设定灰样本有 3个理由。</p><ul><li>技术逾期造成的疑似不良行为 - 我觉得应该是指像美国 ACH那样的延时得知交易结果的支付方式对标签定义的影响。</li><li>公司策略</li><li>使好坏定义更加清晰。</li></ul><p>这里也讨论了关于提前还款的人是好样本还是不定样本。这类人是可以当作好样本建模的。</p></li><li><p>好样本 - 我们表示欢迎的样本。</p></li><li><p>坏样本 - 我们表示回避的样本。</p></li></ul><h4 id="当前状态和最坏状态">15.2.3 当前状态和最坏状态</h4><p>当前状态和最坏状态是指用结果时点的状态（当前状态）还是整个结果期最坏的状态（最坏状态）来确定“不可恢复点”（point of no return ），也就是去找出账户不会再从坏变好的时间点。</p><p>行为评分中，巴塞尔协议 II 要求使用 90天内最坏最坏状态的定义。申请评分中两种方式都可以。使用当前状态可以确保误判和由坏变好的账户不会被误判，使用最坏状态则对可能是坏的账户更加敏感。</p><p>一般情况下，当前状态的常见定义是逾期 60 天，最坏状态的定义是逾期 90天。</p><h4 id="定义设定">15.2.4 定义设定</h4><p>定义有 3 种方式：</p><ul><li>共识 - 内部专家经验判断。</li><li>规定 -由外部机构设定，确保一致性。（这个主要是方便供别人参考吧）</li><li>经验（原文应该是 experience，我个人觉得翻译成<strong>历史</strong>更合适） -根据自身的历史数据实证分析。提到了滚动率分析，不过并没有讲具体怎么做。</li></ul><h4 id="好坏定义标准">15.2.5 好坏定义标准</h4><p>讲到好坏定义需要符合 3个特点：<strong>相关、充足、透明。</strong></p><h3 id="时间窗口">15.3 时间窗口</h3><p>时间窗口组成有一些相关概念，这里讲到了：</p><ul><li>观测（ observation ） - 指对数据进行观测，作为预测变量。</li><li>结果（ outcome ） - 指分析数据观测的结果，确定目标。</li><li>日期/月份 - 指信息采集的时间。</li><li>窗口（ window ） - 指一段时间。</li></ul><p>这些概念的组合就跟时间窗口有很密切的关系了：</p><ul><li><p>观测期（ observation window ） -也叫观察期，指观测点之前的一段时间。</p></li><li><p>观测日期（ observation date ） -也叫观测点，位于观测期与表现期之间，指采集数据的日期。</p></li><li><p>结果期 （ outcome window ） -也叫表现期，客户表现趋于成熟的时间段。</p></li><li><p>结果日期（ outcome date ） - 指同一样本表现结果的日期。</p></li></ul><p>这两个窗口非常重要，<strong>观测期用于收集用户数据</strong>，例如银行流水等信息，<strong>观测期太短可能会导致变量预测效果不佳</strong>；<strong>表现期用于评价模型的标签（Y）多久之后趋于稳定</strong>，随着时间的累加，违约率会增加但是边际增长率降低，<strong>表现期太短可能会存在坏客户风险暴露不充分这样的情况</strong>。在选择合适的观测期与表现期时，需要考虑<strong>账户成熟、样本信息缺失、数据老化</strong>三个因素。</p><h3 id="样本设计">15.4 样本设计</h3><h4 id="样本类型">15.4.1 样本类型</h4><h4 id="最大和最小样本量">15.4.2 最大和最小样本量</h4><h4 id="分层随机抽样">15.4.3 分层随机抽样</h4><h3 id="小结-13">15.5 小结</h3><h1 id="第五部分---评分卡开发">第五部分 - 评分卡开发</h1><h2 id="第-16-章---变量转换">第 16 章 - 变量转换</h2><h3 id="转换方法">16.1 转换方法</h3><h4 id="虚拟变量">16.1.1 虚拟变量</h4><h4 id="风险变量">16.1.2 风险变量</h4><h4 id="方法选择">16.1.3 方法选择</h4><h3 id="粗细分类">16.2 粗细分类</h3><h4 id="特征分析报告-1">16.2.1 特征分析报告</h4><h4 id="细分类">16.2.2 细分类</h4><h4 id="粗分类">16.2.3 粗分类</h4><h3 id="统计量的应用">16.3 统计量的应用</h3><h4 id="预测能力测度">16.3.1 预测能力测度</h4><h4 id="粗分类例子">16.3.2 粗分类例子</h4><h3 id="池化算法">16.4 池化算法</h3><h4 id="非邻池化">16.4.1 非邻池化</h4><h4 id="相邻池化">16.4.2 相邻池化</h4><h4 id="单调相邻池化">16.4.3 单调相邻池化</h4><h3 id="实际案例">16.5 实际案例</h3><h4 id="法院判决">16.5.1 法院判决</h4><h4 id="行业种类">16.5.2 行业种类</h4><h4 id="职业种类">16.5.3 职业种类</h4><h3 id="小结-14">16.6 小结</h3><h2 id="第-17-章---特征选取">第 17 章 - 特征选取</h2><h3 id="参考因素">17.1 参考因素</h3><h3 id="预测能力">17.2 预测能力</h3><h3 id="降维方法">17.3 降维方法</h3><h4 id="建模处理">17.3.1 建模处理</h4><h4 id="相关矩阵">17.3.2 相关矩阵</h4><h4 id="因子分析-1">17.3.3 因子分析</h4><h3 id="变量输入">17.4 变量输入</h3><h4 id="分步">17.4.1 分步</h4><h4 id="分块">17.4.2 分块</h4><h3 id="小结-15">17.5 小结</h3><h2 id="第-18-章---样本分层">第 18 章 - 样本分层</h2><h3 id="驱动因素">18.1 驱动因素</h3><h3 id="识别交叉的作用">18.2 识别交叉的作用</h3><h3 id="处理交叉的作用">18.3 处理交叉的作用</h3><h3 id="小结-16">18.4 小结</h3><h2 id="第-19-章---拒绝推断">第 19 章 - 拒绝推断</h2><h3 id="推断原理">19.1 推断原理</h3><h3 id="总体流动">19.2 总体流动</h3><h3 id="表现赋值">19.3 表现赋值</h3><h3 id="特殊类别">19.4 特殊类别</h3><h3 id="推断方法">19.5 推断方法</h3><h4 id="随机补充">19.5.1 随机补充</h4><h4 id="展开法">19.5.2 展开法</h4><h4 id="外推法">19.5.3 外推法</h4><h4 id="同生表现法">19.5.4 同生表现法</h4><h3 id="小结-17">19.6 小结</h3><h2 id="第-20-章---模型校准">第 20 章 - 模型校准</h2><h3 id="分数分段">20.1 分数分段</h3><h4 id="ch-统计量">20.1.1 CH 统计量</h4><h4 id="基准方法">20.1.2 基准方法</h4><h4 id="边际风险边界">20.1.3 边际风险边界</h4><h3 id="线性变换">20.2 线性变换</h3><h4 id="线性变动">20.2.1 线性变动</h4><h4 id="比率缩放">20.2.2 比率缩放</h4><h3 id="线性规划重构">20.3 线性规划重构</h3><h3 id="小结-18">20.4 小结</h3><h2 id="第-21-章---检验交付">第 21 章 - 检验交付</h2><h3 id="组成成分">21.1 组成成分</h3><h4 id="开发依据">21.1.1 开发依据</h4><h4 id="持续检验">21.1.2 持续检验</h4><h4 id="回溯测试">21.1.3 回溯测试</h4><h3 id="差别效果">21.2 差别效果</h3><h3 id="小结-19">21.3 小结</h3><h2 id="第-22-章---开发管理">第 22 章 - 开发管理</h2><h3 id="进程安排">22.1 进程安排</h3><h3 id="高效操作">22.2 高效操作</h3><h4 id="重复利用">22.2.1 重复利用</h4><h4 id="重新建模">22.2.2 重新建模</h4><h3 id="小结-20">22.3 小结</h3><h1 id="第六部分---实施和使用">第六部分 - 实施和使用</h1><h2 id="第-23-章---实施安装">第 23 章 - 实施安装</h2><h3 id="自动化决策">23.1 自动化决策</h3><h4 id="自动化程度">23.1.1 自动化程度</h4><h4 id="职责">23.1.2 职责</h4><h4 id="员工沟通">23.1.3 员工沟通</h4><h4 id="客户教育">23.1.4 客户教育</h4><h3 id="安装和测试">23.2 安装和测试</h3><h4 id="数据资源和切换">23.2.1 数据、资源和切换</h4><h4 id="测试">23.2.2 测试</h4><h3 id="小结-21">23.3 小结</h3><h2 id="第-24-章---管理控制">第 24 章 - 管理控制</h2><h3 id="政策规则">24.1 政策规则</h3><h3 id="撤销">24.2 撤销</h3><h3 id="移交">24.3 移交</h3><h4 id="信息验证">24.3.1 信息验证</h4><h4 id="账户情况">24.3.2 账户情况</h4><h3 id="控制">24.4 控制</h3><h4 id="竞争环境">24.4.1 竞争环境</h4><h4 id="评分及策略控制">24.4.2 评分及策略控制</h4><h4 id="撤销控制">24.4.3 撤销控制</h4><h3 id="小结-22">24.5 小结</h3><h2 id="第-25-章---跟踪监控">第 25 章 - 跟踪监控</h2><h3 id="组合分析">25.1 组合分析</h3><h4 id="逾期分布">25.1.1 逾期分布</h4><h4 id="转移矩阵">25.1.2 转移矩阵</h4><h3 id="表现跟踪">25.2 表现跟踪</h3><h4 id="模型表现">25.2.1 模型表现</h4><h4 id="账龄分析">25.2.2 账龄分析</h4><h4 id="分数错配">25.2.3 分数错配</h4><h3 id="偏移报告">25.3 偏移报告</h3><h4 id="总体稳定性报告">25.3.1 总体稳定性报告</h4><h4 id="分数偏移报告">25.3.2 分数偏移报告</h4><h4 id="特征分析">25.3.3 特征分析</h4><h3 id="选择过程">25.4 选择过程</h3><h4 id="决策过程">25.4.1 决策过程</h4><h4 id="分数决策">25.4.2 分数决策</h4><h4 id="政策规则-1">25.4.3 政策规则</h4><h4 id="人为撤销">25.4.4 人为撤销</h4><h3 id="小结-23">25.5 小结</h3><h2 id="第-26-章---金融财务">第 26 章 - 金融财务</h2><h3 id="坏账准备">26.1 坏账准备</h3><h3 id="直接损失估计">26.2 直接损失估计</h3><h4 id="净流量法">26.2.1 净流量法</h4><h4 id="转移矩阵法">26.2.2 转移矩阵法</h4><h3 id="损失估计">26.3 损失估计</h3><h4 id="损失概率">26.3.1 损失概率</h4><h4 id="损失程度">26.3.2 损失程度</h4><h4 id="预测分析">26.3.3 预测分析</h4><h3 id="利润模型">26.4 利润模型</h3><h4 id="利润来源">26.4.1 利润来源</h4><h4 id="利润决策">26.4.2 利润决策</h4><h4 id="利润评分">26.4.3 利润评分</h4><h3 id="风险定价">26.5 风险定价</h3><h4 id="理论实践">26.5.1 理论实践</h4><h4 id="行为变化">26.5.2 行为变化</h4><h4 id="战略考虑">26.5.3 战略考虑</h4><h4 id="客户影响">26.5.4 客户影响</h4><h3 id="小结-24">26.6 小结</h3><h1 id="第七部分---信用风险管理周期">第七部分 - 信用风险管理周期</h1><h2 id="第-27-章---市场营销">第 27 章 - 市场营销</h2><h3 id="广告媒体">27.1 广告媒体</h3><h3 id="数量与质量">27.2 数量与质量</h3><h3 id="初步筛选">27.3 初步筛选</h3><h3 id="市场数据">27.4 市场数据</h3><h3 id="小结-25">27.5 小结</h3><h2 id="第-28-章---申请审批">第 28 章 - 申请审批</h2><h3 id="收集潜在客户信息">28.1 收集潜在客户信息</h3><h4 id="获取申请信息">28.1.1 获取申请信息</h4><h4 id="纸质数据采集">28.1.2 纸质数据采集</h4><h4 id="初筛和清洗">28.1.3 初筛和清洗</h4><h3 id="策略分类">28.2 策略分类</h3><h3 id="决策执行">28.3 决策执行</h3><h4 id="拒绝">28.3.1 拒绝</h4><h4 id="接受">28.3.2 接受</h4><h3 id="小结-26">28.4 小结</h3><h2 id="第-29-章---账户管理">第 29 章 - 账户管理</h2><h3 id="额度类型">29.1 额度类型</h3><h3 id="超额管理">29.2 超额管理</h3><h4 id="支票账户">29.2.1 支票账户</h4><h4 id="信用卡授权">29.2.2 信用卡授权</h4><h4 id="客户知情效应">29.2.3 客户知情效应</h4><h3 id="更多限额和其他功能">29.3 更多限额和其他功能</h3><h4 id="提额请求">29.3.1 提额请求</h4><h4 id="提高额度">29.3.2 提高额度</h4><h4 id="额度复核">29.3.3 额度复核</h4><h4 id="交叉销售">29.3.4 交叉销售</h4><h4 id="重获客户">29.3.5 重获客户</h4><h3 id="小结-27">29.4 小结</h3><h2 id="第-30-章---催收回收">第 30 章 - 催收回收</h2><h3 id="概述">30.1 概述</h3><h3 id="时机策略">30.2 时机策略</h3><h3 id="催收评分">30.3 催收评分</h3><h3 id="小结-28">30.4 小结</h3><h2 id="第-31-章---欺诈防范">第 31 章 - 欺诈防范</h2><h3 id="欺诈类型">31.1 欺诈类型</h3><h3 id="欺诈侦测工具">31.2 欺诈侦测工具</h3><h3 id="欺诈防范策略">31.3 欺诈防范策略</h3><h3 id="欺诈评分">31.4 欺诈评分</h3><h3 id="小结-29">31.5 小结</h3><h1 id="第八部分---监管环境">第八部分 - 监管环境</h1><h2 id="第-32-章---监管理念">第 32 章 - 监管理念</h2><h3 id="最佳实践">32.1 最佳实践</h3><h3 id="善良治理">32.2 善良治理</h3><h3 id="商业道德和社会责任">32.3 商业道德和社会责任</h3><h3 id="合规等级">32.4 合规等级</h3><h3 id="小结-30">32.5 小结</h3><h2 id="第-33-章---隐私保护">第 33 章 - 隐私保护</h2><h3 id="背景">33.1 背景</h3><h4 id="历史概况">33.1.1 历史概况</h4><h4 id="tournier-案件">33.1.2 Tournier 案件</h4><h4 id="oecd-数据隐私指引">33.1.3 OECD 数据隐私指引</h4><h4 id="欧洲理事会公约">33.1.4 欧洲理事会公约</h4><h4 id="欧盟数据保护指令">33.1.5 欧盟数据保护指令</h4><h4 id="特殊情况">33.1.6 特殊情况</h4><h3 id="原则">33.2 原则</h3><h4 id="收集方式">33.2.1 收集方式</h4><h4 id="合理目的">33.2.2 合理目的</h4><h4 id="信息质量">33.2.3 信息质量</h4><h4 id="信息使用">33.2.4 信息使用</h4><h4 id="信息披露">33.2.5 信息披露</h4><h4 id="主体权利">33.2.6 主体权利</h4><h4 id="信息安全">33.2.7 信息安全</h4><h3 id="小结-31">33.3 小结</h3><h2 id="第-34-章---禁止歧视">第 34 章 - 禁止歧视</h2><h3 id="何为歧视">34.1 何为歧视</h3><h3 id="存疑特征">34.2 存疑特征</h3><h3 id="小结-32">34.3 小结</h3><h2 id="第-35-章---公平信贷">第 35 章 - 公平信贷</h2><h3 id="掠夺性放贷">35.1 掠夺性放贷</h3><h3 id="不负责放贷">35.2 不负责放贷</h3><h3 id="负责任放贷">35.3 负责任放贷</h3><h3 id="小结-33">35.4 小结</h3><h2 id="第-36-章---资本要求">第 36 章 - 资本要求</h2><h3 id="巴塞尔协议-i">36.1 巴塞尔协议 I</h3><h3 id="巴塞尔协议-ii">36.2 巴塞尔协议 II</h3><h4 id="标准法">36.2.1 标准法</h4><h4 id="内部评级法">36.2.2 内部评级法</h4><h4 id="风险暴露类别">36.2.3 风险暴露类别</h4><h4 id="违约定义">36.2.4 违约定义</h4><h4 id="评级意义">36.2.5 评级意义</h4><h4 id="执行问题">36.2.6 执行问题</h4><h3 id="风险加权资产的计算">36.3 风险加权资产的计算</h3><h3 id="小结-34">36.4 小结</h3><h2 id="第-37-章---了解客户">第 37 章 - 了解客户</h2><h3 id="尽职调查要求">37.1 尽职调查要求</h3><h3 id="客户身份识别要求">37.2 客户身份识别要求</h3><h2 id="第-38-章---国家差异">第 38 章 - 国家差异</h2><p>国家差异汇总表：</p><table style="width:100%;"><thead><tr class="header"><th></th><th>美国</th><th>加拿大</th><th>英国</th><th>澳大利亚</th><th>南非</th></tr></thead><tbody><tr class="odd"><td>背景情况</td><td></td><td></td><td></td><td></td><td></td></tr><tr class="even"><td>个人识别码</td><td>SSN</td><td>SIN</td><td>无</td><td>SSN</td><td>ID</td></tr><tr class="odd"><td>支付档案名称</td><td>共享信息</td><td>正面信息</td><td>白色数据 /CAIS</td><td>无</td><td>支付档案</td></tr><tr class="even"><td>负债占国民净生产总值的比例（1999）</td><td>16.1</td><td>14.4</td><td>5.7</td><td>7.7</td><td>未知</td></tr><tr class="odd"><td>征信机构</td><td></td><td></td><td></td><td></td><td></td></tr><tr class="even"><td>民营征信机构（1999）</td><td>19 世纪 90 年代</td><td>1919 年</td><td>20 世纪 60 年代</td><td>20 世纪 30 年代</td><td>1901年</td></tr><tr class="odd"><td>TransUnion</td><td>有</td><td>有</td><td>无</td><td>其他机构</td><td>有</td></tr><tr class="even"><td>Equifax</td><td>有</td><td>有</td><td>有</td><td>其他机构</td><td>无</td></tr><tr class="odd"><td>Experian</td><td>有</td><td>无</td><td>有</td><td>其他机构</td><td>有</td></tr></tbody></table><h3 id="美国">38.1 美国</h3><p>美国是最早设立法律影响信用评分的国家。</p><p><ahref="https://www.ftc.gov/legal-library/browse/statutes/fair-credit-reporting-act">《公平信用报告法》（Fair Credit Reporting Act ）</a></p><p>保证了数据的隐私和准确，限制征信机构只能用与信用相关的信息，包括正面信息。</p><p><ahref="https://www.ftc.gov/legal-library/browse/statutes/equal-credit-opportunity-act">《平等信贷机会法》（EqualCredit Opportunity Act）</a></p><p>反对消费信贷歧视，包括申请者的种族、肤色、信仰、国籍、性别、婚姻、年龄或接受公共援助资助信息。</p><p>对于年龄这个特征，只要不歧视老年人就可以使用。</p><p>贷款机构需要向被拒的申请人提供拒绝的明确原因。</p><h3 id="加拿大">38.2 加拿大</h3><h3 id="英国">38.3 英国</h3><h3 id="澳大利亚">38.4 澳大利亚</h3><h3 id="南非">38.5 南非</h3>]]></content>
    
    
    <categories>
      
      <category>Economics&amp;Finance</category>
      
      <category>RiskControl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>credit</tag>
      
      <tag>scorecard</tag>
      
      <tag>risk control</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 344 345</title>
    <link href="/2022/06/17/leetcode20220617/"/>
    <url>/2022/06/17/leetcode20220617/</url>
    
    <content type="html"><![CDATA[<h1 id="反转字符串">344. 反转字符串</h1><p>简单交换。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseString</span>(<span class="hljs-params">self, s: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-literal">None</span>:        length = <span class="hljs-built_in">len</span>(s)        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(length/<span class="hljs-number">2</span>)):            temp = s[i]            s[i] = s[length-i-<span class="hljs-number">1</span>]            s[length-i-<span class="hljs-number">1</span>] = temp</code></pre></div><h1 id="反转字符串中的元音字母">345. 反转字符串中的元音字母</h1><p>首先我们需要用<code>set</code>存储元音字母表（这里有个坑就是大写小写都要写进去），然后通过双指针，首尾指针一起往中间遍历。如果同时遇到或者同时没有遇到元音就交换并且都移动，否则只移动没有遇到元音的指针。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseVowels</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:        vovel = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;I&#x27;</span>,<span class="hljs-string">&#x27;O&#x27;</span>,<span class="hljs-string">&#x27;U&#x27;</span>&#125;        res = <span class="hljs-built_in">list</span>(s)        left = <span class="hljs-number">0</span>        right = <span class="hljs-built_in">len</span>(res) - <span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> left &lt;= right:            <span class="hljs-keyword">if</span> res[left] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> vovel <span class="hljs-keyword">and</span> res[right] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> vovel:                left += <span class="hljs-number">1</span>                right -= <span class="hljs-number">1</span>            <span class="hljs-keyword">elif</span> res[left] <span class="hljs-keyword">in</span> vovel <span class="hljs-keyword">and</span> res[right] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> vovel:                right -= <span class="hljs-number">1</span>            <span class="hljs-keyword">elif</span> res[left] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> vovel <span class="hljs-keyword">and</span> res[right] <span class="hljs-keyword">in</span> vovel:                left += <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                temp = res[left]                res[left] = res[right]                res[right] = temp                left += <span class="hljs-number">1</span>                right -= <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(res)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
      <tag>point</tag>
      
      <tag>bubble</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《消费信用模型：定价、利润与组合》 - 读书笔记</title>
    <link href="/2022/06/10/%E3%80%8A%E6%B6%88%E8%B4%B9%E4%BF%A1%E7%94%A8%E6%A8%A1%E5%9E%8B%EF%BC%9A%E5%AE%9A%E4%BB%B7%E3%80%81%E5%88%A9%E6%B6%A6%E4%B8%8E%E7%BB%84%E5%90%88%E3%80%8B/"/>
    <url>/2022/06/10/%E3%80%8A%E6%B6%88%E8%B4%B9%E4%BF%A1%E7%94%A8%E6%A8%A1%E5%9E%8B%EF%BC%9A%E5%AE%9A%E4%BB%B7%E3%80%81%E5%88%A9%E6%B6%A6%E4%B8%8E%E7%BB%84%E5%90%88%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本书集合了当前信用研究和应用面临的主要问题，从三大挑战——定价（pricing ）、利润（ profit ）与组合（ portfolio）出发，进行了详细的探讨和论述。</p><p>这些贷款机构在零售贷款中遇到的新问题三个主要的变化趋势是：</p><ul><li><p>贷款机构如何根据违约风险差异化定价。</p></li><li><p>贷款机构如何把违约评分变成利润评分。</p></li><li><p>如何不仅对单个贷款风险进行评估，还对贷款组合的风险进行评估。</p></li></ul><h1 id="消费信用和信用评分简介">1 消费信用和信用评分简介</h1><h2 id="引言消费信用的重要性和影响力">1.1引言：消费信用的重要性和影响力</h2><p>讲述信用的起源，给出消费信用贷款增长数据证明消费信用的重要性和影响力。</p><h2 id="违约信用评分的历史背景">1.2 违约信用评分的历史背景</h2><ul><li><p>申请评分 - A卡</p><p>信用评分技术诞生于 20 世纪 50年代，当时的学者认识到用来分类的<strong>统计学方法</strong>可以用来区分贷款的好坏。最初的信用评分应用于是否给新的申请者发放贷款（贷前评分-申请评分）。做法是贷款机构从以往的申请者（已知好坏）那里获取数据，建立模型，把新的申请者按违约风险高低排序。</p><p>这里也提到了最常见的风险是申请者在获得贷款后12个月内出现90天及以上的逾期，<strong>这个只是坏客户定义的一种</strong>。</p><p>根据这样的坏客户定义得到的模型分数，讲究<strong>排序正确</strong>。并提到接受申请者的合格分数（准入分数）是较为主观的选择，要权衡各项业务指标如期望利润、期望损失和市场份额等。</p></li><li><p>行为评分 - B卡</p><p>行为评分技术诞生于20世纪80年代早期，是申请评分的延伸（因为它发生于一笔贷款确定放贷开始之后，行为评分-贷中评分）。着眼于申请者的动态表现，而不单单是申请时的静态特征。</p></li></ul><h2 id="贷款机构的目标">1.3 贷款机构的目标</h2><h3 id="银行的目标">1.3.1 银行的目标</h3><p>主要目标之一是让贷款带来最多的利润，也就是需要利润率最优。 <spanclass="math display">\[profit\% = \frac{profit}{principal}\]</span>另一个目标是将贷款组合（可以理解为多笔贷款的总额）的风险回报控制在可接受的范围内。</p><p>第三个目标是扩大贷款组合的规模。</p><h3 id="贷款过程">1.3.2贷款过程</h3><ul><li><p>获得资金</p><p>通过多种途径获得资金：投资人、股东；向其他金融机构借；向储户借；用活期存款支付给储户合适的利率获得资金使用权。</p></li><li><p>建立消费贷款组合</p><p>找到借款人，管理这个贷款组合，让它产生合理的利润，使得扣除资金融资成本和其他开支后还有回报。</p></li></ul><blockquote><p>这里提到了风险定价的概念，风险定价是指利用风险信息给贷款定价（贷款利率），以增加利润。<strong>这里定价指的是定利率而不是额度。</strong></p><p>这里也提到了利润评分重点在于<strong>估计从借款人（ borrower）那里可能获得的现金流</strong>，进而估计借款人的期望价值，找到可以预测借款人利润率的因素，以及提高这一利润率的决策方式。</p></blockquote><h2 id="贷款决策的建模工具">1.4 贷款决策的建模工具</h2><p>银行借钱给客户，无论是给新申请者的信用卡、按揭贷款、个人消费贷款，还是在现有基础上提高信用额度，<strong>本质上都是决策问题</strong>。这里主要介绍了<strong>影响图（influence diagram ）</strong>和<strong>决策树（ decision tree）</strong>两种工具。</p><h3 id="影响图">1.4.1 影响图</h3><blockquote><p><a href="https://en.wikipedia.org/wiki/Influence_diagram">Influencediagram - Wikipedia</a></p></blockquote><p>一张影响图由三类节点（ node ）组成，之间由线（ arc）连接。三类节点是：</p><ul><li>决策（ 用矩形表示 ）</li><li>随机事件（ 用圆圈表示 ）</li><li>结果（ 用菱形表示 ）</li></ul><p>如果某个决策或随机事件 X 对另一个决策、随机事件或结果 Y会产生影响，就画一条 X 指向 Y 的弧线箭头，表示 X 影响 Y 。当 Y的节点不同时，具有以下三种不同的含义。</p><ul><li>Y 是一个决策，那么 X 中所包含的信息可能会改变这个决策。</li><li>Y 是一个随机事件，那么条件概率 <spanclass="math inline">\(P(Y|X)\)</span> 和非条件概率 <spanclass="math inline">\(P(Y)\)</span> 并不相同。</li><li>Y 是一个结果，那么说明该结果受到了 X 的影响。</li></ul><h3 id="消费信贷中的申请决策影响图">1.4.2消费信贷中的申请决策影响图</h3><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/%E6%A0%87%E5%87%86%E6%B6%88%E8%B4%B9%E4%BF%A1%E8%B4%B7%E7%9A%84%E5%BD%B1%E5%93%8D%E5%9B%BE.png"alt="消费信贷中的申请决策影响图" /><figcaption aria-hidden="true">消费信贷中的申请决策影响图</figcaption></figure><h3 id="决策树">1.4.3 决策树</h3><blockquote><p><a href="https://en.wikipedia.org/wiki/Decision_tree">Decision tree -Wikipedia</a></p></blockquote><p>决策树中同样有三种类型的节点：</p><ul><li>决策（用矩形表示）</li><li>随机事件（用圆圈表示）</li><li>回报（ pay off ，用每条路径末端的数值表示）</li></ul><p><strong>值得注意的是，在决策树中左边的决策或事件比右边的决策或事件先发生。正是有了这种先后关系，才不需要箭头了。</strong></p><h3 id="消费信贷决策树">1.4.4 消费信贷决策树</h3><figure><imgsrc="https://movis-blog.oss-cn-chengdu.aliyuncs.com/img/%E6%A0%87%E5%87%86%E6%B6%88%E8%B4%B9%E4%BF%A1%E8%B4%B7%E7%9A%84%E5%86%B3%E7%AD%96%E6%A0%91.png"alt="消费信贷决策树" /><figcaption aria-hidden="true">消费信贷决策树</figcaption></figure><p>假设借款人接受贷款概率 <span class="math inline">\(q\)</span>暂不影响决策。接受申请的条件是申请者的预测风险 <spanclass="math inline">\(X\)</span> （ <spanclass="math inline">\(X\)</span> 可能为高也可能为低）满足： <spanclass="math display">\[p(X)g+(1-p(X))(-l)&gt;0\]</span> 如果要考虑接受贷款的概率 <spanclass="math inline">\(q\)</span> 与每笔贷款的贷前管理费用 <spanclass="math inline">\(c\)</span> ，那么接受申请的条件变为： <spanclass="math display">\[q[p(X)g+(1-p(X))(-l)]&gt;c\]</span></p><h3 id="策略树">1.4.5 策略树</h3><h2 id="概率比率和分数">1.5 概率、比率和分数</h2><h3 id="概率和比率">1.5.1 概率和比率</h3><p>提到了三种相互关联的方法来描述好借款人的可能性：</p><ul><li>事件发生的概率（ probability ） <spanclass="math inline">\(P(good)\)</span> 。</li><li>事件发生的比率（ odds ，好坏比） <spanclass="math inline">\(odds=\frac{P(good)}{P(bad)}\)</span> 。</li><li>包含了估计事件发生比率的所需信息的分数（ score ）或指数（ index）。</li></ul><h3 id="总体比率和信息比率">1.5.2 总体比率和信息比率</h3><p><strong>这里很重要地提到了分离了总体比率和信息比率的概念，当总体样本好坏比发生变化时，信息比率不变，总体比率会变。</strong>我的理解是提到了信息比率可以用来带来排序，而并不会受行情影响。对于贷款来讲，行情变坏时，仅能保持排序不变。</p><p><strong>证据权重 WOE （ weights of evidence）的公式为：</strong><span class="math display">\[WOE=ln(odds)=ln(\frac{P(bad)}{P(good)})\]</span> 相较于原始总体比率，证据权重是具有信息 x 或分数 s的人群的好人比率的对数。WOE为正表明这个组的好人概率比全部总体要好；若为负，则表明这组比总体要差一些。</p><h3 id="分数一个充分统计量">1.5.3 分数：一个充分统计量</h3><h3 id="对数比率分数">1.5.4 对数比率分数</h3><h3 id="对数比率分数的分解">1.5.5 对数比率分数的分解</h3><h3 id="朴素-bayes-评分卡的构建">1.5.6 朴素 Bayes 评分卡的构建</h3><h3 id="分数分布">1.5.7 分数分布</h3><h2 id="分数的变换">1.6 分数的变换</h2><h3 id="缩放自然分数">1.6.1 缩放自然分数</h3><h3 id="缩放正态分布的分数">1.6.2 缩放正态分布的分数</h3><h3 id="多级评分卡">1.6.3 多级评分卡</h3><h3 id="风险率和时变分数">1.6.4 风险率和时变分数</h3><h3 id="离散时间风险概率">1.6.5 离散时间风险概率</h3><h2 id="贷款的回收和成本">1.7 贷款的回收和成本</h2><h3 id="单期贷款的回报率模型">1.7.1 单期贷款的回报率模型</h3><h3 id="单期企业债券的回报率模型">1.7.2 单期企业债券的回报率模型</h3><h3 id="消费贷款的利润率和回报率">1.7.3 消费贷款的利润率和回报率</h3><h3 id="两期回报率模型">1.7.4 两期回报率模型</h3><h3 id="多期贷款">1.7.5 多期贷款</h3><h2 id="评分卡构建的基本原理">1.8 评分卡构建的基本原理</h2><h3 id="建立评分卡的基本方法">1.8.1 建立评分卡的基本方法</h3><h3 id="拒绝推断">1.8.2 拒绝推断</h3><h3 id="行为评分">1.8.3 行为评分</h3><h3 id="数据样本">1.8.4 数据样本</h3><h3 id="数据检验和整理">1.8.5 数据检验和整理</h3><h3 id="样本细分">1.8.6 样本细分</h3><h3 id="训练和检验样本">1.8.7 训练和检验样本</h3><h3 id="剔除特征变量">1.8.8 剔除特征变量</h3><h3 id="特征粗分类">1.8.9 特征粗分类</h3><h3 id="卡方和信息统计量">1.8.10 卡方和信息统计量</h3><h3 id="粗分类生成新变量">1.8.11 粗分类生成新变量</h3><h3 id="评分卡最终形成和检验">1.8.12 评分卡最终形成和检验</h3><h2 id="逻辑回归评分卡">1.9 逻辑回归评分卡</h2><h2 id="其他建立评分卡的方法">1.10 其他建立评分卡的方法</h2><h3 id="线性回归">1.10.1 线性回归</h3><h3 id="散度最大化">1.10.2 散度最大化</h3><h3 id="线性规划">1.10.3 线性规划</h3><h3 id="分类树">1.10.4 分类树</h3><h1 id="评分系统的评估">2 评分系统的评估</h1><h2 id="评分卡质量的评估">2.1 评分卡质量的评估</h2><h3 id="交叉验证法">2.1.1 交叉验证法</h3><h3 id="自展法">2.1.2 自展法</h3><h2 id="判别能力的测量">2.2 判别能力的测量</h2><h3 id="散度与信息量">2.2.1 散度与信息量</h3><h3 id="马氏距离">2.2.2 马氏距离</h3><h3 id="ks-统计量">2.2.3 KS 统计量</h3><h3 id="d-一致性统计量与-u-统计量">2.2.4 D 一致性统计量与 U 统计量</h3><h2 id="roc-曲线和-gini-系数">2.3 ROC 曲线和 Gini 系数</h2><h3 id="gini-系数和-auroc">2.3.1 Gini 系数和 AUROC</h3><h3 id="roc-曲线与-d-统计量ks统计量的关系">2.3.2 ROC 曲线与 D统计量、KS统计量的关系</h3><h3 id="gini-系数的边界">2.3.3 Gini 系数的边界</h3><h3 id="roc-曲线和商业决策">2.3.4 ROC 曲线和商业决策</h3><h3 id="cap-曲线与准确率">2.3.5 CAP 曲线与准确率</h3><h2 id="评分卡细分对判别能力的影响">2.4 评分卡细分对判别能力的影响</h2><h3 id="样本细分对-gini-系数的影响">2.4.1 样本细分对 Gini系数的影响</h3><h3 id="样本细分对-ks-统计量的影响">2.4.2 样本细分对 KS统计量的影响</h3><h3 id="样本细分对散度的影响">2.4.3 样本细分对散度的影响</h3><h2 id="评分卡预测概率的校准">2.5 评分卡预测概率的校准</h2><h3 id="二项检验">2.5.1 二项检验</h3><h3 id="二项检验的正态近似">2.5.2 二项检验的正态近似</h3><h3 id="卡方检验">2.5.3 卡方检验</h3><h2 id="分类预测正确程度的衡量">2.6 分类预测正确程度的衡量</h2><h3 id="混淆矩阵">2.6.1 混淆矩阵</h3><h3 id="第一类错误和第二类错误敏感度和特异度">2.6.2第一类错误和第二类错误，敏感度和特异度</h3><h3 id="交换集合">2.6.3 交换集合</h3><h3 id="最小错误成本">2.6.4 最小错误成本</h3><h1 id="基于风险定价">3 基于风险定价</h1><h2 id="消费信贷中的可变定价">3.1 消费信贷中的可变定价</h2><h3 id="可变定价">3.1.1 可变定价</h3><h3 id="差异化定价">3.1.2 差异化定价</h3><h3 id="响应率和接受率">3.1.3 响应率和接受率</h3><h2 id="无风险利率响应函数和最优定价">3.2无风险利率响应函数和最优定价</h2><h3 id="无风险响应率">3.2.1 无风险响应率</h3><h3 id="弹性">3.2.2 弹性</h3><h3 id="最大支付意愿">3.2.3 最大支付意愿</h3><h3 id="常见的响应函数">3.2.4 常见的响应函数</h3><h3 id="最优定价">3.2.5 最优定价</h3><h2 id="风险响应关系逆向选择和负担能力">3.3风险响应关系，逆向选择和负担能力</h2><h3 id="风险响应关系">3.3.1 风险响应关系</h3><h3 id="逆向选择">3.3.2 逆向选择</h3><h3 id="风险响应关系和逆向选择的区别">3.3.3风险响应关系和逆向选择的区别</h3><h3 id="负担能力">3.3.4 负担能力</h3><h2 id="基于风险的响应函数和定价">3.4 基于风险的响应函数和定价</h2><h3 id="基于风险的好人概率">3.4.1 基于风险的好人概率</h3><h3 id="基于风险的最优利率">3.4.2 基于风险的最优利率</h3><h3 id="无逆向选择的最优利率">3.4.3 无逆向选择的最优利率</h3><h3 id="有逆向选择的最优利率">3.4.4 有逆向选择的最优利率</h3><h2 id="多种优惠条件下的接受概率">3.5 多种优惠条件下的接受概率</h2><h3 id="贷款的多种优惠条件">3.5.1 贷款的多种优惠条件</h3><h3 id="逻辑接受概率函数">3.5.2 逻辑接受概率函数</h3><h3 id="线性规划估计最大支付意愿">3.5.3 线性规划估计最大支付意愿</h3><h3 id="加速生命模型估计最大支付意愿">3.5.4加速生命模型估计最大支付意愿</h3><h2 id="借贷博弈定价模型">3.6 借贷博弈定价模型</h2><h1 id="利润评分和动态模型">4 利润评分和动态模型</h1><h2 id="行为评分和账户动态管理">4.1 行为评分和账户动态管理</h2><h3 id="账户管理和利润率">4.1.1 账户管理和利润率</h3><h3 id="行为分数">4.1.2 行为分数</h3><h2 id="利润评分和风险回报矩阵">4.2 利润评分和风险回报矩阵</h2><h3 id="客户层面和产品层面的评分">4.2.1 客户层面和产品层面的评分</h3><h3 id="风险回报矩阵">4.2.2 风险回报矩阵</h3><h3 id="风险回报矩阵里的最优策略">4.2.3 风险回报矩阵里的最优策略</h3><h3 id="消费行为的动态估计">4.2.4 消费行为的动态估计</h3><h2 id="账户行为的-markov-链模型">4.3 账户行为的 Markov 链模型</h2><h3 id="markov-链的定义">4.3.1 Markov 链的定义</h3><h3 id="消费信用中的-markov-链模型">4.3.2 消费信用中的 Markov链模型</h3><h3 id="markov-链的参数估计和假设检验">4.3.3 Markov链的参数估计和假设检验</h3><h3 id="markov-链模型的延伸">4.3.4 Markov 链模型的延伸</h3><h2 id="markov-的利润率决策模型">4.4 Markov 的利润率决策模型</h2><h2 id="生存分析的违约评分系统">4.5 生存分析的违约评分系统</h2><h3 id="何时违约">4.5.1 何时违约</h3><h3 id="生存分析">4.5.2 生存分析</h3><h3 id="比例风险模型">4.5.3 比例风险模型</h3><h3 id="cox-比例风险模型">4.5.4 Cox 比例风险模型</h3><h3 id="建立比例风险模型">4.5.5 建立比例风险模型</h3><h3 id="比例风险行为分数">4.5.6 比例风险行为分数</h3><h2 id="生存分析利润模型">4.6 生存分析利润模型</h2><h3 id="生存分析计算利润率">4.6.1 生存分析计算利润率</h3><h3 id="风险竞争">4.6.2 风险竞争</h3><h1 id="组合信用风险和巴塞尔协议">5 组合信用风险和巴塞尔协议</h1><h2 id="组合信用风险">5.1 组合信用风险</h2><h3 id="组合层面的度量">5.1.1 组合层面的度量</h3><h3 id="组合层面的违约概率">5.1.2 组合层面的违约概率</h3><h3 id="违约损失率和组合层面的损失">5.1.3违约损失率和组合层面的损失</h3><h2 id="经济和监管资本">5.2 经济和监管资本</h2><h3 id="资产和负债">5.2.1 资产和负债</h3><h3 id="贷款中的风险">5.2.2 贷款中的风险</h3><h3 id="监管和经济资本">5.2.3 监管和经济资本</h3><h2 id="巴塞尔资本协议概述">5.3 巴塞尔资本协议概述</h2><h3 id="历史">5.3.1 历史</h3><h3 id="期望损失意外损失监管资本和在险价值">5.3.2期望损失、意外损失、监管资本和在险价值</h3><h3 id="组合不变性">5.3.3 组合不变性</h3><h3 id="巴塞尔模型中的监管资本">5.3.4 巴塞尔模型中的监管资本</h3><h3 id="消费信用的巴塞尔方程">5.3.5 消费信用的巴塞尔方程</h3><h3 id="小结">5.3.6 小结</h3><h2 id="巴塞尔新资本协议对信用评分的影响">5.4巴塞尔新资本协议对信用评分的影响</h2><h3 id="三角关系">5.4.1 三角关系</h3><h3 id="违约的定义">5.4.2 违约的定义</h3><h3 id="时点和周期违约概率">5.4.3 时点和周期违约概率</h3><h3 id="校准">5.4.4 校准</h3><h3 id="消费贷款中的企业信用模型">5.4.5 消费贷款中的企业信用模型</h3><h3 id="违约暴露">5.4.6 违约暴露</h3><h3 id="违约损失率">5.4.7 违约损失率</h3><h2 id="监管资本和最优临界分数">5.5 监管资本和最优临界分数</h2><h3 id="个人贷款接受决策的建模">5.5.1 个人贷款接受决策的建模</h3><h3 id="给定股权资本的组合最优临界分数">5.5.2给定股权资本的组合最优临界分数</h3><h3 id="可变股权资本的组合最优临界分数">5.5.3可变股权资本的组合最优临界分数</h3><h3 id="巴塞尔协议对-roc-曲线的影响">5.5.4 巴塞尔协议对 ROC曲线的影响</h3><h2 id="消费和企业贷款组合的信用风险建模">5.6消费和企业贷款组合的信用风险建模</h2><h3 id="企业信用模型的发展">5.6.1 企业信用模型的发展</h3><h3 id="基于信誉的消费结构模型">5.6.2 基于信誉的消费结构模型</h3><h3 id="基于负担能力的消费结构模型">5.6.3基于负担能力的消费结构模型</h3><h3 id="基于风险函数的消费简约模型">5.6.4基于风险函数的消费简约模型</h3><h3 id="基于-markov-链的消费简约模型">5.6.5 基于 Markov链的消费简约模型</h3><h2 id="消费信贷组合的压力测试">5.7 消费信贷组合的压力测试</h2><h3 id="巴塞尔协议中的压力测试">5.7.1 巴塞尔协议中的压力测试</h3><h3 id="敏感分析和情景分析">5.7.2 敏感分析和情景分析</h3><h3 id="违约概率的静态压力测试方法">5.7.3违约概率的静态压力测试方法</h3><h3 id="动态相关模型">5.7.4 动态相关模型</h3><h3 id="基于模型的动态方法">5.7.5 基于模型的动态方法</h3><h3 id="lgd-和-ead-的压力测试">5.7.6 LGD 和 EAD 的压力测试</h3>]]></content>
    
    
    <categories>
      
      <category>Economics&amp;Finance</category>
      
      <category>RiskControl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>credit</tag>
      
      <tag>decision</tag>
      
      <tag>economics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 283 290 292</title>
    <link href="/2022/06/07/leetcode20220607/"/>
    <url>/2022/06/07/leetcode20220607/</url>
    
    <content type="html"><![CDATA[<h1 id="移动零">283. 移动零</h1><p>第一种就是想办法绕过测试。其实还是复制数组而非原地算法。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">moveZeroes</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-literal">None</span>:        array = []        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums:            <span class="hljs-keyword">if</span> i != <span class="hljs-number">0</span>:                array.append(i)        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(array)):            nums[i] = array[i]        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(array),<span class="hljs-built_in">len</span>(nums)):            nums[i] = <span class="hljs-number">0</span></code></pre></div><p>第二种，快慢双指针。用快指针遍历整个数组，慢指针记录不为0的元素并更改数组中此位置的值。最后在快指针遍历完后，慢指针到数组末端都是0，再填充。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">moveZeroes</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-literal">None</span>:        slow = <span class="hljs-number">0</span>        fast = <span class="hljs-number">0</span>        length = <span class="hljs-built_in">len</span>(nums)        <span class="hljs-keyword">while</span> fast&lt;length:            <span class="hljs-keyword">if</span> nums[fast] != <span class="hljs-number">0</span>:                nums[slow] = nums[fast]                fast += <span class="hljs-number">1</span>                slow += <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                fast += <span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> slow&lt;length:            nums[slow] = <span class="hljs-number">0</span>            slow += <span class="hljs-number">1</span></code></pre></div><h1 id="单词规律">290. 单词规律</h1><p>双哈希表，分为正向哈希记录<code>(pattern, string)</code>与逆向哈希记录<code>(string, pattern)</code>。值得注意的点有两个：一是正向哈希记录第一次看到的键值对，逆向哈希记录最后一次看到的键值对；二是正向哈希与逆向哈希的键值对数量应该是一样的。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wordPattern</span>(<span class="hljs-params">self, pattern: <span class="hljs-built_in">str</span>, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        dict_pos = &#123;&#125;        dict_nag = &#123;&#125;        lst_ptn = <span class="hljs-built_in">list</span>(pattern)        lst_s = s.split()        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(lst_ptn) != <span class="hljs-built_in">len</span>(lst_s):            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(lst_ptn, lst_s):            <span class="hljs-keyword">if</span> k <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> dict_pos:                dict_pos[k] = v            dict_nag[v] = k        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(dict_pos) != <span class="hljs-built_in">len</span>(dict_nag):            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> dict_pos.items():            <span class="hljs-keyword">if</span> k != dict_nag[v]:                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span></code></pre></div><h1 id="nim-游戏">292. Nim 游戏</h1><p>这是一个简单的博弈，在此模拟下博弈的过程。</p><div class="code-wrapper"><pre><code class="hljs text">1：自己拿走1块，赢。2：自己拿走2块，赢。3：自己拿走3块，赢。4：无论自己拿走多少块，都会输。因为无论自己拿多少块，对于对方来说，都是1、2、3中的一种。5：自己拿走1块，赢。构建对方4的局面，因为4时拿无论怎么都会输所以只要构造出来就赢。6：自己拿走2块，赢。构建对方4的局面，因为4时拿无论怎么都会输所以只要构造出来就赢。7：自己拿走3块，赢。构建对方4的局面，因为4时拿无论怎么都会输所以只要构造出来就赢。8：无论自己拿走多少块，都会输。因为无论自己拿多少块，对于对方来说，都是5、6、7中的一种。9：自己拿走1块，赢。构建对方8的局面，因为8时拿无论怎么都会输所以只要构造出来就赢。</code></pre></div><p>所以可以发现，当桌上还剩4的倍数的石头数目时，拿的那一方一定会输。所以一开始的时候，我先手的话只要桌上石头是4的倍数就一定会输。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">canWinNim</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        <span class="hljs-keyword">return</span> n%<span class="hljs-number">4</span> != <span class="hljs-number">0</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
      <tag>point</tag>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 278</title>
    <link href="/2022/06/06/leetcode20220606/"/>
    <url>/2022/06/06/leetcode20220606/</url>
    
    <content type="html"><![CDATA[<h1 id="第一个错误的版本">278. 第一个错误的版本</h1><p>二分查找可以解决，左指针<code>left</code>记录当前正确的版本，右指针<code>right</code>记录当前错误的版本，所以当<code>right-left=1</code>时，<code>right</code>所指的就是第一个错误的版本，也就是结果。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">firstBadVersion</span>(<span class="hljs-params">self, n</span>):        left = <span class="hljs-number">0</span>        right = n        mid = (<span class="hljs-number">1</span>+n)//<span class="hljs-number">2</span>        <span class="hljs-keyword">while</span> right-left&gt;<span class="hljs-number">1</span>:            <span class="hljs-keyword">if</span> isBadVersion(mid):                right = mid            <span class="hljs-keyword">else</span>:                left = mid            mid = (left+right)//<span class="hljs-number">2</span>        <span class="hljs-keyword">return</span> right</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>point</tag>
      
      <tag>binary search</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 263 268</title>
    <link href="/2022/06/05/leetcode20220605/"/>
    <url>/2022/06/05/leetcode20220605/</url>
    
    <content type="html"><![CDATA[<h1 id="丑数">263. 丑数</h1><p>根据丑数的定义，1是第一个丑数，而且质因数只有2、3、5，就有如下代码。优化的地方就是除2可以用位运算。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isUgly</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">0</span>:            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">while</span> n%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>:            n &gt;&gt;= <span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> n%<span class="hljs-number">3</span> == <span class="hljs-number">0</span>:            n /= <span class="hljs-number">3</span>        <span class="hljs-keyword">while</span> n%<span class="hljs-number">5</span> == <span class="hljs-number">0</span>:            n /= <span class="hljs-number">5</span>        <span class="hljs-keyword">return</span> n == <span class="hljs-number">1</span></code></pre></div><h1 id="丢失的数字">268. 丢失的数字</h1><p>读题可以知道要找的那个数是在<code>[0, len(nums)]</code>里的，所以可以用<code>range</code>生成器生成一个未丢失的数组来遍历查找是否在<code>nums</code>里面确定那个丢失的数。然后发现很慢，很容易可以想到用<code>set</code>替代查找范围<code>list</code>会快一点。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">missingNumber</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:        nums_set = <span class="hljs-built_in">set</span>(nums)        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)+<span class="hljs-number">1</span>):            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> nums_set:                <span class="hljs-keyword">return</span> i</code></pre></div><p>当然像这种对应关系很容易想到<code>enumerate</code>这个<code>python</code>内置的函数，也就是用排序的方法解决。值得注意的就是，如果恰好是<code>n</code>是丢失的数字，需要最后返回一下<code>n</code>。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">missingNumber</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:        nums.sort()        <span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):            <span class="hljs-keyword">if</span> i != v:                <span class="hljs-keyword">return</span> i        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(nums)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
      <tag>math</tag>
      
      <tag>sort</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 258</title>
    <link href="/2022/06/04/leetcode20220603/"/>
    <url>/2022/06/04/leetcode20220603/</url>
    
    <content type="html"><![CDATA[<h1 id="各位相加">258. 各位相加</h1><p>简单循环，模拟题目中描述的过程逐位相加直到<code>num</code>小于10。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addDigits</span>(<span class="hljs-params">self, num: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:        <span class="hljs-keyword">while</span> num &gt;= <span class="hljs-number">10</span>:            num_str = <span class="hljs-built_in">str</span>(num)            num = <span class="hljs-built_in">sum</span>([<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> num_str])        <span class="hljs-keyword">return</span> num</code></pre></div><p>但是题目中提到了有<code>O(1)</code>时间复杂度的解法，按照题目中所描述的思路，其实第一次各位相加之后相同位数和最大的情况就是所有位上都为9。因此有：</p><div class="code-wrapper"><pre><code class="hljs text">9-&gt;999-&gt;18-&gt;9999-&gt;27-&gt;9...假设9...9(n位)-&gt;9那么9...9(n+1位)-&gt;9(n+1)=9*n+9=18-&gt;9所以假设成立</code></pre></div><p>通过数学归纳法可以发现9的倍数各位相加的最终和都是9。那么当其中一个9变成8时，其实各位相加的和就由9变成8。所以可以得：<span class="math display">\[\begin{cases}    result=0,\ when\ n=0 \\    result=9,\ when\ n\%9=0\ and\ n\neq 0 \\    result=n\%9,\ when\ n\%9\neq0\\\end{cases}\]</span></p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addDigits</span>(<span class="hljs-params">self, num: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> num==<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">9</span> <span class="hljs-keyword">if</span> num%<span class="hljs-number">9</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> num%<span class="hljs-number">9</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>recursion</tag>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 242</title>
    <link href="/2022/06/01/leetcode20220601/"/>
    <url>/2022/06/01/leetcode20220601/</url>
    
    <content type="html"><![CDATA[<h1 id="有效的字母异位词">242. 有效的字母异位词</h1><p>排序，比较两个字符串排序后是否相同。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isAnagram</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, t: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        <span class="hljs-keyword">import</span> operator        <span class="hljs-keyword">return</span> operator.eq(<span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">list</span>(s)), <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">list</span>(t)))</code></pre></div><p>哈希，用<code>dict</code>进行计数。比上一种快。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isAnagram</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, t: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        hashmap = &#123;&#125;        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashmap:                hashmap[i] = <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                hashmap[i] += <span class="hljs-number">1</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> t:            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashmap:                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>            <span class="hljs-keyword">else</span>:                hashmap[i] -= <span class="hljs-number">1</span>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> hashmap.values():            <span class="hljs-keyword">if</span> v != <span class="hljs-number">0</span>:                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 228 231</title>
    <link href="/2022/05/29/leetcode20220529/"/>
    <url>/2022/05/29/leetcode20220529/</url>
    
    <content type="html"><![CDATA[<h1 id="汇总区间">228. 汇总区间</h1><p>双指针 <code>start</code> 和 <code>end</code>，开始遍历数组，每次循环找到一组可以被添加的值，注意下里循环条件就好。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">summaryRanges</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:        res = []        start = <span class="hljs-number">0</span>        length = <span class="hljs-built_in">len</span>(nums)        <span class="hljs-keyword">while</span> start &lt; length:            end = start            <span class="hljs-keyword">while</span> end &lt; length-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (nums[end+<span class="hljs-number">1</span>]-nums[end])==<span class="hljs-number">1</span>:                end += <span class="hljs-number">1</span>            <span class="hljs-keyword">if</span> start == end:                res.append(<span class="hljs-built_in">str</span>(nums[start]))            <span class="hljs-keyword">else</span>:                res.append(<span class="hljs-built_in">str</span>(nums[start])+<span class="hljs-string">&#x27;-&gt;&#x27;</span>+<span class="hljs-built_in">str</span>(nums[end]))            start = end+<span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> res</code></pre></div><h1 id="的幂">231. 2 的幂</h1><p>先来个 c 的幂的万能解法，就是在定义域（但是必须是正整数）内 c的幂的最大值设为 <span class="math inline">\(x\)</span> ，必有 <spanclass="math inline">\(x\%c=0\)</span>，其实就是判断是不是最大值的约数。比如说这道题 2 的定义域内的最大值是<code>2&lt;&lt;30</code> ，就可以写成如下代码。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPowerOfTwo</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        <span class="hljs-keyword">return</span> (<span class="hljs-number">2</span>&lt;&lt;<span class="hljs-number">30</span>)%n == <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span></code></pre></div><p>当然正规军的做法是位运算。首先 2的幂的二进制表示有个规律就是所有位只有一个 1，所以可以通过查找次数是否二进制只有一个 1 来确定它是不是 2的幂。这里有个小技巧<ahref="https://movisli.github.io/posts/2022/05/19/Solution.html">LeetCode191</a> ，<code>n &amp; (n - 1)</code> 可以将最后一个 1去掉，既然只有一个 1 所以去掉之后就没有了。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPowerOfTwo</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        <span class="hljs-keyword">return</span> n &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> n &amp; (n - <span class="hljs-number">1</span>) == <span class="hljs-number">0</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>point</tag>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 217 219</title>
    <link href="/2022/05/27/leetcode20220527/"/>
    <url>/2022/05/27/leetcode20220527/</url>
    
    <content type="html"><![CDATA[<h1 id="存在重复元素">217. 存在重复元素</h1><p>简单<code>hash</code>，建立一个<code>set</code>，遍历数组，如果元素不在里面就添加，如果在里面就返回<code>True</code>。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">containsDuplicate</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">bool</span>:        hashset = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;&#x27;</span>)        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums:            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashset:                hashset.add(i)            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span></code></pre></div><h1 id="存在重复元素-ii">219. 存在重复元素 II</h1><p>这次涉及到元素还有它的下标，也是简单<code>hash</code>，不过要建立的是<code>dict</code>，<code>dict</code>的<code>key</code>是元素值，<code>dict</code>的<code>value</code>是元素下标。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">containsNearbyDuplicate</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        hashmap = &#123;&#125;        <span class="hljs-keyword">for</span> n,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):            <span class="hljs-keyword">if</span> v <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashmap:                hashmap[v] = n            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">if</span> n-hashmap[v] &lt;= k:                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>                <span class="hljs-keyword">else</span>:                    hashmap[v] = n        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 206</title>
    <link href="/2022/05/26/leetcode20220526/"/>
    <url>/2022/05/26/leetcode20220526/</url>
    
    <content type="html"><![CDATA[<h1 id="反转链表">206. 反转链表</h1><p>常见的用栈反转。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><span class="hljs-comment"># class ListNode:</span><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><span class="hljs-comment">#         self.val = val</span><span class="hljs-comment">#         self.next = next</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseList</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:        stack = []        node = head        <span class="hljs-keyword">while</span> node:            stack.append(node.val)            node = node.<span class="hljs-built_in">next</span>        res = ListNode()        node = res        <span class="hljs-keyword">while</span> stack:            node.<span class="hljs-built_in">next</span> = ListNode(stack.pop())            node = node.<span class="hljs-built_in">next</span>        <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">next</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 203 205</title>
    <link href="/2022/05/25/leetcode20220525/"/>
    <url>/2022/05/25/leetcode20220525/</url>
    
    <content type="html"><![CDATA[<h1 id="移除链表元素">203. 移除链表元素</h1><p>一道基础删链表节点的问题，需要注意的是头节点如果不做特殊处理就得在前面再加个新的头节点，方便头节点重复时删除。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><span class="hljs-comment"># class ListNode:</span><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><span class="hljs-comment">#         self.val = val</span><span class="hljs-comment">#         self.next = next</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeElements</span>(<span class="hljs-params">self, head: ListNode, val: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:        res = ListNode()        res.<span class="hljs-built_in">next</span> = head        node = res        <span class="hljs-keyword">while</span> node.<span class="hljs-built_in">next</span>:            <span class="hljs-keyword">if</span> node.<span class="hljs-built_in">next</span>.val == val:                node.<span class="hljs-built_in">next</span> = node.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span>            <span class="hljs-keyword">else</span>:                node = node.<span class="hljs-built_in">next</span>        <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">next</span></code></pre></div><p>也可以先对头节点进行处理，先保证头节点不是要删除的节点。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><span class="hljs-comment"># class ListNode:</span><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><span class="hljs-comment">#         self.val = val</span><span class="hljs-comment">#         self.next = next</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeElements</span>(<span class="hljs-params">self, head: ListNode, val: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:        <span class="hljs-keyword">while</span> head <span class="hljs-keyword">and</span> head.val == val:            head = head.<span class="hljs-built_in">next</span>        node = head        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node:            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>        <span class="hljs-keyword">while</span> node.<span class="hljs-built_in">next</span>:            <span class="hljs-keyword">if</span> node.<span class="hljs-built_in">next</span>.val == val:                node.<span class="hljs-built_in">next</span> = node.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span>            <span class="hljs-keyword">else</span>:                node = node.<span class="hljs-built_in">next</span>        <span class="hljs-keyword">return</span> head</code></pre></div><h1 id="同构字符串">205. 同构字符串</h1><p>分别建立正向映射关系<code>dict_forward</code>和逆向映射关系<code>dict_backward</code>，值得一提的是最好想象成正向映射是从字符串正向去建立映射关系，而逆向映射是从字符串逆向建立映射关系。否则，过不了这样的测试用例：</p><blockquote><p>"bbbaaaba"</p><p>"aaabbbba"</p></blockquote><p>这里有个技巧就是正向映射一旦建立就不可被覆盖，而逆向一直可以被覆盖。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isIsomorphic</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, t: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        dict_forward = &#123;&#125;        dict_backward = &#123;&#125;        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):            <span class="hljs-keyword">if</span> s[i] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> dict_forward:                dict_forward[s[i]] = t[i]            dict_backward[t[i]] = s[i]        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(dict_forward) != <span class="hljs-built_in">len</span>(dict_backward):            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> dict_forward.items():            <span class="hljs-keyword">if</span> dict_backward[v] != k:                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
      <tag>linked list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 202</title>
    <link href="/2022/05/24/leetcode20220524/"/>
    <url>/2022/05/24/leetcode20220524/</url>
    
    <content type="html"><![CDATA[<h1 id="快乐数">202. 快乐数</h1><p>首先简单找了下10以内的，满足快乐数定义的只有1和7。然后直接采取暴力解法，循环查找，如果当某次结果跳到10以内却不等于1或7时，就是<code>False</code>，否则就是<code>True</code>。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isHappy</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> n == <span class="hljs-number">7</span>:            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>        res = n        <span class="hljs-keyword">while</span> res&gt;=<span class="hljs-number">10</span>:            temp = <span class="hljs-built_in">str</span>(res)            res = <span class="hljs-number">0</span>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> temp:                res += <span class="hljs-built_in">int</span>(i)**<span class="hljs-number">2</span>            <span class="hljs-keyword">if</span> res == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> res == <span class="hljs-number">7</span>:                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span></code></pre></div><p>也可以从题目中所说的无限循环入手，那么什么时候知道这个无限循环已经开始了呢，这就用到了<code>hashset</code>，当这次运算结果出现在<code>set</code>里时，说明循环已经开始了，否则我们把这次结果加入<code>set</code>。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isHappy</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        hashset = &#123;n&#125;        <span class="hljs-keyword">while</span> n!=<span class="hljs-number">1</span>:            temp = <span class="hljs-built_in">str</span>(n)            n = <span class="hljs-number">0</span>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> temp:                n += <span class="hljs-built_in">int</span>(i)**<span class="hljs-number">2</span>            <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> hashset:                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>            <span class="hljs-keyword">else</span>:                hashset.add(n)        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 191</title>
    <link href="/2022/05/19/leetcode20220519/"/>
    <url>/2022/05/19/leetcode20220519/</url>
    
    <content type="html"><![CDATA[<h1 id="位1的个数">191. 位1的个数</h1><p>首先来个循环检查每一位是否为1。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hammingWeight</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:        bin_str = <span class="hljs-built_in">bin</span>(n)[<span class="hljs-number">2</span>:]        res = <span class="hljs-number">0</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> bin_str:            <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;1&#x27;</span>:                res += <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> res</code></pre></div><p>当然显然这道题考察的是位运算，所以我们可以用位运算检查循环，逐位右移，判断最低位是不是1，python的右移运算符<code>&gt;&gt;</code>就是高位补0，低位舍去。所以移动32次，就可以得到结果。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hammingWeight</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:        res = <span class="hljs-number">0</span>        <span class="hljs-keyword">while</span> n:            res += <span class="hljs-number">1</span>            n &gt;&gt;= <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> res</code></pre></div><p>但是在位运算里，还有个神奇的做法，可以通过<code>n&amp;(n-1)</code>把二进制中最后一个1改写成0。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hammingWeight</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:        res = <span class="hljs-number">0</span>        <span class="hljs-keyword">while</span> n:            res += <span class="hljs-number">1</span>            n &amp;= n-<span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> res</code></pre></div><p>参考<ahref="https://leetcode.cn/problems/number-of-1-bits/solution/fu-xue-ming-zhu-xiang-jie-wei-yun-suan-f-ci7i/">【负雪明烛】详解位运算，附本题躲坑指南- 位1的个数 - 力扣（LeetCode）</a></p>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 190</title>
    <link href="/2022/05/18/leetcode20220518/"/>
    <url>/2022/05/18/leetcode20220518/</url>
    
    <content type="html"><![CDATA[<h1 id="颠倒二进制位">190. 颠倒二进制位</h1><p>注意下题目中的32位无符号整数。暴力解：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseBits</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(<span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">32</span>-<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(n))[<span class="hljs-number">2</span>:]))+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(n))[<span class="hljs-number">2</span>:])[::-<span class="hljs-number">1</span>], <span class="hljs-number">2</span>)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 168 171 175 181 182 183</title>
    <link href="/2022/05/16/leetcode20220516/"/>
    <url>/2022/05/16/leetcode20220516/</url>
    
    <content type="html"><![CDATA[<h1 id="excel表列名称">168. Excel表列名称</h1><p>此题有点类似进制转换，从A到Z有26个字母也就是26进制，需要注意的是，A对应1而不是0，Z对应26而不是25，所以在做进制转换的时候，要先减1再取余再加1。即下面<code>temp = (columnNumber-1)%26+1</code>这行代码。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">convertToTitle</span>(<span class="hljs-params">self, columnNumber: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:        res = <span class="hljs-string">&#x27;&#x27;</span>        <span class="hljs-keyword">while</span> columnNumber != <span class="hljs-number">0</span>:            temp = (columnNumber-<span class="hljs-number">1</span>)%<span class="hljs-number">26</span>+<span class="hljs-number">1</span>            res += <span class="hljs-built_in">chr</span>(temp+<span class="hljs-number">64</span>)            columnNumber = (columnNumber-temp)//<span class="hljs-number">26</span>        <span class="hljs-keyword">return</span> res[::-<span class="hljs-number">1</span>]</code></pre></div><h1 id="excel-表列序号">171. Excel 表列序号</h1><p>与上题差不多，上题的逆向。本质上还是个进制转换。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">titleToNumber</span>(<span class="hljs-params">self, columnTitle: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:        res = <span class="hljs-number">0</span>        n = <span class="hljs-number">1</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> columnTitle[::-<span class="hljs-number">1</span>]:            res += (<span class="hljs-built_in">ord</span>(i)-<span class="hljs-number">64</span>)*n            n *= <span class="hljs-number">26</span>        <span class="hljs-keyword">return</span> res</code></pre></div><h1 id="组合两个表">175. 组合两个表</h1><p>依题意做一个简单左链接就行了。</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECTt1.firstName,t1.lastName,t2.city,t2.state FROMPerson t1LEFT JOIN Address t2 ON t1.personId = t2.personId</code></pre></div><h1 id="超过经理收入的员工">181. 超过经理收入的员工</h1><p>表自链接就行了。</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECTl.NAME AS Employee FROMEmployee lINNER JOIN Employee r ON l.managerId = r.id WHEREl.salary &gt; r.salary</code></pre></div><h1 id="查找重复的电子邮箱">182. 查找重复的电子邮箱</h1><p>自链接</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECT DISTINCTt1.Email FROMPerson t1JOIN Person t2 ON t1.Email = t2.Email AND t1.Id != t2.Id</code></pre></div><p>子表查询</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECTEmail FROM( SELECT Email, count( 1 ) AS ec FROM Person GROUP BY Email ) tec WHEREtec.ec &gt; 1</code></pre></div><h1 id="从不订购的客户">183. 从不订购的客户</h1><p>子表查询</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECTn.NAME AS Customers FROM( SELECT t1.NAME, t2.Id FROM Customers t1 LEFT JOIN Orders t2 ON t1.Id = t2.CustomerId ) n WHEREn.id IS NULL</code></pre></div><p>子表查询和<code>NOT IN</code>语句</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECTCustomers.Name AS Customers FROMCustomers WHERECustomers.Id NOT IN ( SELECT CustomerId FROM Orders )</code></pre></div><p>右链接</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECTa.NAME AS Customers FROMCustomers aLEFT JOIN Orders b ON a.Id = b.CustomerId WHEREb.CustomerId IS NULL</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>sql</tag>
      
      <tag>ascii</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 121 125 136 169</title>
    <link href="/2022/05/15/leetcode20220515/"/>
    <url>/2022/05/15/leetcode20220515/</url>
    
    <content type="html"><![CDATA[<h1 id="买卖股票的最佳时机">121. 买卖股票的最佳时机</h1><p>遍历一次数组，更新数组的最小值<code>min_pcp</code>与当前值与数组最小值差的最大值<code>max_pft</code>。遍历完成后，当前值与数组最小值差的最大值就是交易的最大利润。<div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:  <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxProfit</span>(<span class="hljs-params">self, prices: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:    max_pft = <span class="hljs-number">0</span>    min_pcp = prices[<span class="hljs-number">0</span>]    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> prices:      <span class="hljs-keyword">if</span> i &lt; min_pcp:        min_pcp = i        <span class="hljs-keyword">continue</span>      <span class="hljs-keyword">if</span> (i-min_pcp)&gt;max_pft:        max_pft = i-min_pcp    <span class="hljs-keyword">return</span> max_pft</code></pre></div></p><h1 id="验证回文串">125. 验证回文串</h1><p>先进行数据清洗再比较。 <div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:  <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:    washed = <span class="hljs-string">&#x27;&#x27;</span>.join(ch.lower() <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> s <span class="hljs-keyword">if</span> ch.isalnum())    <span class="hljs-keyword">return</span> washed == washed[::-<span class="hljs-number">1</span>]</code></pre></div></p><h1 id="只出现一次的数字">136. 只出现一次的数字</h1><p>蠢蠢hashset。 <div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">singleNumber</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:        hashset = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;&#x27;</span>)        res = []        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums:            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashset:                res.append(i)                hashset.add(i)            <span class="hljs-keyword">else</span>:                res.remove(i)        <span class="hljs-keyword">return</span> res[<span class="hljs-number">0</span>]</code></pre></div>题中讲到了只有一个元素出现了一次，其它元素都出现了两次。两个相同的数进行异或的结果为0，所以可以对所有元素都进行异或运算，最终得到的结果就是出现一次的元素。只能说有点想不到。<div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">singleNumber</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:        <span class="hljs-keyword">return</span> reduce(<span class="hljs-keyword">lambda</span> x,y: x^y, nums)</code></pre></div></p><h1 id="多数元素">169. 多数元素</h1><p>简单粗暴，直接用字典记录每个元素出现次数，然后遍历字典，找到那个多数元素。<div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">majorityElement</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:        hashmap = &#123;&#125;        feq = <span class="hljs-built_in">len</span>(nums)/<span class="hljs-number">2</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums:            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashmap:                hashmap[i] = <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                hashmap[i] += <span class="hljs-number">1</span>        <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> hashmap.items():            <span class="hljs-keyword">if</span> v &gt; feq:                <span class="hljs-keyword">return</span> k</code></pre></div></p>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
      <tag>string</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 83 88 94 118 119</title>
    <link href="/2022/05/13/leetcode20220513/"/>
    <url>/2022/05/13/leetcode20220513/</url>
    
    <content type="html"><![CDATA[<h1 id="删除排序链表中的重复元素">83. 删除排序链表中的重复元素</h1><p>基本链表操作。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deleteDuplicates</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head:            <span class="hljs-keyword">return</span> head        node = head        <span class="hljs-keyword">while</span> node.<span class="hljs-built_in">next</span>:            <span class="hljs-keyword">if</span> node.val == node.<span class="hljs-built_in">next</span>.val:                node.<span class="hljs-built_in">next</span> = node.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span>            <span class="hljs-keyword">else</span>:                node = node.<span class="hljs-built_in">next</span>        <span class="hljs-keyword">return</span> head</code></pre></div><h1 id="合并两个有序数组">88. 合并两个有序数组</h1><p>本题要求<code>inplace</code>，但是我们仍然可以用<code>不inplace</code>的思想做<code>inplace</code>的事情。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], m: <span class="hljs-built_in">int</span>, nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:        left = <span class="hljs-number">0</span>        right = <span class="hljs-number">0</span>        res = []        <span class="hljs-keyword">while</span> (left+right)&lt;(m+n):            <span class="hljs-keyword">if</span> left&gt;=m:                res.append(nums2[right])                right += <span class="hljs-number">1</span>                <span class="hljs-keyword">continue</span>            <span class="hljs-keyword">if</span> right&gt;=n:                res.append(nums1[left])                left += <span class="hljs-number">1</span>                <span class="hljs-keyword">continue</span>            <span class="hljs-keyword">if</span> nums1[left] &lt;= nums2[right]:                res.append(nums1[left])                left += <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                res.append(nums2[right])                right += <span class="hljs-number">1</span>        nums1[:]=res</code></pre></div><p>当然我们也可以逆向开始放数，空间复杂度会更低。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], m: <span class="hljs-built_in">int</span>, nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:        tail = m+n-<span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> m&gt;=<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> n&gt;=<span class="hljs-number">1</span>:            <span class="hljs-keyword">if</span> m&lt;<span class="hljs-number">1</span>:                nums1[tail] = nums2[n-<span class="hljs-number">1</span>]                tail -= <span class="hljs-number">1</span>                n -= <span class="hljs-number">1</span>                <span class="hljs-keyword">continue</span>            <span class="hljs-keyword">if</span> n&lt;<span class="hljs-number">1</span>:                <span class="hljs-keyword">break</span>            <span class="hljs-keyword">if</span> nums1[m-<span class="hljs-number">1</span>] &gt;= nums2[n-<span class="hljs-number">1</span>]:                nums1[tail] = nums1[m-<span class="hljs-number">1</span>]                m -= <span class="hljs-number">1</span>                tail -= <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                nums1[tail] = nums2[n-<span class="hljs-number">1</span>]                n -= <span class="hljs-number">1</span>                tail -= <span class="hljs-number">1</span></code></pre></div><h1 id="二叉树的中序遍历">94. 二叉树的中序遍历</h1><p>递归：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inorderTraversal</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:        res = []        <span class="hljs-keyword">if</span> root:            res.extend(self.inorderTraversal(root.left))            res.append(root.val)            res.extend(self.inorderTraversal(root.right))        <span class="hljs-keyword">return</span> res</code></pre></div><p>非递归：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inorderTraversal</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:        res = []        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:            <span class="hljs-keyword">return</span> res        node = root        stack = []        <span class="hljs-keyword">while</span> node <span class="hljs-keyword">or</span> stack:            <span class="hljs-keyword">if</span> node:                stack.append(node)                node = node.left            <span class="hljs-keyword">else</span>:                node = stack.pop()                res.append(node.val)                node = node.right        <span class="hljs-keyword">return</span> res</code></pre></div><h1 id="杨辉三角">118. 杨辉三角</h1><p>就按照杨辉三角的样子，从第三行开始，除了左右两个1，其他数等于上一行的邻近两个数的和。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">self, numRows: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:        <span class="hljs-keyword">if</span> numRows == <span class="hljs-number">1</span>:            <span class="hljs-keyword">return</span> [[<span class="hljs-number">1</span>]]        res = [[<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]]        curRow = <span class="hljs-number">2</span>        <span class="hljs-keyword">while</span> curRow&lt;numRows:            temp = [<span class="hljs-number">1</span>]            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(res[curRow-<span class="hljs-number">1</span>])-<span class="hljs-number">1</span>):                temp.append(res[curRow-<span class="hljs-number">1</span>][i]+res[curRow-<span class="hljs-number">1</span>][i+<span class="hljs-number">1</span>])            temp.append(<span class="hljs-number">1</span>)            res.append(temp)            curRow += <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> res</code></pre></div><h1 id="杨辉三角-ii">119. 杨辉三角 II</h1><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getRow</span>(<span class="hljs-params">self, rowIndex: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:        res = [<span class="hljs-number">1</span>]        cal_num = (rowIndex)//<span class="hljs-number">2</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, cal_num+<span class="hljs-number">1</span>, <span class="hljs-number">1</span>):            res.append(<span class="hljs-built_in">int</span>(res[i-<span class="hljs-number">1</span>]*(rowIndex-i+<span class="hljs-number">1</span>)/i))        <span class="hljs-keyword">if</span> rowIndex%<span class="hljs-number">2</span> != <span class="hljs-number">0</span>:            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(cal_num,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):                res.append(res[i])        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(cal_num-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):                res.append(res[i])        <span class="hljs-keyword">return</span> res</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>linked list</tag>
      
      <tag>array</tag>
      
      <tag>binary tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 70</title>
    <link href="/2022/05/11/leetcode20220511/"/>
    <url>/2022/05/11/leetcode20220511/</url>
    
    <content type="html"><![CDATA[<h1 id="爬楼梯">70. 爬楼梯</h1><p>斐波那契数列，一个数等于他上一个数和上上的数的和。分为递归解和非递归解，如果有空间限制可以把列表看作一个栈。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">climbStairs</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:        lst = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n-<span class="hljs-number">1</span>):            lst.append(lst[i]+lst[i+<span class="hljs-number">1</span>])        <span class="hljs-keyword">return</span> lst[n]</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>stack</tag>
      
      <tag>recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 66 67 69</title>
    <link href="/2022/05/10/leetcode20220510/"/>
    <url>/2022/05/10/leetcode20220510/</url>
    
    <content type="html"><![CDATA[<h1 id="加一">66. 加一</h1><p>从后往前加就行了，需要用一个<code>carry flag</code>控制是否进位，加一对末位来说就是进位的，所以当<code>carry flag</code>变为<code>False</code>时，跳出循环。如果循环走完还需进位，则需要在<code>list</code>第0个位置增添个元素1。但是实际上因为<code>return</code>的位置可以放得巧妙点，所以可以省略<code>flag</code>。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">plusOne</span>(<span class="hljs-params">self, digits: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(digits)-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):            digits[i] += <span class="hljs-number">1</span>            <span class="hljs-keyword">if</span> digits[i] &gt;= <span class="hljs-number">10</span>:                digits[i] -= <span class="hljs-number">10</span>            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">return</span> digits        <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>] + digits</code></pre></div><h1 id="二进制求和">67.二进制求和</h1><p>直接用内置函数就行了。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addBinary</span>(<span class="hljs-params">self, a: <span class="hljs-built_in">str</span>, b: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(a,<span class="hljs-number">2</span>)+<span class="hljs-built_in">int</span>(b,<span class="hljs-number">2</span>)))[<span class="hljs-number">2</span>:]</code></pre></div><h1 id="x-的平方根">69. x 的平方根</h1><p>牛顿迭代法：</p><p>为了方便区别问题写为求n的平方根，即 <span class="math display">\[x^2=n\\f(x)=x^2-n\]</span> 相当于求函数<spanclass="math inline">\(f(x)\)</span>的根，关于牛顿迭代的原理参照</p><blockquote><p><ahref="https://www.zhihu.com/question/20690553/answer/146104283">如何通俗易懂地讲解牛顿迭代法求开方（数值分析）？</a></p></blockquote><p>对<span class="math inline">\(x_0\)</span>点的切线为： <spanclass="math display">\[y = f(x_0)-2x_0(x-x0)\]</span> 令<span class="math inline">\(y=0\)</span>，迭代后的<spanclass="math inline">\(x_1\)</span>点值可算得： <spanclass="math display">\[x_1=x_0-\frac{x_0}{2}+\frac{n}{2x_0}\]</span> 每次迭代的误差为： <span class="math display">\[\varepsilon = |x0-x1|\]</span> 当误差小于0.1时跳出就行了。</p><p><strong>初值不能为0。</strong></p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mySqrt</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:        res = <span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            last = res            res = res - res/<span class="hljs-number">2</span> + x/<span class="hljs-number">2</span>/res            <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(last-res) &lt; <span class="hljs-number">1</span>:                <span class="hljs-keyword">break</span>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(res)</code></pre></div><p>二分查找：</p><p><span class="math inline">\(x\)</span>的平方根整数部分是满足<spanclass="math inline">\(k^2\leq x\)</span>的最大<spanclass="math inline">\(k\)</span>值，所以只要保证这个条件可以进行赋值。经典二分查找代码。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mySqrt</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:        left, right, res = <span class="hljs-number">0</span>, x, -<span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> left &lt;= right:            mid = (left+right)//<span class="hljs-number">2</span>            <span class="hljs-keyword">if</span> mid*mid &lt;= x:                res = mid                left = mid+<span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                right = mid-<span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> res</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>binary search</tag>
      
      <tag>loop</tag>
      
      <tag>Newton&#39;s method</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 58</title>
    <link href="/2022/05/09/leetcode20220509/"/>
    <url>/2022/05/09/leetcode20220509/</url>
    
    <content type="html"><![CDATA[<h1 id="最后一个单词的长度">58. 最后一个单词的长度</h1><p>反向遍历，用一个<code>flag</code>稍微控制下流程就行了，注意几个<code>if</code>的顺序。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLastWord</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:        res = <span class="hljs-number">0</span>        start = <span class="hljs-literal">False</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):            <span class="hljs-keyword">if</span> s[i] != <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> start:                start = <span class="hljs-literal">True</span>            <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-keyword">and</span> start:                <span class="hljs-keyword">break</span>            <span class="hljs-keyword">if</span> start:                res += <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> res</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 27 28 35 53</title>
    <link href="/2022/05/07/leetcode20220507/"/>
    <url>/2022/05/07/leetcode20220507/</url>
    
    <content type="html"><![CDATA[<h1 id="移除元素">27. 移除元素</h1><p>双指针，一个指针<code>index</code>控制循环遍历，另一个指针<code>k</code>控制将正确的数填到正确的位置。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeElement</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], val: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:        index = <span class="hljs-number">0</span>        k = <span class="hljs-number">0</span>        length = <span class="hljs-built_in">len</span>(nums)        <span class="hljs-keyword">while</span> index&lt;length:            <span class="hljs-keyword">if</span> nums[index] != val:                nums[k] = nums[index]                k+=<span class="hljs-number">1</span>            index += <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> k</code></pre></div><h1 id="实现strstr">28. 实现strStr()</h1><p>只是用的话，调用python字符串的find函数就行了。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">strStr</span>(<span class="hljs-params">self, haystack: <span class="hljs-built_in">str</span>, needle: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:        <span class="hljs-keyword">return</span> haystack.find(needle)</code></pre></div><p>思路就是逐位比较。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">strStr</span>(<span class="hljs-params">self, haystack: <span class="hljs-built_in">str</span>, needle: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:        length = <span class="hljs-built_in">len</span>(needle)        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(haystack)-length+<span class="hljs-number">1</span>):            j = i            k = <span class="hljs-number">0</span>            <span class="hljs-keyword">while</span> k&lt;length <span class="hljs-keyword">and</span> haystack[j] == needle[k]:                j += <span class="hljs-number">1</span>                k += <span class="hljs-number">1</span>            <span class="hljs-keyword">if</span> j-i == length:                <span class="hljs-keyword">return</span> i                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span></code></pre></div><h1 id="搜索插入位置">35. 搜索插入位置</h1><p>时间复杂度<code>O(log n)</code>，经典二分查找。但是这题如果没找到要返回插入的位置，当<span class="math inline">\(left&lt;x&lt;right\)</span>时，很明显该插入的位置是<code>right_index</code>，然后看一下经典二分查找代码，因为没找到的话<code>left</code>还是会加1，所以其实没找到的话<code>left</code>就是<code>right_index</code>，所以没找到返回<code>left</code>。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">searchInsert</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:        left = <span class="hljs-number">0</span>        right = <span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> left&lt;=right:            mid = (right+left)//<span class="hljs-number">2</span>            <span class="hljs-keyword">if</span> nums[mid] &lt; target:                left = mid+<span class="hljs-number">1</span>            <span class="hljs-keyword">elif</span> nums[mid] &gt; target:                right = mid-<span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">return</span> mid                <span class="hljs-keyword">return</span> left</code></pre></div><h1 id="最大子数组和">53. 最大子数组和</h1><p>动态规划，首先数组里至少有一个数，那么最大子数组和肯定大于等于<code>nums[0]</code>，然后从左往右遍历，创建一个变量<code>temp_sum</code>用于记录遍历过程中某一段的最大和，如果此值大于0那么往后的数还可以在此值上加，如果小于等于0那对某一段的下一段来讲算最大和时就不太需要这个<code>temp_sum</code>了。每找出一段<code>temp_sum</code>都与<code>result</code>比较取大的作为新的<code>result</code>。遍历完成后，就可以得到最大的<code>result</code>。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxSubArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:        res = nums[<span class="hljs-number">0</span>]        temp_sum = <span class="hljs-number">0</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums:            temp_sum += i            <span class="hljs-keyword">if</span> temp_sum &gt; res:                res = temp_sum            <span class="hljs-keyword">if</span> temp_sum &lt; <span class="hljs-number">0</span>:                temp_sum = <span class="hljs-number">0</span>                <span class="hljs-keyword">return</span> res</code></pre></div><blockquote><p>时间复杂度 O(n)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>point</tag>
      
      <tag>binary search</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 26</title>
    <link href="/2022/05/06/leetcode20220506/"/>
    <url>/2022/05/06/leetcode20220506/</url>
    
    <content type="html"><![CDATA[<h1 id="删除有序数组中的重复项">26. 删除有序数组中的重复项</h1><p>暴力解法，创建<code>set</code>用于记录出现过的唯一元素，创建<code>drop_lst</code>用于记录要删的位置，删元素的时候注意下<code>python</code>的<code>del</code>会更改后续元素的下标，所以建立一个<code>k</code>辅助找到真正的下标再删。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeDuplicates</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:        hashset = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;&#x27;</span>)        drop_lst = []        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):            <span class="hljs-keyword">if</span> nums[i] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashset:                hashset.add(nums[i])            <span class="hljs-keyword">else</span>:                drop_lst.append(i)        k = <span class="hljs-number">0</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> drop_lst:            <span class="hljs-keyword">del</span> nums[i-k]            k += <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(hashset)</code></pre></div><blockquote><p>1068 ms</p></blockquote><p>核心在于前探指针，每次循环时生成一个前探指针<code>next_index</code>找寻下一个不重复的元素的<code>index</code>，用指针<code>k</code>代表下一个不重复元素（假如有）正确的位置，所以在找到正确的<code>next_index</code>后，将其赋值给<code>k</code>就行了，同时将<code>index</code>变为<code>next_index</code>，最后返回<code>k-1</code>因为多算了一次<code>k</code>。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeDuplicates</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:        index = <span class="hljs-number">0</span>        length = <span class="hljs-built_in">len</span>(nums)        k = <span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> index &lt; length:            next_index = index+<span class="hljs-number">1</span>            <span class="hljs-keyword">while</span> next_index&lt;length:                <span class="hljs-keyword">if</span> nums[next_index] != nums[index]:                    <span class="hljs-keyword">break</span>                next_index += <span class="hljs-number">1</span>            <span class="hljs-keyword">if</span> next_index != length:                nums[k] = nums[next_index]            k += <span class="hljs-number">1</span>            index = next_index        <span class="hljs-keyword">return</span> k-<span class="hljs-number">1</span></code></pre></div><blockquote><p>28 ms</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>point</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 13</title>
    <link href="/2022/05/05/leetcode20220505/"/>
    <url>/2022/05/05/leetcode20220505/</url>
    
    <content type="html"><![CDATA[<h1 id="罗马数字转整数">13. 罗马数字转整数</h1><p>比较直接的解法，一个指针指当前位，另一个指针指下一位。如果当前位和下一位凑成了4、9等数，就在结果中加上，然后当前指针指向下下位。如果当前位和下一位没有凑成特殊情况，就在结果中加上当前位的数，并把当前位指针指向下一位。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">romanToInt</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:        res = <span class="hljs-number">0</span>        s_len = <span class="hljs-built_in">len</span>(s)        index = <span class="hljs-number">0</span>        <span class="hljs-keyword">while</span> index&lt;s_len:            <span class="hljs-keyword">if</span> s[index] == <span class="hljs-string">&#x27;I&#x27;</span>:                next_index = index+<span class="hljs-number">1</span>                <span class="hljs-keyword">if</span> next_index &lt; s_len:                    <span class="hljs-keyword">if</span> s[next_index] == <span class="hljs-string">&#x27;V&#x27;</span>:                        res += <span class="hljs-number">4</span>                        index += <span class="hljs-number">2</span>                    <span class="hljs-keyword">elif</span> s[next_index] == <span class="hljs-string">&#x27;X&#x27;</span>:                        res += <span class="hljs-number">9</span>                        index += <span class="hljs-number">2</span>                    <span class="hljs-keyword">else</span>:                        res += <span class="hljs-number">1</span>                        index += <span class="hljs-number">1</span>                <span class="hljs-keyword">else</span>:                    res += <span class="hljs-number">1</span>                    index += <span class="hljs-number">1</span>            <span class="hljs-keyword">elif</span> s[index] == <span class="hljs-string">&#x27;X&#x27;</span>:                next_index = index+<span class="hljs-number">1</span>                <span class="hljs-keyword">if</span> next_index &lt; s_len:                    <span class="hljs-keyword">if</span> s[next_index] == <span class="hljs-string">&#x27;L&#x27;</span>:                        res += <span class="hljs-number">40</span>                        index += <span class="hljs-number">2</span>                    <span class="hljs-keyword">elif</span> s[next_index] == <span class="hljs-string">&#x27;C&#x27;</span>:                        res += <span class="hljs-number">90</span>                        index += <span class="hljs-number">2</span>                    <span class="hljs-keyword">else</span>:                        res += <span class="hljs-number">10</span>                        index += <span class="hljs-number">1</span>                <span class="hljs-keyword">else</span>:                    res += <span class="hljs-number">10</span>                    index += <span class="hljs-number">1</span>            <span class="hljs-keyword">elif</span> s[index] == <span class="hljs-string">&#x27;C&#x27;</span>:                next_index = index+<span class="hljs-number">1</span>                <span class="hljs-keyword">if</span> next_index &lt; s_len:                    <span class="hljs-keyword">if</span> s[next_index] == <span class="hljs-string">&#x27;D&#x27;</span>:                        res += <span class="hljs-number">400</span>                        index += <span class="hljs-number">2</span>                    <span class="hljs-keyword">elif</span> s[next_index] == <span class="hljs-string">&#x27;M&#x27;</span>:                        res += <span class="hljs-number">900</span>                        index += <span class="hljs-number">2</span>                    <span class="hljs-keyword">else</span>:                        res += <span class="hljs-number">100</span>                        index += <span class="hljs-number">1</span>                <span class="hljs-keyword">else</span>:                    res += <span class="hljs-number">100</span>                    index += <span class="hljs-number">1</span>            <span class="hljs-keyword">elif</span> s[index] == <span class="hljs-string">&#x27;V&#x27;</span>:                res += <span class="hljs-number">5</span>                index += <span class="hljs-number">1</span>            <span class="hljs-keyword">elif</span> s[index] == <span class="hljs-string">&#x27;L&#x27;</span>:                res += <span class="hljs-number">50</span>                index += <span class="hljs-number">1</span>            <span class="hljs-keyword">elif</span> s[index] == <span class="hljs-string">&#x27;D&#x27;</span>:                res += <span class="hljs-number">500</span>                index += <span class="hljs-number">1</span>            <span class="hljs-keyword">elif</span> s[index] == <span class="hljs-string">&#x27;M&#x27;</span>:                res += <span class="hljs-number">1000</span>                index += <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> res</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>point</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 14 20 21</title>
    <link href="/2022/05/04/leetcode20220504/"/>
    <url>/2022/05/04/leetcode20220504/</url>
    
    <content type="html"><![CDATA[<h1 id="最长公共前缀">14. 最长公共前缀</h1><p>首先最长公共前缀肯定小于等于最短字符串长度，所以先找出最短字符串长度，然后双循环比较字符串每个位置的值，都相等就记录，不相等直接返回当前记录。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestCommonPrefix</span>(<span class="hljs-params">self, strs: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-built_in">str</span>:        res = <span class="hljs-string">&quot;&quot;</span>        min_len = <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> strs:            min_len = <span class="hljs-built_in">min</span>(min_len, <span class="hljs-built_in">len</span>(i))        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(min_len):            tmp_target = strs[<span class="hljs-number">0</span>][i]            <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> strs:                <span class="hljs-keyword">if</span> s[i] != tmp_target:                    <span class="hljs-keyword">return</span> res            res += tmp_target                <span class="hljs-keyword">return</span> res</code></pre></div><h1 id="有效的括号">20. 有效的括号</h1><p>有点类似栈的思想，遍历字符串，遇到前括号进栈，遇到后括号时判断因素2个，一是栈是否为空，后括号遇到空栈说明不匹配直接返回<code>False</code>，二是后括号是否对应出栈的前括号，不对应也返回<code>False</code>。遍历完后如果栈非空说明前括号没找到对应的后括号，也返回<code>False</code>。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isValid</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        stack = []        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:            <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-keyword">or</span> i == <span class="hljs-string">&#x27;&#123;&#x27;</span> <span class="hljs-keyword">or</span> i == <span class="hljs-string">&#x27;[&#x27;</span>:                stack.append(i)            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> stack:                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>                <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-keyword">and</span> stack.pop() != <span class="hljs-string">&#x27;(&#x27;</span>:                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>                <span class="hljs-keyword">elif</span> i == <span class="hljs-string">&#x27;&#125;&#x27;</span> <span class="hljs-keyword">and</span> stack.pop() != <span class="hljs-string">&#x27;&#123;&#x27;</span>:                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>                <span class="hljs-keyword">elif</span> i == <span class="hljs-string">&#x27;]&#x27;</span> <span class="hljs-keyword">and</span> stack.pop() != <span class="hljs-string">&#x27;[&#x27;</span>:                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">if</span> stack:            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span></code></pre></div><h1 id="合并两个有序链表">21. 合并两个有序链表</h1><p>迭代，主要考察对链表的理解，要创建节点方便返回，然后在两个链表都有元素时，一次添加小的元素并移动对应链表的指针，直到两个链表的有一个的指针已经指向空了。最后看看如果另一个链表如果指向非空，直接把指针指过去。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mergeTwoLists</span>(<span class="hljs-params">self, list1: <span class="hljs-type">Optional</span>[ListNode], list2: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:        res = ListNode(<span class="hljs-number">0</span>)        tmp = res        <span class="hljs-keyword">while</span> list1 <span class="hljs-keyword">and</span> list2:            <span class="hljs-keyword">if</span> list1.val &lt;= list2.val:                tmp.<span class="hljs-built_in">next</span> = list1                tmp = tmp.<span class="hljs-built_in">next</span>                list1 = list1.<span class="hljs-built_in">next</span>            <span class="hljs-keyword">else</span>:                tmp.<span class="hljs-built_in">next</span> = list2                tmp = tmp.<span class="hljs-built_in">next</span>                list2 = list2.<span class="hljs-built_in">next</span>        <span class="hljs-keyword">if</span> list1:            tmp.<span class="hljs-built_in">next</span> = list1        <span class="hljs-keyword">elif</span> list2:            tmp.<span class="hljs-built_in">next</span> = list2        <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">next</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>stack</tag>
      
      <tag>linked list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 1 9</title>
    <link href="/2022/05/03/leetcode20220503/"/>
    <url>/2022/05/03/leetcode20220503/</url>
    
    <content type="html"><![CDATA[<h1 id="两数之和">1. 两数之和</h1><p>建立一个<code>dict</code>(map)，遍历一次数组，判断<code>目标值-当前值</code>是否在<code>dict</code>的<code>key</code>里，在就输出对应的<code>value</code>(index)与当前的<code>index</code>。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:        hashmap = &#123;&#125;        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):            temp_target = target - nums[i]            <span class="hljs-keyword">if</span> temp_target <span class="hljs-keyword">in</span> hashmap:                <span class="hljs-keyword">return</span> [hashmap[temp_target], i]            <span class="hljs-keyword">else</span>:                hashmap[nums[i]] = i        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span></code></pre></div><h1 id="回文数">9. 回文数</h1><p>转字符串判断正序和逆序是否相等。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(x)[::-<span class="hljs-number">1</span>]==<span class="hljs-built_in">str</span>(x)</code></pre></div><p> 左右指针逐步向中间移动判断每一步是否相等。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:        string = <span class="hljs-built_in">str</span>(x)        left = <span class="hljs-number">0</span>        right = <span class="hljs-built_in">len</span>(string)-<span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> left&lt;right:            <span class="hljs-keyword">if</span> string[left] != string[right]:                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>            <span class="hljs-keyword">else</span>:                left += <span class="hljs-number">1</span>                right -= <span class="hljs-number">1</span>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
      <category>Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
      <tag>point</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
